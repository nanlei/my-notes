{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u672c\u9879\u76ee\u4e3a\u4e2a\u4eba\u6280\u672f\u7b14\u8bb0","title":"Home"},{"location":"about/","text":"\u5f53\u524d\u5185\u5bb9 \u6846\u67b6\uff1aSpring Boot \u6570\u636e\u5e93\uff1aMySQL \u8fd0\u7ef4\uff1aDocker","title":"Who Am I"},{"location":"DataBase/MongoDB/basic/","text":"use admin db.createUser({ user:\"admin\", pwd:\"admin\", roles:[{role:\"userAdminAnyDatabase\", db:\"admin\"}] })","title":"Basic"},{"location":"DataBase/MongoDB/replica-set/","text":"MongoDB \u526f\u672c\u96c6\u5b89\u88c5\u548c\u914d\u7f6e(Docker\u7248) 1. \u62c9\u53d6MongoDB\u955c\u50cf \u00b6 # docker pull mongo Using default tag: latest Trying to pull repository docker.io/library/mongo ... latest: Pulling from docker.io/library/mongo f08d8e2a3ba1: Pull complete 3baa9cb2483b: Pull complete 94e5ff4c0b15: Pull complete 1860925334f9: Pull complete 9d42806c06e6: Pull complete 31a9fd218257: Pull complete 5bd6e3f73ab9: Pull complete f6ae7a64936b: Pull complete 80fde2cb25c5: Pull complete 1bec62fe62fc: Pull complete 2cf4970a1653: Pull complete 39fac3226e16: Pull complete 86bca9c64faf: Pull complete Digest: sha256:df9eca84736a666d5f7e7a09aeb8a6d8d073698d5b7349400f10ee75812e0e95 Status: Downloaded newer image for docker.io/mongo:latest 2. \u914d\u7f6e\u526f\u672c\u96c6 \u00b6 2.1 \u914d\u7f6e\u526f\u672c\u96c6\u6587\u4ef6\u5939 \u00b6 # mkdir -p /usr/mongodb/mongo1/data # mkdir -p /usr/mongodb/mongo2/data # mkdir -p /usr/mongodb/mongo3/data 2.2 \u751f\u6210keyfile \u00b6 # cd /usr/mongodb # openssl rand -base64 745 > keyfile # chmod 600 keyfile # chown 999 keyfile 2.3 \u521b\u5efadocker-compose.yml \u00b6 version: '3.1' services: mongo1: image: mongo hostname: mongo1 container_name: mongo1 restart: always networks: - mongodb ports: - 27017:27017 volumes: - /usr/mongodb/keyfile:/data/keyfile - /usr/mongodb/mongo1/data:/data/db environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: admin command: mongod --auth --keyFile /data/keyfile --bind_ip_all --replSet repls mongo2: image: mongo hostname: mongo2 container_name: mongo2 restart: always networks: - mongodb ports: - 27018:27017 volumes: - /usr/mongodb/keyfile:/data/keyfile - /usr/mongodb/mongo2/data:/data/db environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: admin command: mongod --auth --keyFile /data/keyfile --bind_ip_all --replSet repls mongo3: image: mongo hostname: mongo3 container_name: mongo3 restart: always networks: - mongodb ports: - 27019:27017 volumes: - /usr/mongodb/keyfile:/data/keyfile - /usr/mongodb/mongo3/data:/data/db environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: admin command: mongod --auth --keyFile /data/keyfile --bind_ip_all --replSet repls networks: mongodb: driver: bridge 3. \u8fd0\u884cdocker-compose\u521b\u5efa\u5bb9\u5668 \u00b6 # docker-compose -f docker-compose.yml up -d Creating network \"mongodb_mongodb\" with driver \"bridge\" Creating mongo1 ... done Creating mongo2 ... Creating mongo3 ... 4. \u914d\u7f6e\u526f\u672c\u96c6 \u00b6 4.1 \u83b7\u53d6\u4e3b\u673aIP\u5730\u5740\uff0c\u914d\u7f6e\u526f\u672c\u96c6 \u00b6 # docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mongo1 172.18.0.2 4.2 \u8bbe\u7f6e\u8282\u70b9\u5c5e\u6027 \u00b6 \u5982\u679c\u4f7f\u7528\u5185\u7f51IP\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5219\u5916\u90e8\u4e0d\u53ef\u4ee5\u8bbf\u95ee\u526f\u672c\u96c6(\u53ea\u80fd\u8bbf\u95eemaster\u8282\u70b9)\uff0c\u53ef\u4ee5\u6309\u7167\u5404\u81ea\u7684\u5185\u90e8\u7aef\u53e3\u8fdb\u884c\u914d\u7f6e\uff1a config = { _id: \"repls\" , members:[ {_id: 1, host: \"172.18.0.2:27017\" } , { _id: 2, host: \"172.18.0.3:27017\" } , { _id: 3, host: \"172.18.0.4:27017\" } ] } \u5982\u679c\u9700\u8981\u8fdc\u7a0b\u8bbf\u95ee\u526f\u672c\u96c6\uff0c\u5219\u9700\u8981\u4f7f\u7528\u516c\u7f51IP\u8fdb\u884c\u8bbe\u7f6e\uff0c\u7aef\u53e3\u4e3a\u6620\u5c04\u540e\u7684\u516c\u7f51\u7aef\u53e3\uff1a config = { _id: \"repls\" , members:[ {_id: 1, host: \"39.105.58.106:27017\" } , { _id: 2, host: \"39.105.58.106:27018\" } , { _id: 3, host: \"39.105.58.106:27019\" } ] } 4.3 \u767b\u9646\u5230mongo1\u8fdb\u884c\u8bbe\u7f6e \u00b6 # docker exec -it mongo1 /bin/bash root@mongo1:/# mongo -u admin -p admin MongoDB shell version v4.4.0 connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb Implicit session: session { \"id\" : UUID(\"bcedcab4-0454-4f77-9e69-4e818aad7ee7\") } MongoDB server version: 4.4.0 --- The server generated these startup warnings when booting: 2020-09-03T03:00:40.099+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem 2020-09-03T03:00:47.225+00:00: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never' 2020-09-03T03:00:47.225+00:00: /sys/kernel/mm/transparent_hugepage/defrag is 'always'. We suggest setting it to 'never' --- --- Enable MongoDB's free cloud-based monitoring service, which will then receive and display metrics about your deployment (disk utilization, CPU, operation statistics, etc). The monitoring data will be available on a MongoDB website with a unique URL accessible to you and anyone you share the URL with. MongoDB may use this information to make product improvements and to suggest MongoDB products and deployment options to you. To enable free monitoring, run the following command: db.enableFreeMonitoring() To permanently disable this reminder, run the following command: db.disableFreeMonitoring() --- > 4.4 \u4f7f\u7528rs.initiate()\u8fdb\u884c\u526f\u672c\u96c6\u8bbe\u7f6e \u00b6 > config = { ... _id:\"repls\", ... members:[ ... {_id: 1, host:\"172.18.0.2:27017\"}, ... {_id: 2, host:\"172.18.0.3:27017\"}, ... {_id: 3, host:\"172.18.0.4:27017\"} ... ] ... } { \"_id\" : \"repls\", \"members\" : [ { \"_id\" : 1, \"host\" : \"172.18.0.5:27017\" }, { \"_id\" : 2, \"host\" : \"172.18.0.6:27017\" }, { \"_id\" : 3, \"host\" : \"172.18.0.7:27017\" } ] } > rs.initiate(config) { \"ok\" : 1 } \u8fd4\u56de { \"ok\" : 1 } \u8bf4\u660e\u914d\u7f6e\u6210\u529f\uff0c\u53ef\u4ee5\u4f7f\u7528 rs.status() \u67e5\u770b\u526f\u672c\u96c6\u7684\u72b6\u6001 \u4f7f\u7528MongoDB Shell\u8fdb\u884c\u8fde\u63a5 \u00b6 \u5728MacOS\u7cfb\u7edf\uff0c\u4f7f\u7528brew\u8fdb\u884c\u5b89\u88c5\uff0c\u9700\u8981\u5148\u589e\u52a0MongoDB\u7684\u5b58\u50a8\u5e93 brew tap mongodb/brew ==> Tapping mongodb/brew Cloning into '/usr/local/Homebrew/Library/Taps/mongodb/homebrew-brew'... remote: Enumerating objects: 33, done. remote: Counting objects: 100% (33/33), done. remote: Compressing objects: 100% (27/27), done. remote: Total 377 (delta 12), reused 12 (delta 6), pack-reused 344 Receiving objects: 100% (377/377), 78.91 KiB | 20.00 KiB/s, done. Resolving deltas: 100% (167/167), done. Tapped 10 formulae (38 files, 145KB). \u4e4b\u540e\u5373\u53ef\u5b89\u88c5MongoDB Shell $ brew install mongodb-community-shell Updating Homebrew... ==> Installing mongodb-community-shell from mongodb/brew ==> Downloading https://fastdl.mongodb.org/osx/mongodb-shell-macos-x86_64-4.2.0.tgz ######################################################################## 100.0% \ud83c\udf7a /usr/local/Cellar/mongodb-community-shell/4.2.0: 8 files, 45MB, built in 4 seconds \u4f7f\u7528Mongo Shell\u8fdb\u884c\u8fde\u63a5 $ mongo mongodb://{usrname}:{password}@39.105.58.106:27017,39.105.58.106:27018,39.105.58.106:27019/?replicaSet=repls MongoDB shell version v4.2.0 connecting to: mongodb://39.105.58.106:27017,39.105.58.106:27018,39.105.58.106:27019/?compressors=disabled&gssapiServiceName=mongodb&replicaSet=repls 2020-09-03T17:13:13.528+0800 I NETWORK [js] Starting new replica set monitor for repls/39.105.58.106:27017,39.105.58.106:27018,39.105.58.106:27019 2020-09-03T17:13:13.530+0800 I CONNPOOL [ReplicaSetMonitor-TaskExecutor] Connecting to 39.105.58.106:27018 2020-09-03T17:13:13.531+0800 I CONNPOOL [ReplicaSetMonitor-TaskExecutor] Connecting to 39.105.58.106:27017 2020-09-03T17:13:13.531+0800 I CONNPOOL [ReplicaSetMonitor-TaskExecutor] Connecting to 39.105.58.106:27019 2020-09-03T17:13:13.722+0800 I NETWORK [ReplicaSetMonitor-TaskExecutor] Confirmed replica set for repls is repls/39.105.58.106:27017,39.105.58.106:27018,39.105.58.106:27019 Implicit session: session { \"id\" : UUID(\"e475dce7-ce80-4ecd-b85f-32ed13c80d52\") } MongoDB server version: 4.4.0 WARNING: shell and server versions do not match Server has startup warnings: {\"t\":{\"$date\":\"2020-09-03T03:00:40.099+00:00\"},\"s\":\"I\", \"c\":\"STORAGE\", \"id\":22297, \"ctx\":\"initandlisten\",\"msg\":\"Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem\",\"tags\":[\"startupWarnings\"]} {\"t\":{\"$date\":\"2020-09-03T03:00:47.225+00:00\"},\"s\":\"W\", \"c\":\"CONTROL\", \"id\":22178, \"ctx\":\"initandlisten\",\"msg\":\"/sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never'\",\"tags\":[\"startupWarnings\"]} {\"t\":{\"$date\":\"2020-09-03T03:00:47.225+00:00\"},\"s\":\"W\", \"c\":\"CONTROL\", \"id\":22181, \"ctx\":\"initandlisten\",\"msg\":\"/sys/kernel/mm/transparent_hugepage/defrag is 'always'. We suggest setting it to 'never'\",\"tags\":[\"startupWarnings\"]} --- Enable MongoDB's free cloud-based monitoring service, which will then receive and display metrics about your deployment (disk utilization, CPU, operation statistics, etc). The monitoring data will be available on a MongoDB website with a unique URL accessible to you and anyone you share the URL with. MongoDB may use this information to make product improvements and to suggest MongoDB products and deployment options to you. To enable free monitoring, run the following command: db.enableFreeMonitoring() To permanently disable this reminder, run the following command: db.disableFreeMonitoring() --- repls:PRIMARY> \u4f7f\u7528MongoDB Compass\u8fde\u63a5 \u00b6 \u4e0b\u8f7dMongoDB Compass\u5e76\u5b89\u88c5 https://www.mongodb.com/try/download/compass \u521b\u5efa\u8fde\u63a5\uff0c\u8fdb\u884c\u8bbe\u7f6e\uff1a \u5728\u66f4\u591a\u9009\u9879\u4e2d\u8bbe\u7f6e\u526f\u672c\u96c6\uff1a \u8fde\u63a5\u6210\u529f\uff0c\u5373\u53ef\u770b\u5230\u6570\u636e\u5e93\uff1a","title":"Replica Set"},{"location":"DataBase/MongoDB/replica-set/#1-mongodb","text":"# docker pull mongo Using default tag: latest Trying to pull repository docker.io/library/mongo ... latest: Pulling from docker.io/library/mongo f08d8e2a3ba1: Pull complete 3baa9cb2483b: Pull complete 94e5ff4c0b15: Pull complete 1860925334f9: Pull complete 9d42806c06e6: Pull complete 31a9fd218257: Pull complete 5bd6e3f73ab9: Pull complete f6ae7a64936b: Pull complete 80fde2cb25c5: Pull complete 1bec62fe62fc: Pull complete 2cf4970a1653: Pull complete 39fac3226e16: Pull complete 86bca9c64faf: Pull complete Digest: sha256:df9eca84736a666d5f7e7a09aeb8a6d8d073698d5b7349400f10ee75812e0e95 Status: Downloaded newer image for docker.io/mongo:latest","title":"1. \u62c9\u53d6MongoDB\u955c\u50cf"},{"location":"DataBase/MongoDB/replica-set/#2","text":"","title":"2. \u914d\u7f6e\u526f\u672c\u96c6"},{"location":"DataBase/MongoDB/replica-set/#21","text":"# mkdir -p /usr/mongodb/mongo1/data # mkdir -p /usr/mongodb/mongo2/data # mkdir -p /usr/mongodb/mongo3/data","title":"2.1 \u914d\u7f6e\u526f\u672c\u96c6\u6587\u4ef6\u5939"},{"location":"DataBase/MongoDB/replica-set/#22-keyfile","text":"# cd /usr/mongodb # openssl rand -base64 745 > keyfile # chmod 600 keyfile # chown 999 keyfile","title":"2.2 \u751f\u6210keyfile"},{"location":"DataBase/MongoDB/replica-set/#23-docker-composeyml","text":"version: '3.1' services: mongo1: image: mongo hostname: mongo1 container_name: mongo1 restart: always networks: - mongodb ports: - 27017:27017 volumes: - /usr/mongodb/keyfile:/data/keyfile - /usr/mongodb/mongo1/data:/data/db environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: admin command: mongod --auth --keyFile /data/keyfile --bind_ip_all --replSet repls mongo2: image: mongo hostname: mongo2 container_name: mongo2 restart: always networks: - mongodb ports: - 27018:27017 volumes: - /usr/mongodb/keyfile:/data/keyfile - /usr/mongodb/mongo2/data:/data/db environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: admin command: mongod --auth --keyFile /data/keyfile --bind_ip_all --replSet repls mongo3: image: mongo hostname: mongo3 container_name: mongo3 restart: always networks: - mongodb ports: - 27019:27017 volumes: - /usr/mongodb/keyfile:/data/keyfile - /usr/mongodb/mongo3/data:/data/db environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: admin command: mongod --auth --keyFile /data/keyfile --bind_ip_all --replSet repls networks: mongodb: driver: bridge","title":"2.3 \u521b\u5efadocker-compose.yml"},{"location":"DataBase/MongoDB/replica-set/#3-docker-compose","text":"# docker-compose -f docker-compose.yml up -d Creating network \"mongodb_mongodb\" with driver \"bridge\" Creating mongo1 ... done Creating mongo2 ... Creating mongo3 ...","title":"3. \u8fd0\u884cdocker-compose\u521b\u5efa\u5bb9\u5668"},{"location":"DataBase/MongoDB/replica-set/#4","text":"","title":"4. \u914d\u7f6e\u526f\u672c\u96c6"},{"location":"DataBase/MongoDB/replica-set/#41-ip","text":"# docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mongo1 172.18.0.2","title":"4.1 \u83b7\u53d6\u4e3b\u673aIP\u5730\u5740\uff0c\u914d\u7f6e\u526f\u672c\u96c6"},{"location":"DataBase/MongoDB/replica-set/#42","text":"\u5982\u679c\u4f7f\u7528\u5185\u7f51IP\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5219\u5916\u90e8\u4e0d\u53ef\u4ee5\u8bbf\u95ee\u526f\u672c\u96c6(\u53ea\u80fd\u8bbf\u95eemaster\u8282\u70b9)\uff0c\u53ef\u4ee5\u6309\u7167\u5404\u81ea\u7684\u5185\u90e8\u7aef\u53e3\u8fdb\u884c\u914d\u7f6e\uff1a config = { _id: \"repls\" , members:[ {_id: 1, host: \"172.18.0.2:27017\" } , { _id: 2, host: \"172.18.0.3:27017\" } , { _id: 3, host: \"172.18.0.4:27017\" } ] } \u5982\u679c\u9700\u8981\u8fdc\u7a0b\u8bbf\u95ee\u526f\u672c\u96c6\uff0c\u5219\u9700\u8981\u4f7f\u7528\u516c\u7f51IP\u8fdb\u884c\u8bbe\u7f6e\uff0c\u7aef\u53e3\u4e3a\u6620\u5c04\u540e\u7684\u516c\u7f51\u7aef\u53e3\uff1a config = { _id: \"repls\" , members:[ {_id: 1, host: \"39.105.58.106:27017\" } , { _id: 2, host: \"39.105.58.106:27018\" } , { _id: 3, host: \"39.105.58.106:27019\" } ] }","title":"4.2 \u8bbe\u7f6e\u8282\u70b9\u5c5e\u6027"},{"location":"DataBase/MongoDB/replica-set/#43-mongo1","text":"# docker exec -it mongo1 /bin/bash root@mongo1:/# mongo -u admin -p admin MongoDB shell version v4.4.0 connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb Implicit session: session { \"id\" : UUID(\"bcedcab4-0454-4f77-9e69-4e818aad7ee7\") } MongoDB server version: 4.4.0 --- The server generated these startup warnings when booting: 2020-09-03T03:00:40.099+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem 2020-09-03T03:00:47.225+00:00: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never' 2020-09-03T03:00:47.225+00:00: /sys/kernel/mm/transparent_hugepage/defrag is 'always'. We suggest setting it to 'never' --- --- Enable MongoDB's free cloud-based monitoring service, which will then receive and display metrics about your deployment (disk utilization, CPU, operation statistics, etc). The monitoring data will be available on a MongoDB website with a unique URL accessible to you and anyone you share the URL with. MongoDB may use this information to make product improvements and to suggest MongoDB products and deployment options to you. To enable free monitoring, run the following command: db.enableFreeMonitoring() To permanently disable this reminder, run the following command: db.disableFreeMonitoring() --- >","title":"4.3 \u767b\u9646\u5230mongo1\u8fdb\u884c\u8bbe\u7f6e"},{"location":"DataBase/MongoDB/replica-set/#44-rsinitiate","text":"> config = { ... _id:\"repls\", ... members:[ ... {_id: 1, host:\"172.18.0.2:27017\"}, ... {_id: 2, host:\"172.18.0.3:27017\"}, ... {_id: 3, host:\"172.18.0.4:27017\"} ... ] ... } { \"_id\" : \"repls\", \"members\" : [ { \"_id\" : 1, \"host\" : \"172.18.0.5:27017\" }, { \"_id\" : 2, \"host\" : \"172.18.0.6:27017\" }, { \"_id\" : 3, \"host\" : \"172.18.0.7:27017\" } ] } > rs.initiate(config) { \"ok\" : 1 } \u8fd4\u56de { \"ok\" : 1 } \u8bf4\u660e\u914d\u7f6e\u6210\u529f\uff0c\u53ef\u4ee5\u4f7f\u7528 rs.status() \u67e5\u770b\u526f\u672c\u96c6\u7684\u72b6\u6001","title":"4.4 \u4f7f\u7528rs.initiate()\u8fdb\u884c\u526f\u672c\u96c6\u8bbe\u7f6e"},{"location":"DataBase/MongoDB/replica-set/#mongodb-shell","text":"\u5728MacOS\u7cfb\u7edf\uff0c\u4f7f\u7528brew\u8fdb\u884c\u5b89\u88c5\uff0c\u9700\u8981\u5148\u589e\u52a0MongoDB\u7684\u5b58\u50a8\u5e93 brew tap mongodb/brew ==> Tapping mongodb/brew Cloning into '/usr/local/Homebrew/Library/Taps/mongodb/homebrew-brew'... remote: Enumerating objects: 33, done. remote: Counting objects: 100% (33/33), done. remote: Compressing objects: 100% (27/27), done. remote: Total 377 (delta 12), reused 12 (delta 6), pack-reused 344 Receiving objects: 100% (377/377), 78.91 KiB | 20.00 KiB/s, done. Resolving deltas: 100% (167/167), done. Tapped 10 formulae (38 files, 145KB). \u4e4b\u540e\u5373\u53ef\u5b89\u88c5MongoDB Shell $ brew install mongodb-community-shell Updating Homebrew... ==> Installing mongodb-community-shell from mongodb/brew ==> Downloading https://fastdl.mongodb.org/osx/mongodb-shell-macos-x86_64-4.2.0.tgz ######################################################################## 100.0% \ud83c\udf7a /usr/local/Cellar/mongodb-community-shell/4.2.0: 8 files, 45MB, built in 4 seconds \u4f7f\u7528Mongo Shell\u8fdb\u884c\u8fde\u63a5 $ mongo mongodb://{usrname}:{password}@39.105.58.106:27017,39.105.58.106:27018,39.105.58.106:27019/?replicaSet=repls MongoDB shell version v4.2.0 connecting to: mongodb://39.105.58.106:27017,39.105.58.106:27018,39.105.58.106:27019/?compressors=disabled&gssapiServiceName=mongodb&replicaSet=repls 2020-09-03T17:13:13.528+0800 I NETWORK [js] Starting new replica set monitor for repls/39.105.58.106:27017,39.105.58.106:27018,39.105.58.106:27019 2020-09-03T17:13:13.530+0800 I CONNPOOL [ReplicaSetMonitor-TaskExecutor] Connecting to 39.105.58.106:27018 2020-09-03T17:13:13.531+0800 I CONNPOOL [ReplicaSetMonitor-TaskExecutor] Connecting to 39.105.58.106:27017 2020-09-03T17:13:13.531+0800 I CONNPOOL [ReplicaSetMonitor-TaskExecutor] Connecting to 39.105.58.106:27019 2020-09-03T17:13:13.722+0800 I NETWORK [ReplicaSetMonitor-TaskExecutor] Confirmed replica set for repls is repls/39.105.58.106:27017,39.105.58.106:27018,39.105.58.106:27019 Implicit session: session { \"id\" : UUID(\"e475dce7-ce80-4ecd-b85f-32ed13c80d52\") } MongoDB server version: 4.4.0 WARNING: shell and server versions do not match Server has startup warnings: {\"t\":{\"$date\":\"2020-09-03T03:00:40.099+00:00\"},\"s\":\"I\", \"c\":\"STORAGE\", \"id\":22297, \"ctx\":\"initandlisten\",\"msg\":\"Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem\",\"tags\":[\"startupWarnings\"]} {\"t\":{\"$date\":\"2020-09-03T03:00:47.225+00:00\"},\"s\":\"W\", \"c\":\"CONTROL\", \"id\":22178, \"ctx\":\"initandlisten\",\"msg\":\"/sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never'\",\"tags\":[\"startupWarnings\"]} {\"t\":{\"$date\":\"2020-09-03T03:00:47.225+00:00\"},\"s\":\"W\", \"c\":\"CONTROL\", \"id\":22181, \"ctx\":\"initandlisten\",\"msg\":\"/sys/kernel/mm/transparent_hugepage/defrag is 'always'. We suggest setting it to 'never'\",\"tags\":[\"startupWarnings\"]} --- Enable MongoDB's free cloud-based monitoring service, which will then receive and display metrics about your deployment (disk utilization, CPU, operation statistics, etc). The monitoring data will be available on a MongoDB website with a unique URL accessible to you and anyone you share the URL with. MongoDB may use this information to make product improvements and to suggest MongoDB products and deployment options to you. To enable free monitoring, run the following command: db.enableFreeMonitoring() To permanently disable this reminder, run the following command: db.disableFreeMonitoring() --- repls:PRIMARY>","title":"\u4f7f\u7528MongoDB Shell\u8fdb\u884c\u8fde\u63a5"},{"location":"DataBase/MongoDB/replica-set/#mongodb-compass","text":"\u4e0b\u8f7dMongoDB Compass\u5e76\u5b89\u88c5 https://www.mongodb.com/try/download/compass \u521b\u5efa\u8fde\u63a5\uff0c\u8fdb\u884c\u8bbe\u7f6e\uff1a \u5728\u66f4\u591a\u9009\u9879\u4e2d\u8bbe\u7f6e\u526f\u672c\u96c6\uff1a \u8fde\u63a5\u6210\u529f\uff0c\u5373\u53ef\u770b\u5230\u6570\u636e\u5e93\uff1a","title":"\u4f7f\u7528MongoDB Compass\u8fde\u63a5"},{"location":"DataBase/MySQL/command-devops/","text":"MySQL \u8fd0\u7ef4 1. \u83b7\u53d6\u52a0\u8f7d\u7684\u914d\u7f6e\u6587\u4ef6 \u00b6 # mysql --help|grep 'my.cnf' order of preference, my.cnf, $MYSQL_TCP_PORT, /etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf","title":"Command devops"},{"location":"DataBase/MySQL/command-devops/#1","text":"# mysql --help|grep 'my.cnf' order of preference, my.cnf, $MYSQL_TCP_PORT, /etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf","title":"1. \u83b7\u53d6\u52a0\u8f7d\u7684\u914d\u7f6e\u6587\u4ef6"},{"location":"DataBase/MySQL/master-slave/","text":"MySQL \u4e3b\u4ece\u5b89\u88c5\u548c\u914d\u7f6e(Docker\u7248) 1. \u62c9\u53d6MySQL\u955c\u50cf \u00b6 # docker pull mysql Using default tag: latest Trying to pull repository docker.io/library/mysql ... latest: Pulling from docker.io/library/mysql bf5952930446: Pull complete 8254623a9871: Pull complete 938e3e06dac4: Pull complete ea28ebf28884: Pull complete f3cef38785c2: Pull complete 894f9792565a: Pull complete 1d8a57523420: Pull complete 6c676912929f: Pull complete ff39fdb566b4: Pull complete fff872988aba: Pull complete 4d34e365ae68: Pull complete 7886ee20621e: Pull complete Digest: sha256:c358e72e100ab493a0304bda35e6f239db2ec8c9bb836d8a427ac34307d074ed Status: Downloaded newer image for docker.io/mysql:latest 2. \u914d\u7f6e\u4e3b\u4ece\u955c\u50cf(1\u4e3b2\u4ece) \u00b6 2.1 \u914d\u7f6e\u4e3b\u4ece\u6587\u4ef6\u5939 \u00b6 # mkdir -p /usr/mysql/master # mkdir -p /usr/mysql/slave1 # mkdir -p /usr/mysql/slave2 2.2 \u57283\u4e2a\u76ee\u5f55\u4e0b\u521b\u5efaDockerfile \u00b6 FROM mysql COPY my.cnf /etc/mysql/ #RUN sed -i \"s@http://deb.debian.org@http://mirrors.aliyun.com@g\" /etc/apt/sources.list && rm -Rf /var/lib/apt/lists/* && apt-get update EXPOSE 3306 CMD [ \"mysqld\" ] 2.3 \u57283\u4e2a\u76ee\u5f55\u4e0b\u5206\u522b\u521b\u5efamy.cnf\u6587\u4ef6 \u00b6 master (/usr/mysql/master/my.cnf) [mysqld] log-bin = mysql-bin-master server-id = 11 secure_file_priv = /var/lib/mysql binlog-format = mixed binlog-do-db = demo binlog-ignore-db = mysql binlog-ignore-db = information_schema binlog-ignore-db = performance_schema binlog-ignore-db = sys wait_timeout = 28800 slave1 (/usr/mysql/slave1/my.cnf) [mysqld] log-bin = mysql-bin-slave1 server-id = 21 secure_file_priv = /var/lib/mysql binlog-format = mixed replicate-do-db = demo replicate-ignore-db = mysql replicate-ignore-db = information_schema replicate-ignore-db = performance_schema replicate-ignore-db = sys wait_timeout = 28800 slave2 (/usr/mysql/slave2/my.cnf) [mysqld] log-bin = mysql-bin-slave2 server-id = 22 secure_file_priv = /var/lib/mysql binlog-format = mixed replicate-do-db = demo replicate-ignore-db = mysql replicate-ignore-db = information_schema replicate-ignore-db = performance_schema replicate-ignore-db = sys wait_timeout = 28800 2.4 \u57283\u4e2a\u76ee\u5f55\u4e0b\u521b\u5efa\u6570\u636e\u5b50\u76ee\u5f55data\u548c\u914d\u7f6e\u5b50\u76ee\u5f55conf.d \u00b6 # mkdir data # mkdir conf.d 2.5 \u57283\u4e2a\u76ee\u5f55\u4e0b\u5206\u522b\u6784\u5efaDocker\u955c\u50cf \u00b6 master # cd /usr/mysql/master # docker build -t master/mysql . slave1 # cd /usr/mysql/slave1 # docker build -t slave1/mysql . slave2 # cd /usr/mysql/slave2 # docker build -t slave2/mysql . \u67e5\u770b\u521b\u5efa\u597d\u7684\u955c\u50cf # docker images REPOSITORY TAG IMAGE ID CREATED SIZE slave2/mysql latest 531514c39b89 3 seconds ago 544 MB slave1/mysql latest 3cc0f5fb6aab 19 seconds ago 544 MB master/mysql latest a756ddedfa9d 57 seconds ago 544 MB 3. \u521b\u5efa\u5bb9\u5668 \u00b6 master docker run --name mysql-master -p 33306:3306 -v /usr/mysql/master/data:/var/lib/mysql -v /usr/mysql/master/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d master/mysql slave1 docker run --name mysql-slave1 -p 33307:3306 -v /usr/mysql/slave1/data:/var/lib/mysql -v /usr/mysql/slave1/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d slave1/mysql slave2 docker run --name mysql-slave2 -p 33308:3306 -v /usr/mysql/slave2/data:/var/lib/mysql -v /usr/mysql/slave2/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d slave2/mysql 4. \u4e3b\u4ece\u5e93\u8bbe\u7f6e \u00b6 \u8fde\u63a5\u5230master\uff0c\u8fdb\u884c\u8bbe\u7f6e # docker exec -it mysql-master /bin/bash # mysql -uroot -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 9 Server version: 8.0.21 MySQL Community Server - GPL Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql> ALTER USER 'root' @ '%' IDENTIFIED BY 'root' ; GRANT ALL PRIVILEGES ON * . * TO 'root' @ '%' ; CREATE USER 'slave' IDENTIFIED WITH mysql_native_password BY 'slave' ; --GRANT ALL PRIVILEGES ON *.* TO 'slave'@'%'; GRANT REPLICATION SLAVE ON * . * TO 'slave' @ '%' ; flush privileges ; show master status ; + -------------------------+----------+--------------+-------------------------------------------------+-------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set | + -------------------------+----------+--------------+-------------------------------------------------+-------------------+ | mysql - bin - master . 000003 | 1356 | demo | mysql , information_schema , performance_schema , sys | | + -------------------------+----------+--------------+-------------------------------------------------+-------------------+ 1 row in set ( 0 . 00 sec ) \u83b7\u53d6\u4e3b\u5e93\u4e3b\u673aIP\u5730\u5740 # docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql-master 172.18.0.2 \u914d\u7f6e\u4e24\u4e2a\u4ece\u5e93\uff0croot\u7528\u6237\u9ed8\u8ba4\u6240\u6709\u6743\u9650\u5f00\u653e\uff0cmysql\u7528\u6237\u5219\u53ea\u5f00\u653eselect\u6743\u9650 stop slave ; ALTER USER 'root' @ '%' IDENTIFIED BY 'root' ; GRANT ALL PRIVILEGES ON * . * TO 'root' @ '%' ; CREATE USER 'mysql' @ '%' IDENTIFIED WITH mysql_native_password BY 'mysql' ; GRANT SELECT ON * . * TO 'mysql' @ '%' ; CHANGE MASTER TO MASTER_HOST = '172.18.0.2' , MASTER_PORT = 3306 , MASTER_USER = 'slave' , MASTER_PASSWORD = 'slave' , MASTER_LOG_FILE = 'mysql-bin-master.000003' , MASTER_LOG_POS = 1356 ; start slave ; show slave status \\ G ; *************************** 1 . row *************************** Slave_IO_State : Waiting for master to send event Master_Host : 172 . 18 . 0 . 2 Master_User : slave Master_Port : 3306 Connect_Retry : 60 Master_Log_File : mysql - bin - master . 000003 Read_Master_Log_Pos : 1356 Relay_Log_File : 8 adaf85d8b70 - relay - bin . 000002 Relay_Log_Pos : 331 Relay_Master_Log_File : mysql - bin - master . 000003 Slave_IO_Running : Yes Slave_SQL_Running : Yes Replicate_Do_DB : demo Replicate_Ignore_DB : mysql , information_schema , performance_schema , sys Slave_IO_Running \u548c Slave_SQL_Running \u5747\u4e3aYes\u65f6\u8868\u793a\u914d\u7f6e\u6210\u529f","title":"Master Slave"},{"location":"DataBase/MySQL/master-slave/#1-mysql","text":"# docker pull mysql Using default tag: latest Trying to pull repository docker.io/library/mysql ... latest: Pulling from docker.io/library/mysql bf5952930446: Pull complete 8254623a9871: Pull complete 938e3e06dac4: Pull complete ea28ebf28884: Pull complete f3cef38785c2: Pull complete 894f9792565a: Pull complete 1d8a57523420: Pull complete 6c676912929f: Pull complete ff39fdb566b4: Pull complete fff872988aba: Pull complete 4d34e365ae68: Pull complete 7886ee20621e: Pull complete Digest: sha256:c358e72e100ab493a0304bda35e6f239db2ec8c9bb836d8a427ac34307d074ed Status: Downloaded newer image for docker.io/mysql:latest","title":"1. \u62c9\u53d6MySQL\u955c\u50cf"},{"location":"DataBase/MySQL/master-slave/#2-12","text":"","title":"2. \u914d\u7f6e\u4e3b\u4ece\u955c\u50cf(1\u4e3b2\u4ece)"},{"location":"DataBase/MySQL/master-slave/#21","text":"# mkdir -p /usr/mysql/master # mkdir -p /usr/mysql/slave1 # mkdir -p /usr/mysql/slave2","title":"2.1 \u914d\u7f6e\u4e3b\u4ece\u6587\u4ef6\u5939"},{"location":"DataBase/MySQL/master-slave/#22-3dockerfile","text":"FROM mysql COPY my.cnf /etc/mysql/ #RUN sed -i \"s@http://deb.debian.org@http://mirrors.aliyun.com@g\" /etc/apt/sources.list && rm -Rf /var/lib/apt/lists/* && apt-get update EXPOSE 3306 CMD [ \"mysqld\" ]","title":"2.2 \u57283\u4e2a\u76ee\u5f55\u4e0b\u521b\u5efaDockerfile"},{"location":"DataBase/MySQL/master-slave/#23-3mycnf","text":"master (/usr/mysql/master/my.cnf) [mysqld] log-bin = mysql-bin-master server-id = 11 secure_file_priv = /var/lib/mysql binlog-format = mixed binlog-do-db = demo binlog-ignore-db = mysql binlog-ignore-db = information_schema binlog-ignore-db = performance_schema binlog-ignore-db = sys wait_timeout = 28800 slave1 (/usr/mysql/slave1/my.cnf) [mysqld] log-bin = mysql-bin-slave1 server-id = 21 secure_file_priv = /var/lib/mysql binlog-format = mixed replicate-do-db = demo replicate-ignore-db = mysql replicate-ignore-db = information_schema replicate-ignore-db = performance_schema replicate-ignore-db = sys wait_timeout = 28800 slave2 (/usr/mysql/slave2/my.cnf) [mysqld] log-bin = mysql-bin-slave2 server-id = 22 secure_file_priv = /var/lib/mysql binlog-format = mixed replicate-do-db = demo replicate-ignore-db = mysql replicate-ignore-db = information_schema replicate-ignore-db = performance_schema replicate-ignore-db = sys wait_timeout = 28800","title":"2.3 \u57283\u4e2a\u76ee\u5f55\u4e0b\u5206\u522b\u521b\u5efamy.cnf\u6587\u4ef6"},{"location":"DataBase/MySQL/master-slave/#24-3dataconfd","text":"# mkdir data # mkdir conf.d","title":"2.4 \u57283\u4e2a\u76ee\u5f55\u4e0b\u521b\u5efa\u6570\u636e\u5b50\u76ee\u5f55data\u548c\u914d\u7f6e\u5b50\u76ee\u5f55conf.d"},{"location":"DataBase/MySQL/master-slave/#25-3docker","text":"master # cd /usr/mysql/master # docker build -t master/mysql . slave1 # cd /usr/mysql/slave1 # docker build -t slave1/mysql . slave2 # cd /usr/mysql/slave2 # docker build -t slave2/mysql . \u67e5\u770b\u521b\u5efa\u597d\u7684\u955c\u50cf # docker images REPOSITORY TAG IMAGE ID CREATED SIZE slave2/mysql latest 531514c39b89 3 seconds ago 544 MB slave1/mysql latest 3cc0f5fb6aab 19 seconds ago 544 MB master/mysql latest a756ddedfa9d 57 seconds ago 544 MB","title":"2.5 \u57283\u4e2a\u76ee\u5f55\u4e0b\u5206\u522b\u6784\u5efaDocker\u955c\u50cf"},{"location":"DataBase/MySQL/master-slave/#3","text":"master docker run --name mysql-master -p 33306:3306 -v /usr/mysql/master/data:/var/lib/mysql -v /usr/mysql/master/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d master/mysql slave1 docker run --name mysql-slave1 -p 33307:3306 -v /usr/mysql/slave1/data:/var/lib/mysql -v /usr/mysql/slave1/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d slave1/mysql slave2 docker run --name mysql-slave2 -p 33308:3306 -v /usr/mysql/slave2/data:/var/lib/mysql -v /usr/mysql/slave2/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d slave2/mysql","title":"3. \u521b\u5efa\u5bb9\u5668"},{"location":"DataBase/MySQL/master-slave/#4","text":"\u8fde\u63a5\u5230master\uff0c\u8fdb\u884c\u8bbe\u7f6e # docker exec -it mysql-master /bin/bash # mysql -uroot -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 9 Server version: 8.0.21 MySQL Community Server - GPL Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql> ALTER USER 'root' @ '%' IDENTIFIED BY 'root' ; GRANT ALL PRIVILEGES ON * . * TO 'root' @ '%' ; CREATE USER 'slave' IDENTIFIED WITH mysql_native_password BY 'slave' ; --GRANT ALL PRIVILEGES ON *.* TO 'slave'@'%'; GRANT REPLICATION SLAVE ON * . * TO 'slave' @ '%' ; flush privileges ; show master status ; + -------------------------+----------+--------------+-------------------------------------------------+-------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set | + -------------------------+----------+--------------+-------------------------------------------------+-------------------+ | mysql - bin - master . 000003 | 1356 | demo | mysql , information_schema , performance_schema , sys | | + -------------------------+----------+--------------+-------------------------------------------------+-------------------+ 1 row in set ( 0 . 00 sec ) \u83b7\u53d6\u4e3b\u5e93\u4e3b\u673aIP\u5730\u5740 # docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql-master 172.18.0.2 \u914d\u7f6e\u4e24\u4e2a\u4ece\u5e93\uff0croot\u7528\u6237\u9ed8\u8ba4\u6240\u6709\u6743\u9650\u5f00\u653e\uff0cmysql\u7528\u6237\u5219\u53ea\u5f00\u653eselect\u6743\u9650 stop slave ; ALTER USER 'root' @ '%' IDENTIFIED BY 'root' ; GRANT ALL PRIVILEGES ON * . * TO 'root' @ '%' ; CREATE USER 'mysql' @ '%' IDENTIFIED WITH mysql_native_password BY 'mysql' ; GRANT SELECT ON * . * TO 'mysql' @ '%' ; CHANGE MASTER TO MASTER_HOST = '172.18.0.2' , MASTER_PORT = 3306 , MASTER_USER = 'slave' , MASTER_PASSWORD = 'slave' , MASTER_LOG_FILE = 'mysql-bin-master.000003' , MASTER_LOG_POS = 1356 ; start slave ; show slave status \\ G ; *************************** 1 . row *************************** Slave_IO_State : Waiting for master to send event Master_Host : 172 . 18 . 0 . 2 Master_User : slave Master_Port : 3306 Connect_Retry : 60 Master_Log_File : mysql - bin - master . 000003 Read_Master_Log_Pos : 1356 Relay_Log_File : 8 adaf85d8b70 - relay - bin . 000002 Relay_Log_Pos : 331 Relay_Master_Log_File : mysql - bin - master . 000003 Slave_IO_Running : Yes Slave_SQL_Running : Yes Replicate_Do_DB : demo Replicate_Ignore_DB : mysql , information_schema , performance_schema , sys Slave_IO_Running \u548c Slave_SQL_Running \u5747\u4e3aYes\u65f6\u8868\u793a\u914d\u7f6e\u6210\u529f","title":"4. \u4e3b\u4ece\u5e93\u8bbe\u7f6e"},{"location":"DevOps/devops-centos/","text":"CentOS \u8fd0\u7ef4 \u8fde\u63a5\u5230\u670d\u52a1\u5668 $ ssh root@xxx.xxx.xxx.xxx root@xxx.xxx.xxx.xxx's password: Last login: Fri Aug 14 19:27:34 2020 from 123.185.87.241 Welcome to Alibaba Cloud Elastic Compute Service ! -bash: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory \u67e5\u770b\u7cfb\u7edf\u7248\u672c\u4fe1\u606f # cat /proc/version Linux version 3.10.0-1127.18.2.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) ) #1 SMP Sun Jul 26 15:27:06 UTC 2020 # uname -a Linux iZ2zedz69evgzeipc297uyZ 3.10.0-1127.18.2.el7.x86_64 #1 SMP Sun Jul 26 15:27:06 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux # lsb_release -a LSB Version: :core-4.1-amd64:core-4.1-noarch Distributor ID: CentOS Description: CentOS Linux release 7.8.2003 (Core) Release: 7.8.2003 Codename: Core \u68c0\u67e5\u9700\u8981\u66f4\u65b0\u7684\u8f6f\u4ef6 # yum check-update Failed to set locale, defaulting to C Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile NetworkManager.x86_64 1:1.18.4-3.el7 base ... centos-release.x86_64 7-8.2003.0.el7.centos base ... \u5347\u7ea7\u8f6f\u4ef6 # yum upgrade Failed to set locale, defaulting to C Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile Resolving Dependencies --> Running transaction check ---> Package NetworkManager.x86_64 1:1.18.0-5.el7_7.1 will be updated ---> Package NetworkManager.x86_64 1:1.18.4-3.el7 will be an update ... Transaction Summary ==================================================================================================================================================================================== Install 3 Packages Upgrade 147 Packages Total download size: 293 M Is this ok [y/d/N]: y Downloading packages: Delta RPMs disabled because /usr/bin/applydeltarpm not installed. (1/150): NetworkManager-libnm-1.18.4-3.el7.x86_64.rpm ... util-linux.x86_64 0:2.23.2-63.el7 yum.noarch 0:3.4.3-167.el7.centos yum-plugin-fastestmirror.noarch 0:1.1.31-54.el7_8 Replaced: iwl7265-firmware.noarch 0:22.0.7.0-72.el7 Complete!","title":"CentOS"},{"location":"DevOps/devops-debian/","text":"Debian \u8fd0\u7ef4 \u83b7\u53d6\u53d1\u884c\u7248\u672c\u4fe1\u606f \u00b6 # cat /etc/os-release PRETTY_NAME=\"Debian GNU/Linux 10 (buster)\" NAME=\"Debian GNU/Linux\" VERSION_ID=\"10\" VERSION=\"10 (buster)\" VERSION_CODENAME=buster ID=debian HOME_URL=\"https://www.debian.org/\" SUPPORT_URL=\"https://www.debian.org/support\" BUG_REPORT_URL=\"https://bugs.debian.org/\" \u7f3a\u5931\u5305\u5b89\u88c5 \u00b6 \u53d1\u73b0\u7f3a\u5931\u5305 # vi /etc/mysql/my.cnf bash: vi: command not found \u65e0\u6cd5\u66f4\u65b0 # apt-get install vim Reading package lists... Done Building dependency tree Reading state information... Done E: Unable to locate package vim \u6267\u884capt-get update\u66f4\u65b0 # apt-get update Get:1 http://repo.mysql.com/apt/debian buster InRelease [21.5 kB] Get:2 http://repo.mysql.com/apt/debian buster/mysql-8.0 amd64 Packages [7172 B] Get:3 http://security.debian.org/debian-security buster/updates InRelease [65.4 kB] Get:4 http://deb.debian.org/debian buster InRelease [122 kB] Get:5 http://security.debian.org/debian-security buster/updates/main amd64 Packages [226 kB] Get:6 http://deb.debian.org/debian buster-updates InRelease [51.9 kB] Get:7 http://deb.debian.org/debian buster/main amd64 Packages [7906 kB] Get:7 http://deb.debian.org/debian buster/main amd64 Packages [7906 kB] Get:7 http://deb.debian.org/debian buster/main amd64 Packages [7906 kB] Get:8 http://deb.debian.org/debian buster-updates/main amd64 Packages [7868 B] Fetched 8008 kB in 5min 0s (26.7 kB/s) Reading package lists... Done \u518d\u6b21\u6267\u884c\u66f4\u65b0\u5b89\u88c5\u5373\u53ef","title":"Devops debian"},{"location":"DevOps/devops-debian/#_1","text":"# cat /etc/os-release PRETTY_NAME=\"Debian GNU/Linux 10 (buster)\" NAME=\"Debian GNU/Linux\" VERSION_ID=\"10\" VERSION=\"10 (buster)\" VERSION_CODENAME=buster ID=debian HOME_URL=\"https://www.debian.org/\" SUPPORT_URL=\"https://www.debian.org/support\" BUG_REPORT_URL=\"https://bugs.debian.org/\"","title":"\u83b7\u53d6\u53d1\u884c\u7248\u672c\u4fe1\u606f"},{"location":"DevOps/devops-debian/#_2","text":"\u53d1\u73b0\u7f3a\u5931\u5305 # vi /etc/mysql/my.cnf bash: vi: command not found \u65e0\u6cd5\u66f4\u65b0 # apt-get install vim Reading package lists... Done Building dependency tree Reading state information... Done E: Unable to locate package vim \u6267\u884capt-get update\u66f4\u65b0 # apt-get update Get:1 http://repo.mysql.com/apt/debian buster InRelease [21.5 kB] Get:2 http://repo.mysql.com/apt/debian buster/mysql-8.0 amd64 Packages [7172 B] Get:3 http://security.debian.org/debian-security buster/updates InRelease [65.4 kB] Get:4 http://deb.debian.org/debian buster InRelease [122 kB] Get:5 http://security.debian.org/debian-security buster/updates/main amd64 Packages [226 kB] Get:6 http://deb.debian.org/debian buster-updates InRelease [51.9 kB] Get:7 http://deb.debian.org/debian buster/main amd64 Packages [7906 kB] Get:7 http://deb.debian.org/debian buster/main amd64 Packages [7906 kB] Get:7 http://deb.debian.org/debian buster/main amd64 Packages [7906 kB] Get:8 http://deb.debian.org/debian buster-updates/main amd64 Packages [7868 B] Fetched 8008 kB in 5min 0s (26.7 kB/s) Reading package lists... Done \u518d\u6b21\u6267\u884c\u66f4\u65b0\u5b89\u88c5\u5373\u53ef","title":"\u7f3a\u5931\u5305\u5b89\u88c5"},{"location":"DevOps/devops-ubuntu/","text":"Ubuntu \u8fd0\u7ef4 \u7f3a\u5931\u5305\u5b89\u88c5 \u00b6 \u67e5\u770b\u7cfb\u7edf\u7248\u672c\uff0c\u53d1\u73b0\u547d\u4ee4\u4e0d\u5b58\u5728 # lsb_release -a bash: lsb_release: command not found \u4f7f\u7528apt-get\u5b89\u88c5\uff0c\u53d1\u73b0\u65e0\u6cd5\u5b9a\u4f4d\u5b89\u88c5\u5305 # apt-get install lsb-release Reading package lists... Done Building dependency tree Reading state information... Done E: Unable to locate package lsb-release \u6267\u884capt-get update\u66f4\u65b0 # apt-get update Ign:1 http://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 InRelease Hit:2 http://archive.ubuntu.com/ubuntu bionic InRelease Get:3 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB] Hit:4 http://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 Release Get:6 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB] Get:7 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [1067 kB] Get:8 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB] Get:9 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [1421 kB] Get:10 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [1362 kB] Get:11 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [892 kB] Fetched 4994 kB in 7s (692 kB/s) Reading package lists... Done \u518d\u6b21\u6267\u884c\u5b89\u88c5 # apt-get install lsb-release Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: distro-info-data file libexpat1 libmagic-mgc libmagic1 libmpdec2 libpython3-stdlib libpython3.6-minimal libpython3.6-stdlib mime-support python3 python3-minimal python3.6 python3.6-minimal xz-utils Suggested packages: lsb python3-doc python3-tk python3-venv python3.6-venv python3.6-doc binutils binfmt-support The following NEW packages will be installed: distro-info-data file libexpat1 libmagic-mgc libmagic1 libmpdec2 libpython3-stdlib libpython3.6-minimal libpython3.6-stdlib lsb-release mime-support python3 python3-minimal python3.6 python3.6-minimal xz-utils 0 upgraded, 16 newly installed, 0 to remove and 5 not upgraded. Need to get 4704 kB of archives. After this operation, 28.4 MB of additional disk space will be used. Do you want to continue? [Y/n] y Get:1 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 libpython3.6-minimal amd64 3.6.9-1~18.04ubuntu1.1 [533 kB] (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) Get:16 http://archive.ubuntu.com/ubuntu bionic/main amd64 xz-utils amd64 5.2.2-1.3 [83.8 kB] Fetched 4704 kB in 5s (902 kB/s) debconf: delaying package configuration, since apt-utils is not installed Selecting previously unselected package libpython3.6-minimal:amd64. (Reading database ... 6772 files and directories currently installed.) Preparing to unpack .../libpython3.6-minimal_3.6.9-1~18.04ubuntu1.1_amd64.deb ... (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) Unpacking lsb-release (9.20170808ubuntu1) ... Selecting previously unselected package xz-utils. Preparing to unpack .../6-xz-utils_5.2.2-1.3_amd64.deb ... Unpacking xz-utils (5.2.2-1.3) ... Setting up mime-support (3.60ubuntu1) ... Setting up distro-info-data (0.37ubuntu0.7) ... Setting up libmagic-mgc (1:5.32-2ubuntu0.4) ... Setting up libmagic1:amd64 (1:5.32-2ubuntu0.4) ... Setting up xz-utils (5.2.2-1.3) ... update-alternatives: using /usr/bin/xz to provide /usr/bin/lzma (lzma) in auto mode (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) Setting up libmpdec2:amd64 (2.4.2-1ubuntu1) ... Setting up libpython3.6-stdlib:amd64 (3.6.9-1~18.04ubuntu1.1) ... Setting up python3.6 (3.6.9-1~18.04ubuntu1.1) ... Setting up file (1:5.32-2ubuntu0.4) ... Setting up libpython3-stdlib:amd64 (3.6.7-1~18.04) ... Setting up python3 (3.6.7-1~18.04) ... running python rtupdate hooks for python3.6... running python post-rtupdate hooks for python3.6... Setting up lsb-release (9.20170808ubuntu1) ... Processing triggers for libc-bin (2.27-3ubuntu1.2) ... \u518d\u6b21\u6267\u884c\u547d\u4ee4 # lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 18.04.5 LTS Release: 18.04 Codename: bionic ping\u547d\u4ee4\u5b89\u88c5\uff1a apt-get install iputils-ping \u00b6","title":"Ubuntu"},{"location":"DevOps/devops-ubuntu/#_1","text":"\u67e5\u770b\u7cfb\u7edf\u7248\u672c\uff0c\u53d1\u73b0\u547d\u4ee4\u4e0d\u5b58\u5728 # lsb_release -a bash: lsb_release: command not found \u4f7f\u7528apt-get\u5b89\u88c5\uff0c\u53d1\u73b0\u65e0\u6cd5\u5b9a\u4f4d\u5b89\u88c5\u5305 # apt-get install lsb-release Reading package lists... Done Building dependency tree Reading state information... Done E: Unable to locate package lsb-release \u6267\u884capt-get update\u66f4\u65b0 # apt-get update Ign:1 http://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 InRelease Hit:2 http://archive.ubuntu.com/ubuntu bionic InRelease Get:3 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB] Hit:4 http://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 Release Get:6 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB] Get:7 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [1067 kB] Get:8 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB] Get:9 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [1421 kB] Get:10 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [1362 kB] Get:11 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [892 kB] Fetched 4994 kB in 7s (692 kB/s) Reading package lists... Done \u518d\u6b21\u6267\u884c\u5b89\u88c5 # apt-get install lsb-release Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: distro-info-data file libexpat1 libmagic-mgc libmagic1 libmpdec2 libpython3-stdlib libpython3.6-minimal libpython3.6-stdlib mime-support python3 python3-minimal python3.6 python3.6-minimal xz-utils Suggested packages: lsb python3-doc python3-tk python3-venv python3.6-venv python3.6-doc binutils binfmt-support The following NEW packages will be installed: distro-info-data file libexpat1 libmagic-mgc libmagic1 libmpdec2 libpython3-stdlib libpython3.6-minimal libpython3.6-stdlib lsb-release mime-support python3 python3-minimal python3.6 python3.6-minimal xz-utils 0 upgraded, 16 newly installed, 0 to remove and 5 not upgraded. Need to get 4704 kB of archives. After this operation, 28.4 MB of additional disk space will be used. Do you want to continue? [Y/n] y Get:1 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 libpython3.6-minimal amd64 3.6.9-1~18.04ubuntu1.1 [533 kB] (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) Get:16 http://archive.ubuntu.com/ubuntu bionic/main amd64 xz-utils amd64 5.2.2-1.3 [83.8 kB] Fetched 4704 kB in 5s (902 kB/s) debconf: delaying package configuration, since apt-utils is not installed Selecting previously unselected package libpython3.6-minimal:amd64. (Reading database ... 6772 files and directories currently installed.) Preparing to unpack .../libpython3.6-minimal_3.6.9-1~18.04ubuntu1.1_amd64.deb ... (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) Unpacking lsb-release (9.20170808ubuntu1) ... Selecting previously unselected package xz-utils. Preparing to unpack .../6-xz-utils_5.2.2-1.3_amd64.deb ... Unpacking xz-utils (5.2.2-1.3) ... Setting up mime-support (3.60ubuntu1) ... Setting up distro-info-data (0.37ubuntu0.7) ... Setting up libmagic-mgc (1:5.32-2ubuntu0.4) ... Setting up libmagic1:amd64 (1:5.32-2ubuntu0.4) ... Setting up xz-utils (5.2.2-1.3) ... update-alternatives: using /usr/bin/xz to provide /usr/bin/lzma (lzma) in auto mode (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) Setting up libmpdec2:amd64 (2.4.2-1ubuntu1) ... Setting up libpython3.6-stdlib:amd64 (3.6.9-1~18.04ubuntu1.1) ... Setting up python3.6 (3.6.9-1~18.04ubuntu1.1) ... Setting up file (1:5.32-2ubuntu0.4) ... Setting up libpython3-stdlib:amd64 (3.6.7-1~18.04) ... Setting up python3 (3.6.7-1~18.04) ... running python rtupdate hooks for python3.6... running python post-rtupdate hooks for python3.6... Setting up lsb-release (9.20170808ubuntu1) ... Processing triggers for libc-bin (2.27-3ubuntu1.2) ... \u518d\u6b21\u6267\u884c\u547d\u4ee4 # lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 18.04.5 LTS Release: 18.04 Codename: bionic","title":"\u7f3a\u5931\u5305\u5b89\u88c5"},{"location":"DevOps/devops-ubuntu/#ping-apt-get-install-iputils-ping","text":"","title":"ping\u547d\u4ee4\u5b89\u88c5\uff1a apt-get install iputils-ping"},{"location":"DevOps/docker/","text":"Docker 1. \u5b89\u88c5\u548c\u8fd0\u884c (\u57fa\u4e8eCentOS) \u00b6 1.1 \u5b89\u88c5Docker \u00b6 # yum install docker -y Failed to set locale, defaulting to C Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile Resolving Dependencies --> Running transaction check ... subscription-manager-rhsm-certificates.x86_64 0:1.24.26-4.el7.centos usermode.x86_64 0:1.111-6.el7 yajl.x86_64 0:2.0.4-4.el7 Complete! 1.2 \u5b89\u88c5ocker-compose \u00b6 # yum install docker-compose 1.3 \u68c0\u67e5\u5b89\u88c5\u7248\u672c \u00b6 # docker -v Docker version 1.13.1, build 64e9980/1.13.1 # docker-compose version docker-compose version 1.18.0, build 8dd22a9 docker-py version: 2.6.1 CPython version: 3.6.8 OpenSSL version: OpenSSL 1.0.2k-fips 26 Jan 2017 1.4 \u542f\u52a8Docker \u00b6 # systemctl start docker 1.5 \u505c\u6b62Docker \u00b6 # systemctl stop docker 1.6 \u8bbe\u7f6e\u5f00\u673a\u542f\u52a8 \u00b6 # systemctl enable docker Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service. 1.7 \u91cd\u542fDocker \u00b6 # systemctl restart docker 1.8 \u67e5\u770bDocker \u00b6 # docker info Containers: 0 Running: 0 Paused: 0 Stopped: 0 Images: 0 Server Version: 1.13.1 Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: true Logging Driver: journald Cgroup Driver: systemd Plugins: Volume: local Network: bridge host macvlan null overlay Swarm: inactive Runtimes: docker-runc runc Default Runtime: docker-runc Init Binary: /usr/libexec/docker/docker-init-current containerd version: (expected: aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1) runc version: 66aedde759f33c190954815fb765eedc1d782dd9 (expected: 9df8b306d01f59d3a8029be411de015b7304dd8f) init version: fec3683b971d9c3ef73f284f176672c44b448662 (expected: 949e6facb77383876aeff8a6944dde66b3089574) Security Options: seccomp WARNING: You're not using the default seccomp profile Profile: /etc/docker/seccomp.json Kernel Version: 3.10.0-1127.18.2.el7.x86_64 Operating System: CentOS Linux 7 (Core) OSType: linux Architecture: x86_64 Number of Docker Hooks: 3 CPUs: 2 Total Memory: 1.694 GiB Name: iZ2zedz69evgzeipc297uyZ ID: FQFX:YM25:JHQE:KBG6:4WHC:DYIC:O5VV:GQGS:F2HI:RKW7:3J3O:NMW6 Docker Root Dir: /var/lib/docker Debug Mode (client): false Debug Mode (server): false Registry: https://index.docker.io/v1/ Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false Registries: docker.io (secure) 2. \u5e38\u7528\u547d\u4ee4 \u00b6 2.1 \u67e5\u770b\u955c\u50cf \u00b6 docker images docker images -q #\u67e5\u770b\u6240\u6709\u955c\u50cfID 2.2 \u5220\u9664\u955c\u50cf \u00b6 # docker rmi master/mysql # docker rmi $(docker images -q) #\u5220\u9664\u6240\u6709\u955c\u50cf 2.3 \u67e5\u770b\u5bb9\u5668 \u00b6 docker ps docker ps -a #\u5217\u51fa\u6240\u6709\u5bb9\u5668(\u5305\u62ec\u672a\u8fd0\u884c\u7684) docker ps -aq #\u5217\u51fa\u6240\u6709\u5bb9\u5668ID 2.4 \u67e5\u770b\u5bb9\u5668log \u00b6 # docker logs a930350d7fe1 2.5 \u505c\u6b62\u5bb9\u5668 \u00b6 docker stop a930350d7fe1 docker stop $(docker ps -aq) #\u505c\u6b62\u6240\u6709\u5bb9\u5668 2.6 \u5220\u9664\u5bb9\u5668 \u00b6 # docker rm a930350d7fe1 # docker rm $(docker ps -aq) #\u5220\u9664\u6240\u6709\u5bb9\u5668 # docker rm -f a930350d7fe1 # \u76f4\u63a5\u5220\u9664\u8fd0\u884c\u4e2d\u5bb9\u5668 \u95ee\u9898\u5904\u7406 \u00b6 1. \u62c9\u53d6\u955c\u50cf\u65f6\u62a5\u9519:lookup production.cloudflare.docker.com: no such host \u00b6 # docker pull mysql Using default tag: latest Trying to pull repository docker.io/library/mysql ... latest: Pulling from docker.io/library/mysql bf5952930446: Pulling fs layer 8254623a9871: Pulling fs layer 938e3e06dac4: Pulling fs layer ea28ebf28884: Waiting f3cef38785c2: Waiting 894f9792565a: Waiting 1d8a57523420: Waiting 6c676912929f: Waiting ff39fdb566b4: Waiting fff872988aba: Waiting 4d34e365ae68: Waiting 7886ee20621e: Waiting error pulling image configuration: Get https://production.cloudflare.docker.com/registry-v2/docker/registry/v2/blobs/sha256/0d/0d64f46acfd1af4ee6a162f80c6e07e843761bf14d412060023bf0e69e720fb4/data?verify=1597410658-gR3hOa3pYHl9U6iRpV3OykN4STI%3D: dial tcp: lookup production.cloudflare.docker.com: no such host \u8fdb\u5165 /etc/resolv.conf \u6dfb\u52a0 nameserver 8.8.8.8 2. \u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162 \u00b6 \u624b\u52a8\u914d\u7f6e\u955c\u50cf\u6e90\uff0c /etc/docker/daemon.json \u4e2d\u6dfb\u52a0\uff1a { \"registry-mirrors\" : [ \"https://xxxxxxxx.mirror.aliyuncs.com\" ] }","title":"Basic"},{"location":"DevOps/docker/#1-centos","text":"","title":"1. \u5b89\u88c5\u548c\u8fd0\u884c (\u57fa\u4e8eCentOS)"},{"location":"DevOps/docker/#11-docker","text":"# yum install docker -y Failed to set locale, defaulting to C Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile Resolving Dependencies --> Running transaction check ... subscription-manager-rhsm-certificates.x86_64 0:1.24.26-4.el7.centos usermode.x86_64 0:1.111-6.el7 yajl.x86_64 0:2.0.4-4.el7 Complete!","title":"1.1 \u5b89\u88c5Docker"},{"location":"DevOps/docker/#12-ocker-compose","text":"# yum install docker-compose","title":"1.2 \u5b89\u88c5ocker-compose"},{"location":"DevOps/docker/#13","text":"# docker -v Docker version 1.13.1, build 64e9980/1.13.1 # docker-compose version docker-compose version 1.18.0, build 8dd22a9 docker-py version: 2.6.1 CPython version: 3.6.8 OpenSSL version: OpenSSL 1.0.2k-fips 26 Jan 2017","title":"1.3 \u68c0\u67e5\u5b89\u88c5\u7248\u672c"},{"location":"DevOps/docker/#14-docker","text":"# systemctl start docker","title":"1.4 \u542f\u52a8Docker"},{"location":"DevOps/docker/#15-docker","text":"# systemctl stop docker","title":"1.5 \u505c\u6b62Docker"},{"location":"DevOps/docker/#16","text":"# systemctl enable docker Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.","title":"1.6 \u8bbe\u7f6e\u5f00\u673a\u542f\u52a8"},{"location":"DevOps/docker/#17-docker","text":"# systemctl restart docker","title":"1.7 \u91cd\u542fDocker"},{"location":"DevOps/docker/#18-docker","text":"# docker info Containers: 0 Running: 0 Paused: 0 Stopped: 0 Images: 0 Server Version: 1.13.1 Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: true Logging Driver: journald Cgroup Driver: systemd Plugins: Volume: local Network: bridge host macvlan null overlay Swarm: inactive Runtimes: docker-runc runc Default Runtime: docker-runc Init Binary: /usr/libexec/docker/docker-init-current containerd version: (expected: aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1) runc version: 66aedde759f33c190954815fb765eedc1d782dd9 (expected: 9df8b306d01f59d3a8029be411de015b7304dd8f) init version: fec3683b971d9c3ef73f284f176672c44b448662 (expected: 949e6facb77383876aeff8a6944dde66b3089574) Security Options: seccomp WARNING: You're not using the default seccomp profile Profile: /etc/docker/seccomp.json Kernel Version: 3.10.0-1127.18.2.el7.x86_64 Operating System: CentOS Linux 7 (Core) OSType: linux Architecture: x86_64 Number of Docker Hooks: 3 CPUs: 2 Total Memory: 1.694 GiB Name: iZ2zedz69evgzeipc297uyZ ID: FQFX:YM25:JHQE:KBG6:4WHC:DYIC:O5VV:GQGS:F2HI:RKW7:3J3O:NMW6 Docker Root Dir: /var/lib/docker Debug Mode (client): false Debug Mode (server): false Registry: https://index.docker.io/v1/ Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false Registries: docker.io (secure)","title":"1.8 \u67e5\u770bDocker"},{"location":"DevOps/docker/#2","text":"","title":"2. \u5e38\u7528\u547d\u4ee4"},{"location":"DevOps/docker/#21","text":"docker images docker images -q #\u67e5\u770b\u6240\u6709\u955c\u50cfID","title":"2.1 \u67e5\u770b\u955c\u50cf"},{"location":"DevOps/docker/#22","text":"# docker rmi master/mysql # docker rmi $(docker images -q) #\u5220\u9664\u6240\u6709\u955c\u50cf","title":"2.2 \u5220\u9664\u955c\u50cf"},{"location":"DevOps/docker/#23","text":"docker ps docker ps -a #\u5217\u51fa\u6240\u6709\u5bb9\u5668(\u5305\u62ec\u672a\u8fd0\u884c\u7684) docker ps -aq #\u5217\u51fa\u6240\u6709\u5bb9\u5668ID","title":"2.3 \u67e5\u770b\u5bb9\u5668"},{"location":"DevOps/docker/#24-log","text":"# docker logs a930350d7fe1","title":"2.4 \u67e5\u770b\u5bb9\u5668log"},{"location":"DevOps/docker/#25","text":"docker stop a930350d7fe1 docker stop $(docker ps -aq) #\u505c\u6b62\u6240\u6709\u5bb9\u5668","title":"2.5 \u505c\u6b62\u5bb9\u5668"},{"location":"DevOps/docker/#26","text":"# docker rm a930350d7fe1 # docker rm $(docker ps -aq) #\u5220\u9664\u6240\u6709\u5bb9\u5668 # docker rm -f a930350d7fe1 # \u76f4\u63a5\u5220\u9664\u8fd0\u884c\u4e2d\u5bb9\u5668","title":"2.6 \u5220\u9664\u5bb9\u5668"},{"location":"DevOps/docker/#_1","text":"","title":"\u95ee\u9898\u5904\u7406"},{"location":"DevOps/docker/#1-lookup-productioncloudflaredockercom-no-such-host","text":"# docker pull mysql Using default tag: latest Trying to pull repository docker.io/library/mysql ... latest: Pulling from docker.io/library/mysql bf5952930446: Pulling fs layer 8254623a9871: Pulling fs layer 938e3e06dac4: Pulling fs layer ea28ebf28884: Waiting f3cef38785c2: Waiting 894f9792565a: Waiting 1d8a57523420: Waiting 6c676912929f: Waiting ff39fdb566b4: Waiting fff872988aba: Waiting 4d34e365ae68: Waiting 7886ee20621e: Waiting error pulling image configuration: Get https://production.cloudflare.docker.com/registry-v2/docker/registry/v2/blobs/sha256/0d/0d64f46acfd1af4ee6a162f80c6e07e843761bf14d412060023bf0e69e720fb4/data?verify=1597410658-gR3hOa3pYHl9U6iRpV3OykN4STI%3D: dial tcp: lookup production.cloudflare.docker.com: no such host \u8fdb\u5165 /etc/resolv.conf \u6dfb\u52a0 nameserver 8.8.8.8","title":"1. \u62c9\u53d6\u955c\u50cf\u65f6\u62a5\u9519:lookup production.cloudflare.docker.com: no such host"},{"location":"DevOps/docker/#2_1","text":"\u624b\u52a8\u914d\u7f6e\u955c\u50cf\u6e90\uff0c /etc/docker/daemon.json \u4e2d\u6dfb\u52a0\uff1a { \"registry-mirrors\" : [ \"https://xxxxxxxx.mirror.aliyuncs.com\" ] }","title":"2. \u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162"},{"location":"Linux/centos/","text":"","title":"Centos"},{"location":"Linux/ubuntu/","text":"","title":"Ubuntu"},{"location":"SpringBoot/01-spring-boot-application/","text":"01 - Spring Boot \u5e94\u7528\u7a0b\u5e8f 1. \u4f7f\u7528Maven\u547d\u4ee4\u884c\u6784\u5efa\u9879\u76ee \u00b6 $ mvn archetype:generate -DgroupId=deep-in-spring-boot -DartifactId=first-spring-boot-application -Dversion=1.0.0-SNAPSHOT -DinteractiveMode=false -Dpackage=deep.in.spring.boot \u7c7b\u4f3c\u7ed3\u679c\uff1a [INFO] Scanning for projects... ([INFO] [INFO] ------------------< org.apache.maven:standalone-pom >------------------- [INFO] Building Maven Stub Project (No POM) 1 [INFO] --------------------------------[ pom ]--------------------------------- [INFO] [INFO] >>> maven-archetype-plugin:3.2.0:generate (default-cli) > generate-sources @ standalone-pom >>> [INFO] [INFO] <<< maven-archetype-plugin:3.2.0:generate (default-cli) < generate-sources @ standalone-pom <<< [INFO] [INFO] ) [INFO] --- maven-archetype-plugin:3.2.0:generate (default-cli) @ standalone-pom --- [INFO] Generating project in Batch mode [WARNING] No archetype found in remote catalog. Defaulting to internal catalog [INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0) [INFO] ---------------------------------------------------------------------------- [INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-quickstart:1.0 [INFO] ---------------------------------------------------------------------------- [INFO] Parameter: basedir, Value: /Users/nanlei/Dev/Workspace [INFO] Parameter: package, Value: deep.in.spring.boot [INFO] Parameter: groupId, Value: deep-in-spring-boot [INFO] Parameter: artifactId, Value: first-spring-boot-application [INFO] Parameter: packageName, Value: deep.in.spring.boot [INFO] Parameter: version, Value: 1.0.0-SNAPSHOT [INFO] project created from Old (1.x) Archetype in dir: /Users/nanlei/Dev/Workspace/first-spring-boot-application [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.475 s [INFO] Finished at: 2020-08-01T23:51:37+08:00 archetype \u662fMaven\u63d2\u4ef6 maven-archetype-plugin \u7684\u7b80\u79f0 \u63d2\u4ef6\u76ee\u6807\uff1a archetype:generate \u63d2\u4ef6\u53c2\u6570\uff1aGAV\u4fe1\u606f groupId \uff0c artifactId \uff0c version \u548c\u5305\u540d package \u4ea4\u4e92\u5f0f\u53c2\u6570\uff1a interactiveMode \u4e3a false \uff0c\u4f7f\u7528\u9759\u9ed8\u65b9\u5f0f \u67e5\u770b\u9879\u76ee\u7ed3\u6784\uff1a $ cd first-spring-boot-application/ $ ls -ls total 8 8 -rw-r--r-- 1 nanlei staff 692 Aug 1 23:51 pom.xml 0 drwxr-xr-x 4 nanlei staff 128 Aug 1 23:51 src \u5b89\u88c5tree\u7ec4\u4ef6\u5e76\u518d\u6b21\u67e5\u770b\uff1a $ brew install tree ==> Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/bottles/tree-1.8.0.catalina.bottle.tar. ######################################################################## 100.0% ==> Pouring tree-1.8.0.catalina.bottle.tar.gz \ud83c\udf7a /usr/local/Cellar/tree/1.8.0: 8 files, 121.1KB $ tree . \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 deep \u2502 \u2514\u2500\u2500 in \u2502 \u2514\u2500\u2500 spring \u2502 \u2514\u2500\u2500 boot \u2502 \u2514\u2500\u2500 App.java \u2514\u2500\u2500 test \u2514\u2500\u2500 java \u2514\u2500\u2500 deep \u2514\u2500\u2500 in \u2514\u2500\u2500 spring \u2514\u2500\u2500 boot \u2514\u2500\u2500 AppTest.java 13 directories, 3 files App.java \u662f\u5f15\u5bfc\u7c7b\uff0c AppTest.java \u662f\u5355\u5143\u6d4b\u8bd5\u7c7b \u5728 pom.xml \u4e2d\uff0c archetype \u63d2\u4ef6\u6dfb\u52a0\u4e86 junit \u7684\u4f9d\u8d56 \u5728 pom.xml \u4e2d\u6dfb\u52a0Spring Boot\u7684web\u4f9d\u8d56\uff1a <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> 2.3.1.RELEASE </version> </dependency> \u67e5\u770b\u9879\u76ee dependency \u6811\u7684\u53d8\u5316\uff1a $ mvn dependency:tree -Dincludes=org.springframework* [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ first-spring-boot-application --- [INFO] deep-in-spring-boot:first-spring-boot-application:jar:1.0.0-SNAPSHOT [INFO] \\- org.springframework.boot:spring-boot-starter-web:jar:2.3.1.RELEASE:compile [INFO] +- org.springframework.boot:spring-boot-starter:jar:2.3.1.RELEASE:compile [INFO] | +- org.springframework.boot:spring-boot:jar:2.3.1.RELEASE:compile [INFO] | +- org.springframework.boot:spring-boot-autoconfigure:jar:2.3.1.RELEASE:compile [INFO] | +- org.springframework.boot:spring-boot-starter-logging:jar:2.3.1.RELEASE:compile [INFO] | \\- org.springframework:spring-core:jar:5.2.7.RELEASE:compile [INFO] | \\- org.springframework:spring-jcl:jar:5.2.7.RELEASE:compile [INFO] +- org.springframework.boot:spring-boot-starter-json:jar:2.3.1.RELEASE:compile [INFO] +- org.springframework.boot:spring-boot-starter-tomcat:jar:2.3.1.RELEASE:compile [INFO] +- org.springframework:spring-web:jar:5.2.7.RELEASE:compile [INFO] | \\- org.springframework:spring-beans:jar:5.2.7.RELEASE:compile [INFO] \\- org.springframework:spring-webmvc:jar:5.2.7.RELEASE:compile [INFO] +- org.springframework:spring-aop:jar:5.2.7.RELEASE:compile [INFO] +- org.springframework:spring-context:jar:5.2.7.RELEASE:compile [INFO] \\- org.springframework:spring-expression:jar:5.2.7.RELEASE:compile [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 0.802 s [INFO] Finished at: 2020-08-02T00:45:55+08:00 [INFO] ------------------------------------------------------------------------ \u7f16\u5199 App.java \u4ee3\u7801\uff1a @RestController @SpringBootApplication public class App { @RequestMapping ( \"/\" ) public String index () { return \"Welcome to Spring Boot!\" ; } public static void main ( String [] args ) { SpringApplication . run ( App . class , args ); } } \u4f7f\u7528Maven\u63d2\u4ef6\u65b9\u5f0f mvn spring-boot:run \u8fd0\u884c\u9879\u76ee\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... Downloading from aliyun-maven: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-metadata.xml Downloading from aliyun-maven: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/maven-metadata.xml Downloaded from aliyun-maven: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-metadata.xml (9.9 kB at 4.4 kB/s) Downloaded from aliyun-maven: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/maven-metadata.xml (21 kB at 8.7 kB/s) [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.835 s [INFO] Finished at: 2020-08-02T01:00:07+08:00 [INFO] ------------------------------------------------------------------------ [ERROR] No plugin found for prefix 'spring-boot' in the current project and in the plugin groups [org.apache.maven.plugins, org.codehaus.mojo] available from the repositories [local (/Users/nanlei/.m2/repository), aliyun-maven (http://maven.aliyun.com/nexus/content/groups/public/)] -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoPluginFoundForPrefixException \u67e5\u770b\u5b98\u65b9\u6587\u6863 https://docs.spring.io/spring-boot/docs/current/reference \u6709\u5982\u4e0b\u5185\u5bb9\uff1a 2.4.4. Running the Example At this point, your application should work. Since you used the spring-boot-starter-parent POM, you have a useful run goal that you can use to start the application. Type mvn spring-boot:run from the root project directory to start the application. \u5728 pom.xml \u4e2d\u6dfb\u52a0 spring-boot-starter-parent \uff1a <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.3.1.RELEASE </version> </parent> \u518d\u6b21\u8fd0\u884c\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] >>> spring-boot-maven-plugin:2.3.1.RELEASE:run (default-cli) > test-compile @ first-spring-boot-application >>> [INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ first-spring-boot-application --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ first-spring-boot-application --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ first-spring-boot-application --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ first-spring-boot-application --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] <<< spring-boot-maven-plugin:2.3.1.RELEASE:run (default-cli) < test-compile @ first-spring-boot-application <<< [INFO] [INFO] [INFO] --- spring-boot-maven-plugin:2.3.1.RELEASE:run (default-cli) @ first-spring-boot-application --- [INFO] Attaching agents: [] . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.1.RELEASE) 2020-08-02 01:13:46.642 INFO 6736 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 6736 (/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Workspace/first-spring-boot-application) 2020-08-02 01:13:46.644 INFO 6736 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-02 01:13:47.141 INFO 6736 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-02 01:13:47.147 INFO 6736 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-02 01:13:47.148 INFO 6736 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.36] 2020-08-02 01:13:47.181 INFO 6736 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-02 01:13:47.181 INFO 6736 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 507 ms 2020-08-02 01:13:47.268 INFO 6736 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-02 01:13:47.352 INFO 6736 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-02 01:13:47.359 INFO 6736 --- [ main] deep.in.spring.boot.App : Started App in 0.917 seconds (JVM running for 1.155) \u68c0\u67e5HTTP\u670d\u52a1\u548c\u6240\u5199\u4ee3\u7801\uff1a $ curl http://127.0.0.1:8080/ Welcome to Spring Boot 2. \u56fe\u5f62\u5316\u6784\u5efaSpring Boot\u5e94\u7528 \u00b6 https://start.spring.io/ \u62f7\u8d1d\u751f\u6210\u597d\u7684zip\u5305\u5230\u9879\u76ee\u76ee\u5f55\uff1a $ cp ~/Downloads/first-application-by-gui.zip . \u89e3\u538b\u7f29\u8be5\u6587\u4ef6\uff1a $ unzip first-application-by-gui.zip Archive: first-application-by-gui.zip creating: first-application-by-gui/ creating: first-application-by-gui/.mvn/ creating: first-application-by-gui/.mvn/wrapper/ inflating: first-application-by-gui/.mvn/wrapper/maven-wrapper.properties inflating: first-application-by-gui/.mvn/wrapper/MavenWrapperDownloader.java inflating: first-application-by-gui/.mvn/wrapper/maven-wrapper.jar inflating: first-application-by-gui/mvnw inflating: first-application-by-gui/.gitignore inflating: first-application-by-gui/HELP.md inflating: first-application-by-gui/mvnw.cmd creating: first-application-by-gui/src/ creating: first-application-by-gui/src/main/ creating: first-application-by-gui/src/main/resources/ creating: first-application-by-gui/src/main/resources/templates/ inflating: first-application-by-gui/src/main/resources/application.properties creating: first-application-by-gui/src/main/resources/static/ creating: first-application-by-gui/src/main/java/ creating: first-application-by-gui/src/main/java/deep/ creating: first-application-by-gui/src/main/java/deep/in/ creating: first-application-by-gui/src/main/java/deep/in/spring/ creating: first-application-by-gui/src/main/java/deep/in/spring/boot/ inflating: first-application-by-gui/src/main/java/deep/in/spring/boot/FirstApplicationByGuiApplication.java creating: first-application-by-gui/src/test/ creating: first-application-by-gui/src/test/java/ creating: first-application-by-gui/src/test/java/deep/ creating: first-application-by-gui/src/test/java/deep/in/ creating: first-application-by-gui/src/test/java/deep/in/spring/ creating: first-application-by-gui/src/test/java/deep/in/spring/boot/ inflating: first-application-by-gui/src/test/java/deep/in/spring/boot/FirstApplicationByGuiApplicationTests.java inflating: first-application-by-gui/pom.xml \u4f7f\u7528 tree \u547d\u4ee4\u67e5\u770b\uff1a $ tree -a first-application-by-gui first-application-by-gui \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 .mvn \u2502 \u2514\u2500\u2500 wrapper \u2502 \u251c\u2500\u2500 MavenWrapperDownloader.java \u2502 \u251c\u2500\u2500 maven-wrapper.jar \u2502 \u2514\u2500\u2500 maven-wrapper.properties \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2514\u2500\u2500 FirstApplicationByGuiApplication.java \u2502 \u2514\u2500\u2500 resources \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 static \u2502 \u2514\u2500\u2500 templates \u2514\u2500\u2500 test \u2514\u2500\u2500 java \u2514\u2500\u2500 deep \u2514\u2500\u2500 in \u2514\u2500\u2500 spring \u2514\u2500\u2500 boot \u2514\u2500\u2500 FirstApplicationByGuiApplicationTests.java 18 directories, 11 files .gitignore \u6587\u4ef6\u5b9a\u4e49\u4e86\u5e38\u89c1\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u7248\u672c\u63a7\u5236\u5ffd\u7565\u540d\u5355\uff0c\u6bd4\u5982\uff1a HELP.md target/ !.mvn/wrapper/maven-wrapper.jar !**/src/main/**/target/ !**/src/test/**/target/ ### STS ### .apt_generated .classpath .factorypath .project .settings .springBeans .sts4-cache ### IntelliJ IDEA ### .idea *.iws *.iml *.ipr ### NetBeans ### /nbproject/private/ /nbbuild/ /dist/ /nbdist/ /.nb-gradle/ build/ !**/src/main/**/build/ !**/src/test/**/build/ ### VS Code ### .vscode/ Maven Wrapper\u6587\u4ef6\u5305\u542b .mvn \u76ee\u5f55\u3001 mvnw \u548c mvnw.cmd \u6587\u4ef6\uff0c \u53c2\u8003\uff1a https://github.com/takari/maven-wrapper \u53ef\u4ee5\u4e0d\u5b89\u88c5Maven\u800c\u76f4\u63a5\u4f7f\u7528\uff0c\u6bd4\u5982\uff1a Normally you instruct users to install a specific version of Apache Maven, put it on the PATH and then run the mvn command like the following: mvn clean install But now, with a Maven Wrapper setup, you can instruct users to run wrapper scripts: ./mvnw clean install application.properties \u6587\u4ef6 \u662fSpring Boot\u9ed8\u8ba4\u7684\u5e94\u7528\u5916\u90e8\u914d\u7f6e\u6587\u4ef6\uff0c\u5176\u914d\u7f6e\u5c5e\u6027\u53ef\u4ee5\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f\u7684\u884c\u4e3a\u3002 FirstApplicationByGuiApplicationTests.java \u6587\u4ef6 \u662fSpring Boot\u5355\u5143\u6d4b\u8bd5\u7684\u6a21\u7248JUnit\u6587\u4ef6\uff0c\u5176\u8def\u5f84\u548c\u5bf9\u5e94\u7684\u5f15\u5bfc\u6587\u4ef6 FirstApplicationByGuiApplication.java \u5bf9\u5e94\u3002 \u542f\u52a8\u9879\u76ee\u5e76\u8bbf\u95ee\uff1a $ curl http://127.0.0.1:8080/ {\"timestamp\":\"2020-08-02T08:57:15.817+00:00\",\"status\":404,\"error\":\"Not Found\",\"message\":\"\",\"path\":\"/\"} \u56e0\u9879\u76ee\u6ca1\u6709\u7f16\u5199\u9ed8\u8ba4\u670d\u52a1\u800c\u62a5404\u9519\u8bef \u5b89\u88c5 jsonpp \u67e5\u770bJSON\u54cd\u5e94\uff1a $ brew install jsonpp ==> Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/bottles/jsonpp-1.3.0_1.catalina.bottle.tar.gz ######################################################################## 100.0% ==> Pouring jsonpp-1.3.0_1.catalina.bottle.tar.gz \ud83c\udf7a /usr/local/Cellar/jsonpp/1.3.0_1: 5 files, 2.4MB \u518d\u6b21\u8bbf\u95ee\uff1a $ curl http://127.0.0.1:8080 | jsonpp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 102 0 102 0 0 20400 0 --:--:-- --:--:-- --:--:-- 20400 { \"timestamp\": \"2020-08-02T09:03:24.359+00:00\", \"status\": 404, \"error\": \"Not Found\", \"message\": \"\", \"path\": \"/\" } 3. \u521b\u5efaSpring Boot\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u6267\u884cJAR \u00b6 2.4.5. Creating an Executable Jar We finish our example by creating a completely self-contained executable jar file that we could run in production. Executable jars (sometimes called \u201cfat jars\u201d) are archives containing your compiled classes along with all of the jar dependencies that your code needs to run. \u53ef\u6267\u884c\u7684JAR\u53c8\u79f0\u4e3a\u201cfat jars\u201d To create an executable jar, we need to add the spring-boot-maven-plugin to our pom.xml . To do so, insert the following lines just below the dependencies section: \u6839\u636e\u5b98\u65b9\u6587\u6863\u89e3\u91ca\uff0c\u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\u5230 pom.xml \u4e2d\uff1a <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> \u7136\u540e\u6267\u884c mvn package \u547d\u4ee4\uff1a $ mvn package [INFO] Scanning for projects... [INFO] [INFO] ------------< deep-in-spring-boot:first-application-by-gui >------------ [INFO] Building first-application-by-gui 0.0.1-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) [INFO] ------------------------------------------------------- [INFO] T E S T S [INFO] ------------------------------------------------------- (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-02 17:15:06.025 INFO 4060 --- [ main] .b.FirstApplicationByGuiApplicationTests : Starting FirstApplicationByGuiApplicationTests on nanleis-MacBook-Pro.local with PID 4060 (started by nanlei in /Users/nanlei/Dev/Workspace/first-application-by-gui) 2020-08-02 17:15:06.026 INFO 4060 --- [ main] .b.FirstApplicationByGuiApplicationTests : No active profile set, falling back to default profiles: default 2020-08-02 17:15:06.709 INFO 4060 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-02 17:15:06.958 INFO 4060 --- [ main] .b.FirstApplicationByGuiApplicationTests : Started FirstApplicationByGuiApplicationTests in 1.075 seconds (JVM running for 1.706) [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.508 s - in deep.in.spring.boot.FirstApplicationByGuiApplicationTests 2020-08-02 17:15:07.127 INFO 4060 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor : Shutting down ExecutorService 'applicationTaskExecutor' [INFO] [INFO] Results: [INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] [INFO] --- maven-jar-plugin:3.2.0:jar (default-jar) @ first-application-by-gui --- [INFO] Building jar: /Users/nanlei/Dev/Workspace/first-application-by-gui/target/first-application-by-gui-0.0.1-SNAPSHOT.jar [INFO] [INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:repackage (repackage) @ first-application-by-gui --- [INFO] Replacing main artifact with repackaged archive [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.535 s [INFO] Finished at: 2020-08-02T17:15:07+08:00 [INFO] ------------------------------------------------------------------------ \u6700\u7ec8\u751f\u6210\u7684 first-application-by-gui-0.0.1-SNAPSHOT.jar \u5c31\u5728 target \u76ee\u5f55\u4e0b\uff0c\u4f7f\u7528 java -jar \u547d\u4ee4\u8fd0\u884cJAR\uff1a $ java -jar target/first-application-by-gui-0.0.1-SNAPSHOT.jar . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-02 17:24:33.034 INFO 4219 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : Starting FirstApplicationByGuiApplication v0.0.1-SNAPSHOT on nanleis-MacBook-Pro.local with PID 4219 (/Users/nanlei/Dev/Workspace/first-application-by-gui/target/first-application-by-gui-0.0.1-SNAPSHOT.jar started by nanlei in /Users/nanlei/Dev/Workspace/first-application-by-gui) 2020-08-02 17:24:33.036 INFO 4219 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : No active profile set, falling back to default profiles: default 2020-08-02 17:24:33.800 INFO 4219 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-02 17:24:33.809 INFO 4219 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-02 17:24:33.810 INFO 4219 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.37] 2020-08-02 17:24:33.865 INFO 4219 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-02 17:24:33.865 INFO 4219 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 785 ms 2020-08-02 17:24:34.031 INFO 4219 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-02 17:24:34.221 INFO 4219 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-02 17:24:34.231 INFO 4219 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : Started FirstApplicationByGuiApplication in 1.523 seconds (JVM running for 1.894) java -jar \u65b9\u5f0f\u548c mvn spring-boot:run \u65b9\u5f0f\u57fa\u672c\u65e0\u5f02 4. Spring Boot\u53ef\u6267\u884cJAR\u8d44\u6e90\u7ed3\u6784 \u00b6 \u5728 target \u76ee\u5f55\u4e0b\u6267\u884c tree -h $ tree -h . \u251c\u2500\u2500 [ 128] classes \u2502 \u251c\u2500\u2500 [ 1] application.properties \u2502 \u2514\u2500\u2500 [ 96] deep \u2502 \u2514\u2500\u2500 [ 96] in \u2502 \u2514\u2500\u2500 [ 96] spring \u2502 \u2514\u2500\u2500 [ 96] boot \u2502 \u2514\u2500\u2500 [ 790] FirstApplicationByGuiApplication.class \u251c\u2500\u2500 [ 16M] first-application-by-gui-0.0.1-SNAPSHOT.jar \u251c\u2500\u2500 [3.0K] first-application-by-gui-0.0.1-SNAPSHOT.jar.original \u251c\u2500\u2500 [ 96] generated-sources \u2502 \u2514\u2500\u2500 [ 64] annotations \u251c\u2500\u2500 [ 96] generated-test-sources \u2502 \u2514\u2500\u2500 [ 64] test-annotations \u251c\u2500\u2500 [ 96] maven-archiver \u2502 \u2514\u2500\u2500 [ 87] pom.properties \u251c\u2500\u2500 [ 96] maven-status \u2502 \u2514\u2500\u2500 [ 128] maven-compiler-plugin \u2502 \u251c\u2500\u2500 [ 96] compile \u2502 \u2502 \u2514\u2500\u2500 [ 128] default-compile \u2502 \u2502 \u251c\u2500\u2500 [ 59] createdFiles.lst \u2502 \u2502 \u2514\u2500\u2500 [ 125] inputFiles.lst \u2502 \u2514\u2500\u2500 [ 96] testCompile \u2502 \u2514\u2500\u2500 [ 128] default-testCompile \u2502 \u251c\u2500\u2500 [ 64] createdFiles.lst \u2502 \u2514\u2500\u2500 [ 130] inputFiles.lst \u251c\u2500\u2500 [ 128] surefire-reports \u2502 \u251c\u2500\u2500 [ 18K] TEST-deep.in.spring.boot.FirstApplicationByGuiApplicationTests.xml \u2502 \u2514\u2500\u2500 [ 363] deep.in.spring.boot.FirstApplicationByGuiApplicationTests.txt \u2514\u2500\u2500 [ 96] test-classes \u2514\u2500\u2500 [ 96] deep \u2514\u2500\u2500 [ 96] in \u2514\u2500\u2500 [ 96] spring \u2514\u2500\u2500 [ 96] boot \u2514\u2500\u2500 [ 588] FirstApplicationByGuiApplicationTests.class 22 directories, 12 files first-application-by-gui-0.0.1-SNAPSHOT.jar.original \u662f\u672a\u5305\u542b\u7b2c\u4e09\u65b9\u4f9d\u8d56\u7684\u672c\u5730\u8d44\u6e90(\u7f16\u8bd1\u540e\u7684 classes \u76ee\u5f55\u4e0b\u7684\u8d44\u6e90)\uff0c\u6240\u5360\u7a7a\u95f4\u4ec53K\uff0c\u800c\u53ef\u6267\u884cJAR\u7684\u5927\u5c0f\u4e3a16M\u3002 \u89e3\u538b\u7f29 first-application-by-gui-0.0.1-SNAPSHOT.jar \u5230\u4e34\u65f6\u76ee\u5f55temp\u5e76\u67e5\u770b\uff1a $ unzip first-application-by-gui-0.0.1-SNAPSHOT.jar -d temp Archive: first-application-by-gui-0.0.1-SNAPSHOT.jar creating: temp/META-INF/ inflating: temp/META-INF/MANIFEST.MF creating: temp/org/ creating: temp/org/springframework/ creating: temp/org/springframework/boot/ creating: temp/org/springframework/boot/loader/ (\u7701\u7565\u90e8\u5206\u5185\u5bb9) extracting: temp/BOOT-INF/lib/tomcat-embed-websocket-9.0.37.jar extracting: temp/BOOT-INF/lib/spring-web-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-beans-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-webmvc-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-aop-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-context-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-expression-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/slf4j-api-1.7.30.jar extracting: temp/BOOT-INF/lib/spring-core-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-jcl-5.2.8.RELEASE.jar inflating: temp/BOOT-INF/classpath.idx \u67e5\u770btemp\u76ee\u5f55\u7684\u7ed3\u6784\uff1a $ tree temp/ temp/ \u251c\u2500\u2500 BOOT-INF \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2514\u2500\u2500 FirstApplicationByGuiApplication.class \u2502 \u251c\u2500\u2500 classpath.idx \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500 spring-aop-5.2.8.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-beans-5.2.8.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-2.3.2.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-autoconfigure-2.3.2.RELEASE.jar \u2502 \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500 tomcat-embed-core-9.0.37.jar \u2502 \u2514\u2500\u2500 tomcat-embed-websocket-9.0.37.jar \u251c\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 deep-in-spring-boot \u2502 \u2514\u2500\u2500 first-application-by-gui \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 org \u2514\u2500\u2500 springframework \u2514\u2500\u2500 boot \u2514\u2500\u2500 loader \u251c\u2500\u2500 ClassPathIndexFile.class \u251c\u2500\u2500 ExecutableArchiveLauncher.class \u251c\u2500\u2500 JarLauncher.class \u251c\u2500\u2500 ... 20 directories, 100 files \u5176\u4e2d BOOT-INT/classes \u76ee\u5f55\u5b58\u653e\u5e94\u7528\u7f16\u8bd1\u540e\u7684class\u6587\u4ef6 BOOT-INF/lib \u76ee\u5f55\u5b58\u653e\u5e94\u7528\u4f9d\u8d56\u7684jar\u5305 META-INF \u76ee\u5f55\u5b58\u653e\u5e94\u7528\u76f8\u5173\u7684\u5143\u4fe1\u606f\uff0c\u6bd4\u5982 MANIFEST.MF \u6587\u4ef6 org \u76ee\u5f55\u5b58\u653eSpring Boot\u6846\u67b6\u76f8\u5173\u7684class\u6587\u4ef6 \u89e3\u538b\u7f29 first-application-by-gui-0.0.1-SNAPSHOT.jar.original \u6587\u4ef6\u5e76\u6bd4\u8f83\u4e8c\u8005\u76ee\u5f55\u5dee\u5f02\uff1a $ unzip first-application-by-gui-0.0.1-SNAPSHOT.jar.original -d original Archive: first-application-by-gui-0.0.1-SNAPSHOT.jar.original inflating: original/META-INF/MANIFEST.MF creating: original/deep/ creating: original/deep/in/ creating: original/deep/in/spring/ creating: original/deep/in/spring/boot/ creating: original/META-INF/maven/ creating: original/META-INF/maven/deep-in-spring-boot/ creating: original/META-INF/maven/deep-in-spring-boot/first-application-by-gui/ inflating: original/deep/in/spring/boot/FirstApplicationByGuiApplication.class inflating: original/application.properties inflating: original/META-INF/maven/deep-in-spring-boot/first-application-by-gui/pom.xml inflating: original/META-INF/maven/deep-in-spring-boot/first-application-by-gui/pom.properties $ tree original/ original/ \u251c\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 deep-in-spring-boot \u2502 \u2514\u2500\u2500 first-application-by-gui \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 application.properties \u2514\u2500\u2500 deep \u2514\u2500\u2500 in \u2514\u2500\u2500 spring \u2514\u2500\u2500 boot \u2514\u2500\u2500 FirstApplicationByGuiApplication.class 8 directories, 5 files \u9664\u4e86 META-INF \u76ee\u5f55\uff0c\u5176\u4f59\u5747\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5c06class\u6587\u4ef6\u548c application.properties \u653e\u5230\u4e86 BOOT-INF/classes \u4e0b\uff0c\u5c06\u6240\u6709\u4f9d\u8d56\u7684jar\u5305\u90fd\u653e\u5230\u4e86 BOOT-INF/lib \u4e0b\u3002\u8fd9\u548c\u4f20\u7edfJava Web\u9879\u76ee\u662f\u7c7b\u4f3c\u7684\uff0c\u6240\u6709class\u6587\u4ef6\u653e\u5728 WEB-INF/classes \u4e0b\uff0c\u800c\u6240\u6709\u4f9d\u8d56\u5728 WEB-INF/lib \u4e0b\u3002 5. JAR\u6267\u884c\u6a21\u5757 spring-boot-loader \u00b6 \u53ef\u6267\u884cJAR\u5305\u88ab java -jar \u547d\u4ee4\u6267\u884c\u65f6\uff0c\u5176\u5e76\u4e0d\u80fd\u611f\u77e5jar\u6587\u4ef6\u662f\u5426\u662fSpring Boot\u63d2\u4ef6\u6253\u5305\u800c\u6765\uff0c\u6267\u884c\u6309\u7167\u6807\u51c6JAR\u6587\u4ef6\u6765\u8fdb\u884c\u3002 Java\u6807\u51c6\u53c2\u8003\uff1a https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html If the -jar option is specified, its argument is the name of the JAR file containing class and resource files for the application. The startup class must be indicated by the Main-Class manifest header in its source code. \u4e5f\u5c31\u662f MANIFEST.MF \u6587\u4ef6\u5fc5\u987b\u5728 META-INF \u76ee\u5f55\u4e0b\uff0c\u67e5\u770b\u8be5\u6587\u4ef6: $ cd temp $ cat META-INF/MANIFEST.MF Manifest-Version: 1.0 Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx Implementation-Title: first-application-by-gui Implementation-Version: 0.0.1-SNAPSHOT Start-Class: deep.in.spring.boot.FirstApplicationByGuiApplication Spring-Boot-Classes: BOOT-INF/classes/ Spring-Boot-Lib: BOOT-INF/lib/ Build-Jdk-Spec: 1.8 Spring-Boot-Version: 2.3.2.RELEASE Created-By: Maven Jar Plugin 3.2.0 Main-Class: org.springframework.boot.loader.JarLauncher \u53d1\u73b0 Main-Class \u5c5e\u6027\u4e3a org.springframework.boot.loader.JarLauncher \uff0c\u800c\u9879\u76ee\u7684\u5f15\u5bfc\u7c7b\u5728 Start-Class \u5c5e\u6027\u4e2d\uff0c\u53c2\u8003\u5b98\u65b9\u6587\u6863\u4ecb\u7ecd\uff1a You need to specify an appropriate Launcher as the Main-Class attribute of META-INF/MANIFEST.MF. The actual class that you want to launch (that is, the class that contains a main method) should be specified in the Start-Class attribute. The following example shows a typical MANIFEST.MF for an executable jar file: Main-Class: org.springframework.boot.loader.JarLauncher Start-Class: com.mycompany.project.MyApplication For a war file, it would be as follows: Main-Class: org.springframework.boot.loader.WarLauncher Start-Class: com.mycompany.project.MyApplication \u53ef\u4ee5\u770b\u5230\uff0cJAR\u548cWAR\u5bf9\u5e94\u4e86\u4e0d\u540c\u7684 Launcher \u5b9e\u73b0. \u56e0\u4e3a org.springframework.boot.loader.JarLauncher \u5e76\u975e\u9879\u76ee\u4e2d\u7684\u6587\u4ef6\uff0c\u90a3\u4e48\u5b83\u662f\u7531 spring-boot-maven-plugin \u63d2\u4ef6\u5728\u6253\u5305\u65f6\u5f15\u5165\u7684\uff0c\u4e3a\u4e86\u7814\u7a76\uff0c\u5148\u53bb\u67e5\u627e\u5b83\u7684\u6240\u5c5e\uff0c\u5728 https://search.maven.org/ \u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u6309\u7c7b\u5168\u540d\u641c\u7d22\uff0c\u627e\u5230GAV\u4fe1\u606f <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-loader </artifactId> <version> 2.3.2.RELEASE </version> </dependency> \u65e2\u7136 org.springframework.boot.loader.JarLauncher \u662f MANIFEAST.MF \u5b9a\u4e49\u7684\u4e3b\u5f15\u5bfc\u7c7b\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd0\u884c\u8be5\u6587\u4ef6\u4e5f\u80fd\u542f\u52a8\u9879\u76ee\uff1a $ java org.springframework.boot.loader.JarLauncher . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-02 19:53:47.440 INFO 4807 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : Starting FirstApplicationByGuiApplication v0.0.1-SNAPSHOT on nanleis-MacBook-Pro.local with PID 4807 (/Users/nanlei/Dev/Workspace/first-application-by-gui/target/temp/BOOT-INF/classes started by nanlei in /Users/nanlei/Dev/Workspace/first-application-by-gui/target/temp) 2020-08-02 19:53:47.442 INFO 4807 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : No active profile set, falling back to default profiles: default 2020-08-02 19:53:48.060 INFO 4807 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-02 19:53:48.069 INFO 4807 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-02 19:53:48.069 INFO 4807 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.37] 2020-08-02 19:53:48.122 INFO 4807 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-02 19:53:48.123 INFO 4807 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 645 ms 2020-08-02 19:53:48.286 INFO 4807 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-02 19:53:48.439 INFO 4807 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-02 19:53:48.448 INFO 4807 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : Started FirstApplicationByGuiApplication in 1.288 seconds (JVM running for 1.585) \u4ece\u8f93\u51fa\u4e2d\u4e5f\u80fd\u770b\u5230 deep.in.spring.boot.FirstApplicationByGuiApplication \u88ab JarLauncher \u88c5\u8f7d\u5e76\u6267\u884c\uff0c\u4e5f\u5c31\u662f META-INF/MANIFEST.MF \u4e2d\u7684 Start-Class \u88ab JarLauncher \u6267\u884c\u3002\u82e5\u76f4\u63a5\u4f7f\u7528java\u547d\u4ee4\u6267\u884c deep.in.spring.boot.FirstApplicationByGuiApplication \uff1a $ cd BOOT-INF/classes $ java deep.in.spring.boot.FirstApplicationByGuiApplication Exception in thread \"main\" java.lang.NoClassDefFoundError: org/springframework/boot/SpringApplication at deep.in.spring.boot.FirstApplicationByGuiApplication.main(FirstApplicationByGuiApplication.java:10) Caused by: java.lang.ClassNotFoundException: org.springframework.boot.SpringApplication at java.net.URLClassLoader.findClass(URLClassLoader.java:382) at java.lang.ClassLoader.loadClass(ClassLoader.java:418) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355) at java.lang.ClassLoader.loadClass(ClassLoader.java:351) ... 1 more \u63d0\u793a\u627e\u4e0d\u5230\u7c7b org.springframework.boot.SpringApplication \uff0c\u8fd9\u662f\u7531\u4e8ejava\u547d\u4ee4\u6ca1\u6709\u6307\u5b9a classpath \uff0c\u52a0\u4e0a classpath \u53c2\u6570\u4e4b\u540e\uff0c\u4e5f\u80fd\u542f\u52a8\u7a0b\u5e8f\uff1a $ java -classpath \".:../lib/*\" deep.in.spring.boot.FirstApplicationByGuiApplication 6. JarLauncher\u7684\u5b9e\u73b0\u539f\u7406 \u00b6 \u5728 pom.xml \u4e2d\u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\uff0c\u7528\u4e8e\u6e90\u7801\u5206\u6790\uff1a <!-- spring-boot-loader \u5206\u6790 --> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-loader </artifactId> <scope> provided </scope> </dependency> \u4ee5\u4e0b\u5206\u6790\u5747\u57fa\u4e8eorg.springframework.boot:spring-boot-loader:2.3.1.RELEASE \u56e0\u4e3a\u8fd0\u884c\u65f6 spring-boot-loader \u5728JAR\u6587\u4ef6\u4e2d\u5b58\u5728\uff0c\u6240\u4ee5\u8fd9\u91cc scope \u5b9a\u4e3a provided \u3002 \u5728IDEA\u4e2d\u5bf9 spring-boot-loader \u5f00\u542f\u65ad\u70b9\u8c03\u8bd5\uff1a + \u5c06\u9879\u76ee\u6253\u5305 + \u5728IDEA\u7684 Run/Debug Configuration \u4e2d\u65b0\u5efa JAR Application + \u586b\u5199\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe \u5728IDEA\u4e2d\u6309 command+O \u67e5\u627e org.springframework.boot.loader.JarLauncher \uff0c\u5373\u53ef\u4ece main() \u65b9\u6cd5\u5f00\u59cb\u8ddf\u8e2a\u8c03\u8bd5\u3002 JarLauncher \u7ee7\u627f\u81ea org.springframework.boot.loader.Launcher \uff0c\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a JarLauncher \u7684 main() \u65b9\u6cd5\u4e3a\uff1a public static void main ( String [] args ) throws Exception { new JarLauncher (). launch ( args ); } Launcher#launch(args) \u5b9e\u73b0\u4e3a\uff1a protected void launch ( String [] args ) throws Exception { if ( ! isExploded ()) { JarFile . registerUrlProtocolHandler (); } ClassLoader classLoader = createClassLoader ( getClassPathArchivesIterator ()); String jarMode = System . getProperty ( \"jarmode\" ); String launchClass = ( jarMode != null && ! jarMode . isEmpty ()) ? JAR_MODE_LAUNCHER : getMainClass (); launch ( args , launchClass , classLoader ); } \u5176\u4e2d JarFile.registerUrlProtocolHandler() \u65b9\u6cd5\u4e3a\uff1a private static final String PROTOCOL_HANDLER = \"java.protocol.handler.pkgs\" ; private static final String HANDLERS_PACKAGE = \"org.springframework.boot.loader\" ; /** * Register a {@literal 'java.protocol.handler.pkgs'} property so that a * {@link URLStreamHandler} will be located to deal with jar URLs. */ public static void registerUrlProtocolHandler () { String handlers = System . getProperty ( PROTOCOL_HANDLER , \"\" ); System . setProperty ( PROTOCOL_HANDLER , ( \"\" . equals ( handlers ) ? HANDLERS_PACKAGE : handlers + \"|\" + HANDLERS_PACKAGE )); resetCachedUrlHandlers (); } /** * Reset any cached handlers just in case a jar protocol has already been used. We * reset the handler by trying to set a null {@link URLStreamHandlerFactory} which * should have no effect other than clearing the handlers cache. */ private static void resetCachedUrlHandlers () { try { URL . setURLStreamHandlerFactory ( null ); } catch ( Error ex ) { // Ignore } } \u8be5\u65b9\u6cd5\u5c06 org.springframework.boot.loader \u8ffd\u52a0\u5230Java\u7cfb\u7edf\u5c5e\u6027 java.protocol.handler.pkgs \u4e2d\uff0c\u4e5f\u5c31\u662f org.springframework.boot.loader \u5305\u4e0b\u5b58\u5728\u4e00\u4e2a Handler \u7c7b\uff0c\u5373 org.springframework.boot.loader.jar.Handler \uff0c\u5b83\u6269\u5c55\u4e86 URLStreamHandler \uff0c\u8fd9\u662f java.net.URLStreamHandler \u7684\u6269\u5c55\u673a\u5236\u5b9e\u73b0\u7684\uff0c\u7531 URL#getURLStreamHandler(String protocol) \u65b9\u6cd5\u63d0\u4f9b\uff1a private static final String protocolPathProp = \"java.protocol.handler.pkgs\" ; /** * A table of protocol handlers. */ static Hashtable < String , URLStreamHandler > handlers = new Hashtable <> (); private static Object streamHandlerLock = new Object (); /** * Returns the Stream Handler. * @param protocol the protocol to use */ static URLStreamHandler getURLStreamHandler ( String protocol ) { URLStreamHandler handler = handlers . get ( protocol ); if ( handler == null ) { boolean checkedWithFactory = false ; // Use the factory (if any) if ( factory != null ) { handler = factory . createURLStreamHandler ( protocol ); checkedWithFactory = true ; } // Try java protocol handler if ( handler == null ) { String packagePrefixList = null ; packagePrefixList = java . security . AccessController . doPrivileged ( new sun . security . action . GetPropertyAction ( protocolPathProp , \"\" )); if ( packagePrefixList != \"\" ) { packagePrefixList += \"|\" ; } // REMIND: decide whether to allow the \"null\" class prefix // or not. packagePrefixList += \"sun.net.www.protocol\" ; StringTokenizer packagePrefixIter = new StringTokenizer ( packagePrefixList , \"|\" ); while ( handler == null && packagePrefixIter . hasMoreTokens ()) { String packagePrefix = packagePrefixIter . nextToken (). trim (); try { String clsName = packagePrefix + \".\" + protocol + \".Handler\" ; Class <?> cls = null ; try { cls = Class . forName ( clsName ); } catch ( ClassNotFoundException e ) { ClassLoader cl = ClassLoader . getSystemClassLoader (); if ( cl != null ) { cls = cl . loadClass ( clsName ); } } if ( cls != null ) { handler = ( URLStreamHandler ) cls . newInstance (); } } catch ( Exception e ) { // any number of exceptions can get thrown here } } } synchronized ( streamHandlerLock ) { URLStreamHandler handler2 = null ; // Check again with hashtable just in case another // thread created a handler since we last checked handler2 = handlers . get ( protocol ); if ( handler2 != null ) { return handler2 ; } // Check with factory if another thread set a // factory since our last check if ( ! checkedWithFactory && factory != null ) { handler2 = factory . createURLStreamHandler ( protocol ); } if ( handler2 != null ) { // The handler from the factory must be given more // importance. Discard the default handler that // this thread created. handler = handler2 ; } // Insert this handler into the hashtable if ( handler != null ) { handlers . put ( protocol , handler ); } } } return handler ; } \u5176\u4e2dJDK\u5185\u5efa\u534f\u8bae\u653e\u5728 sun.net.www.protocol \u5305\u4e0b\uff0c\u7c7b\u5168\u540d\u6a21\u5f0f\u4e3a sun.net.www.protocol.${protocol}.Handler \uff0c ${protocol} \u4e3a\u534f\u8bae\u540d\uff0c\u5e38\u89c1\u534f\u8bae\u6709\uff1a FILE : sun.net.www.protocol.file.Handler JAR : sun.net.www.prorocol.jar.Handler HTTP : sun.net.www.prorocol.http.Handler HTTPS : sun.net.www.prorocol.https.Handler FTP : sun.net.www.prorocol.ftp.Handler \u56de\u5230 org.springframework.boot.loader.jar.Handler \u4e2d\uff0c\u6309\u7167\u7c7b\u540d\u6a21\u5f0f\uff0c\u5b9e\u73b0\u534f\u8bae\u4e3aJAR\uff0c\u8986\u76d6\u4e86JDK\u7684\u5185\u5efa\u5b9e\u73b0\uff0c\u56e0\u4e3aSpring Boot\u7684FAT JAR\u5305\u542b\u4e86\u4f20\u7edf\u7684java JAR\u8d44\u6e90\uff0c\u8fd8\u5305\u542b\u4e86\u4f9d\u8d56\u7684JAR\u6587\u4ef6\uff0c\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u5e94\u7528\u5f52\u6863\u6587\u4ef6\uff0c\u5f53\u4f7f\u7528 java -jar \u547d\u4ee4\u6765\u5f15\u5bfc\u65f6\uff0c\u5185\u90e8\u7684JAR\u6587\u4ef6\u65e0\u6cd5\u88ab\u5185\u5efa\u7684 sun.net.www.prorocol.jar.Handler \u5f53\u4f5c classpath \uff0c\u6240\u4ee5\u9700\u8981\u66ff\u6362\u5b9e\u73b0\u3002 \u5177\u4f53\u53ef\u4ee5\u53c2\u8003 org.springframework.boot.loader.jar.JarURLConnection#get(URL url, JarFile jarFile) \u65b9\u6cd5\u548c org.springframework.boot.loader.jar.JarFile \u7c7b\u3002 Launcher#launch(args) \u65b9\u6cd5\u7684\u7b2c\u4e8c\u6b65\u4e3a createClassLoader(getClassPathArchivesIterator()) \uff0c\u5176\u4e2d getClassPathArchivesIterator() \u65b9\u6cd5\u7531 ExecutableArchiveLauncher \u63d0\u4f9b\uff1a @Override protected Iterator < Archive > getClassPathArchivesIterator () throws Exception { Archive . EntryFilter searchFilter = this :: isSearchCandidate ; Iterator < Archive > archives = this . archive . getNestedArchives ( searchFilter , ( entry ) -> isNestedArchive ( entry ) && ! isEntryIndexed ( entry )); if ( isPostProcessingClassPathArchives ()) { archives = applyClassPathArchivePostProcessing ( archives ); } return archives ; } \u800c isNestedArchive(Archive.Entry entry) \u65b9\u6cd5\u5219\u7531\u5b50\u7c7b JarLauncher \u6216 WarLauncher \u63d0\u4f9b\uff0c\u5728 JarLauncher \u4e2d\uff1a static final EntryFilter NESTED_ARCHIVE_ENTRY_FILTER = ( entry ) -> { if ( entry . isDirectory ()) { return entry . getName (). equals ( \"BOOT-INF/classes/\" ); } return entry . getName (). startsWith ( \"BOOT-INF/lib/\" ); }; @Override protected boolean isNestedArchive ( Archive . Entry entry ) { return NESTED_ARCHIVE_ENTRY_FILTER . matches ( entry ); } \u4e5f\u5c31\u662f\u8fc7\u6ee4 Archive.Entry \u6240\u5339\u914d\u7684\u540d\u79f0\u662f BOOT-INF/classes/ \u8fd8\u662f BOOT-INF/lib/ \u524d\u7f00\uff0c\u800c getClassPathArchivesIterator() \u65b9\u6cd5\u8fd4\u56de\u7ed3\u679c\u8fd8\u662f\u53d6\u51b3\u4e8e archive \u5c5e\u6027\u7684\u5185\u5bb9\uff1a public ExecutableArchiveLauncher () { try { this . archive = createArchive (); this . classPathIndex = getClassPathIndex ( this . archive ); } catch ( Exception ex ) { throw new IllegalStateException ( ex ); } } \u6b64\u5904 archive \u6e90\u4e8e\u7236\u7c7b Launcher \u7684 createArchive() \u65b9\u6cd5\uff1a protected final Archive createArchive () throws Exception { ProtectionDomain protectionDomain = getClass (). getProtectionDomain (); CodeSource codeSource = protectionDomain . getCodeSource (); URI location = ( codeSource != null ) ? codeSource . getLocation (). toURI () : null ; String path = ( location != null ) ? location . getSchemeSpecificPart () : null ; if ( path == null ) { throw new IllegalStateException ( \"Unable to determine code source archive\" ); } File root = new File ( path ); if ( ! root . exists ()) { throw new IllegalStateException ( \"Unable to determine code source archive from \" + root ); } return ( root . isDirectory () ? new ExplodedArchive ( root ) : new JarFileArchive ( root )); } \u8fd9\u91cc\u4e3b\u8981\u901a\u8fc7 Launcher \u6240\u5728\u7684\u5a92\u4ecb\uff0c\u5224\u65ad\u662f JarFileArchive \u8fd8\u662f ExplodedArchive (\u89e3\u538b\u76ee\u5f55)\uff0c\u56e0\u4e3a\u8be5\u65b9\u6cd5\u662f final \u7c7b\u578b\uff0c\u6240\u4ee5\u5b50\u7c7b JarLauncher \u6216 WarLauncher \u5747\u7ee7\u627f\u8be5\u5b9e\u73b0\u3002 \u518d\u5f80\u540e\u5c31\u662f\u6839\u636e\u83b7\u53d6\u5230\u7684archives\u53bb\u521b\u5efa ClassLoader \uff0c\u5728 ExecutableArchiveLauncher \u4e2d\uff1a @Override protected ClassLoader createClassLoader ( Iterator < Archive > archives ) throws Exception { List < URL > urls = new ArrayList <> ( guessClassPathSize ()); while ( archives . hasNext ()) { urls . add ( archives . next (). getUrl ()); } if ( this . classPathIndex != null ) { urls . addAll ( this . classPathIndex . getUrls ()); } return createClassLoader ( urls . toArray ( new URL [ 0 ] )); } \u6700\u540e\u8c03\u7528 Launcher \u4e2d\u7684 createClassLoader(URL[] urls) \u65b9\u6cd5\u521b\u5efa ClassLoader \uff1a protected ClassLoader createClassLoader ( URL [] urls ) throws Exception { return new LaunchedURLClassLoader ( isExploded (), getArchive (), urls , getClass (). getClassLoader ()); } \u4e4b\u540e\u786e\u5b9a launchClass \u7684\u5185\u5bb9\uff0c\u5c31\u662f\u4ece MANIFEST.MF \u4e2d\u83b7\u53d6 Start-Class \u7684\u5185\u5bb9\uff0c\u5728 ExecutableArchiveLauncher \u4e2d\uff1a private static final String START_CLASS_ATTRIBUTE = \"Start-Class\" ; @Override protected String getMainClass () throws Exception { Manifest manifest = this . archive . getManifest (); String mainClass = null ; if ( manifest != null ) { mainClass = manifest . getMainAttributes (). getValue ( START_CLASS_ATTRIBUTE ); } if ( mainClass == null ) { throw new IllegalStateException ( \"No 'Start-Class' manifest entry specified in \" + this ); } return mainClass ; } \u7d27\u63a5\u7740\u8c03\u7528\u5b9e\u9645\u7684\u5f15\u5bfc\u7c7b launch(String[] args, String launchClass, ClassLoader classLoader) protected void launch ( String [] args , String launchClass , ClassLoader classLoader ) throws Exception { Thread . currentThread (). setContextClassLoader ( classLoader ); createMainMethodRunner ( launchClass , args , classLoader ). run (); } protected MainMethodRunner createMainMethodRunner ( String mainClass , String [] args , ClassLoader classLoader ) { return new MainMethodRunner ( mainClass , args ); } \u5b9e\u9645\u6267\u884c\u7684\u65b9\u6cd5\u4e3a MainMethodRunner#run() \uff1a public class MainMethodRunner { private final String mainClassName ; private final String [] args ; public MainMethodRunner ( String mainClass , String [] args ) { this . mainClassName = mainClass ; this . args = ( args != null ) ? args . clone () : null ; } public void run () throws Exception { Class <?> mainClass = Class . forName ( this . mainClassName , false , Thread . currentThread (). getContextClassLoader ()); Method mainMethod = mainClass . getDeclaredMethod ( \"main\" , String [] . class ); mainMethod . setAccessible ( true ); mainMethod . invoke ( null , new Object [] { this . args }); } } \u6700\u540e\u5c06 mainClass \u4e2d\u7684 main(String[]) \u65b9\u6cd5\u6309\u9759\u6001\u65b9\u6cd5\u8c03\u7528\uff0c\u6700\u7ec8 JarLauncher \u662f\u5728\u540c\u8fdb\u7a0b\u5185\u8c03\u7528 Start-Class \u7684 main(String[]) \u65b9\u6cd5\uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u524d\u51c6\u5907\u597dClass Path\u3002 7. WarLauncher\u7684\u5dee\u5f02 \u00b6 \u548c JarLauncher \u5dee\u5f02\u4e0d\u5927\uff0c\u4e8c\u8005\u90fd\u662f\u7ee7\u627f\u81ea ExecutableArchiveLauncher \uff1a public class WarLauncher extends ExecutableArchiveLauncher { public WarLauncher () { } protected WarLauncher ( Archive archive ) { super ( archive ); } @Override protected boolean isPostProcessingClassPathArchives () { return false ; } @Override protected boolean isSearchCandidate ( Entry entry ) { return entry . getName (). startsWith ( \"WEB-INF/\" ); } @Override public boolean isNestedArchive ( Archive . Entry entry ) { if ( entry . isDirectory ()) { return entry . getName (). equals ( \"WEB-INF/classes/\" ); } return entry . getName (). startsWith ( \"WEB-INF/lib/\" ) || entry . getName (). startsWith ( \"WEB-INF/lib-provided/\" ); } public static void main ( String [] args ) throws Exception { new WarLauncher (). launch ( args ); } } \u4e3b\u8981\u533a\u522b\u5728\u4e8e\u548cJAR\u7684Class Path\u4e0d\u540c\uff0c WEB-INF/classes/ \u548c WEB-INF/lib/ \u662f\u4f20\u7edfServlet\u5e94\u7528\u7684Class Path\u8def\u5f84\uff0c WEB-INF/lib-provided/ \u662fSpring Boot\u7684 WarLauncher \u5b9a\u5236\u5b9e\u73b0\u3002 \u5c06 pom.xml \u7684 <packaging> \u5143\u7d20\u6539\u4e3a war \uff1a <packaging> war </packaging> \u518d\u6b21\u4f7f\u7528Maven\u8fdb\u884c\u6253\u5305\uff1a $ mvn clean package [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ first-spring-boot-application --- [INFO] Deleting /Users/nanlei/Dev/Workspace/first-spring-boot-application/target [INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ first-spring-boot-application --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ first-spring-boot-application --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/classes [INFO] [INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ first-spring-boot-application --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ first-spring-boot-application --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/test-classes [INFO] [INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ first-spring-boot-application --- [INFO] [INFO] ------------------------------------------------------- [INFO] T E S T S [INFO] ------------------------------------------------------- [INFO] Running deep.in.spring.boot.AppTest [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in deep.in.spring.boot.AppTest [INFO] [INFO] Results: [INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] [INFO] --- maven-war-plugin:3.2.3:war (default-war) @ first-spring-boot-application --- [INFO] Packaging webapp [INFO] Assembling webapp [first-spring-boot-application] in [/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT] [INFO] Processing war project [INFO] Webapp assembled in [102 msecs] [INFO] Building war: /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT.war [INFO] [INFO] --- spring-boot-maven-plugin:2.3.1.RELEASE:repackage (repackage) @ first-spring-boot-application --- [INFO] Replacing main artifact with repackaged archive [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.457 s [INFO] Finished at: 2020-08-04T00:23:52+08:00 [INFO] ------------------------------------------------------------------------ \u5207\u6362\u5230 target \u76ee\u5f55\uff0c\u5c06 first-spring-boot-application-1.0.0-SNAPSHOT.war \u89e3\u538b\u7f29\u5230temp\u76ee\u5f55\u4e0b\uff1a $ cd target $ unzip first-spring-boot-application-1.0.0-SNAPSHOT.war -d temp Archive: first-spring-boot-application-1.0.0-SNAPSHOT.war creating: temp/META-INF/ inflating: temp/META-INF/MANIFEST.MF creating: temp/org/ creating: temp/org/springframework/ creating: temp/org/springframework/boot/ creating: temp/org/springframework/boot/loader/ inflating: temp/org/springframework/boot/loader/ClassPathIndexFile.class (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) inflating: temp/org/springframework/boot/loader/util/SystemPropertyUtils.class creating: temp/WEB-INF/ creating: temp/WEB-INF/classes/ creating: temp/WEB-INF/classes/deep/ creating: temp/WEB-INF/classes/deep/in/ creating: temp/WEB-INF/classes/deep/in/spring/ creating: temp/WEB-INF/classes/deep/in/spring/boot/ creating: temp/WEB-INF/lib/ inflating: temp/WEB-INF/classes/deep/in/spring/boot/App.class extracting: temp/WEB-INF/lib/jackson-datatype-jsr310-2.11.0.jar (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) extracting: temp/WEB-INF/lib/snakeyaml-1.26.jar creating: temp/META-INF/maven/ creating: temp/META-INF/maven/deep-in-spring-boot/ creating: temp/META-INF/maven/deep-in-spring-boot/first-spring-boot-application/ inflating: temp/META-INF/maven/deep-in-spring-boot/first-spring-boot-application/pom.xml inflating: temp/META-INF/maven/deep-in-spring-boot/first-spring-boot-application/pom.properties extracting: temp/WEB-INF/lib/log4j-to-slf4j-2.13.3.jar extracting: temp/WEB-INF/lib/spring-context-5.2.7.RELEASE.jar extracting: temp/WEB-INF/lib/spring-core-5.2.7.RELEASE.jar extracting: temp/WEB-INF/lib/jul-to-slf4j-1.7.30.jar extracting: temp/WEB-INF/lib/spring-boot-starter-2.3.1.RELEASE.jar extracting: temp/WEB-INF/lib/spring-webmvc-5.2.7.RELEASE.jar creating: temp/WEB-INF/lib-provided/ extracting: temp/WEB-INF/lib-provided/spring-boot-loader-2.3.1.RELEASE.jar \u4f7f\u7528tree\u89c2\u5bdf\u76ee\u5f55\u7ed3\u6784\uff1a $ cd temp $ tree . \u251c\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 deep-in-spring-boot \u2502 \u2514\u2500\u2500 first-spring-boot-application \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2514\u2500\u2500 App.class \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u251c\u2500\u2500 jackson-annotations-2.11.0.jar \u2502 \u2502 \u251c\u2500\u2500 (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) \u2502 \u2502 \u2514\u2500\u2500 tomcat-embed-websocket-9.0.36.jar \u2502 \u2514\u2500\u2500 lib-provided \u2502 \u2514\u2500\u2500 spring-boot-loader-2.3.1.RELEASE.jar \u2514\u2500\u2500 org \u2514\u2500\u2500 springframework \u2514\u2500\u2500 boot \u2514\u2500\u2500 loader \u251c\u2500\u2500 ClassPathIndexFile.class \u251c\u2500\u2500 ExecutableArchiveLauncher.class \u251c\u2500\u2500 JarLauncher.class \u251c\u2500\u2500 (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) \u251c\u2500\u2500 WarLauncher.class \u251c\u2500\u2500 (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) 21 directories, 99 files \u76f8\u6bd4JAR\u7684\u89e3\u538b\u76ee\u5f55\uff0cWAR\u589e\u52a0\u4e86 /WEB-INF/lib-provided/ \uff0c\u5e76\u4e14\u8be5\u76ee\u5f55\u4e0b\u4ec5\u6709\u4e00\u4e2aJAR\u6587\u4ef6\uff0c\u5c31\u662f spring-boot-loader-2.3.1.RELEASE.jar \uff0c\u4e5f\u5c31\u662f\u8be5\u76ee\u5f55\u4e0b\u5b58\u653e\u4e86 scope \u4e3a provided \u7684JAR\u6587\u4ef6\u3002 \u56e0\u4e3a\u4f20\u7edf Servlet \u9879\u76ee\u5e76\u4e0d\u9700\u8981\u8fd9\u4e2a\u76ee\u5f55\uff0c\u90a3\u4e48 /WEB-INF/lib-provided/ \u4e2d\u7684JAR\u5c06\u88ab Servlet \u5bb9\u5668\u5ffd\u7565\uff0c\u53c8\u6bd4\u5982Servlet API\uff0c\u8be5API\u7531\u5bb9\u5668\u63d0\u4f9b\uff0c\u4f46\u7f16\u7801\u65f6\u9700\u8981\u3002\u8fd9\u6837\u8bbe\u8ba1\u7684\u597d\u5904\u5728\u4e8eWAR\u6587\u4ef6\u80fd\u591f\u5728 Servlet \u5bb9\u5668\u4e2d\u517c\u5bb9\u8fd0\u884c\u3002 \u67e5\u770b META-INF/MANIFEST.MF \u7684\u5185\u5bb9\uff1a $ cat META-INF/MANIFEST.MF Manifest-Version: 1.0 Implementation-Title: first-spring-boot-application Implementation-Version: 1.0.0-SNAPSHOT Start-Class: deep.in.spring.boot.App Spring-Boot-Classes: WEB-INF/classes/ Spring-Boot-Lib: WEB-INF/lib/ Build-Jdk-Spec: 1.8 Spring-Boot-Version: 2.3.1.RELEASE Created-By: Maven Archiver 3.4.0 Implementation-Vendor: Pivotal Software, Inc. Main-Class: org.springframework.boot.loader.WarLauncher \u66f4\u6539\u4e3a war \u65b9\u5f0f\u6253\u5305\u540e\uff0c Main-Class \u5c31\u662f org.springframework.boot.loader.WarLauncher \u4e86\uff0c\u800c Start-Class \u4ecd\u7136\u4e0d\u53d8\u3002\u65e2\u7136\u662f WarLauncher \u4e3a\u4e3b\u5f15\u5bfc\u7c7b\uff0c\u90a3\u4e48\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528 java -jar \u547d\u4ee4\u6765\u542f\u52a8\uff1a $ java -jar first-spring-boot-application-1.0.0-SNAPSHOT.war . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.1.RELEASE) 2020-08-04 00:34:25.529 INFO 35990 --- [ main] deep.in.spring.boot.App : Starting App v1.0.0-SNAPSHOT on nanleis-MacBook-Pro.local with PID 35990 (/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT.war started by nanlei in /Users/nanlei/Dev/Workspace/first-spring-boot-application/target) 2020-08-04 00:34:25.532 INFO 35990 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-04 00:34:26.576 INFO 35990 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-04 00:34:26.589 INFO 35990 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-04 00:34:26.589 INFO 35990 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.36] 2020-08-04 00:34:27.039 INFO 35990 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-04 00:34:27.040 INFO 35990 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1449 ms 2020-08-04 00:34:27.220 INFO 35990 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-04 00:34:27.473 INFO 35990 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-04 00:34:27.487 INFO 35990 --- [ main] deep.in.spring.boot.App : Started App in 2.373 seconds (JVM running for 2.815) \u7531\u6b64\u53ef\u89c1\uff0c\u6253\u5305WAR\u6587\u4ef6\u662f\u4e00\u79cd\u517c\u5bb9\u63aa\u65bd\uff0c\u65e2\u80fd\u88ab WarLauncher \u542f\u52a8\uff0c\u4e5f\u80fd\u517c\u5bb9 Servlet \u5bb9\u5668\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c JarLauncher \u548c WarLauncher \u5e76\u65e0\u672c\u8d28\u5dee\u522b\u3002","title":"Standalone Application"},{"location":"SpringBoot/01-spring-boot-application/#1-maven","text":"$ mvn archetype:generate -DgroupId=deep-in-spring-boot -DartifactId=first-spring-boot-application -Dversion=1.0.0-SNAPSHOT -DinteractiveMode=false -Dpackage=deep.in.spring.boot \u7c7b\u4f3c\u7ed3\u679c\uff1a [INFO] Scanning for projects... ([INFO] [INFO] ------------------< org.apache.maven:standalone-pom >------------------- [INFO] Building Maven Stub Project (No POM) 1 [INFO] --------------------------------[ pom ]--------------------------------- [INFO] [INFO] >>> maven-archetype-plugin:3.2.0:generate (default-cli) > generate-sources @ standalone-pom >>> [INFO] [INFO] <<< maven-archetype-plugin:3.2.0:generate (default-cli) < generate-sources @ standalone-pom <<< [INFO] [INFO] ) [INFO] --- maven-archetype-plugin:3.2.0:generate (default-cli) @ standalone-pom --- [INFO] Generating project in Batch mode [WARNING] No archetype found in remote catalog. Defaulting to internal catalog [INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0) [INFO] ---------------------------------------------------------------------------- [INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-quickstart:1.0 [INFO] ---------------------------------------------------------------------------- [INFO] Parameter: basedir, Value: /Users/nanlei/Dev/Workspace [INFO] Parameter: package, Value: deep.in.spring.boot [INFO] Parameter: groupId, Value: deep-in-spring-boot [INFO] Parameter: artifactId, Value: first-spring-boot-application [INFO] Parameter: packageName, Value: deep.in.spring.boot [INFO] Parameter: version, Value: 1.0.0-SNAPSHOT [INFO] project created from Old (1.x) Archetype in dir: /Users/nanlei/Dev/Workspace/first-spring-boot-application [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.475 s [INFO] Finished at: 2020-08-01T23:51:37+08:00 archetype \u662fMaven\u63d2\u4ef6 maven-archetype-plugin \u7684\u7b80\u79f0 \u63d2\u4ef6\u76ee\u6807\uff1a archetype:generate \u63d2\u4ef6\u53c2\u6570\uff1aGAV\u4fe1\u606f groupId \uff0c artifactId \uff0c version \u548c\u5305\u540d package \u4ea4\u4e92\u5f0f\u53c2\u6570\uff1a interactiveMode \u4e3a false \uff0c\u4f7f\u7528\u9759\u9ed8\u65b9\u5f0f \u67e5\u770b\u9879\u76ee\u7ed3\u6784\uff1a $ cd first-spring-boot-application/ $ ls -ls total 8 8 -rw-r--r-- 1 nanlei staff 692 Aug 1 23:51 pom.xml 0 drwxr-xr-x 4 nanlei staff 128 Aug 1 23:51 src \u5b89\u88c5tree\u7ec4\u4ef6\u5e76\u518d\u6b21\u67e5\u770b\uff1a $ brew install tree ==> Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/bottles/tree-1.8.0.catalina.bottle.tar. ######################################################################## 100.0% ==> Pouring tree-1.8.0.catalina.bottle.tar.gz \ud83c\udf7a /usr/local/Cellar/tree/1.8.0: 8 files, 121.1KB $ tree . \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 deep \u2502 \u2514\u2500\u2500 in \u2502 \u2514\u2500\u2500 spring \u2502 \u2514\u2500\u2500 boot \u2502 \u2514\u2500\u2500 App.java \u2514\u2500\u2500 test \u2514\u2500\u2500 java \u2514\u2500\u2500 deep \u2514\u2500\u2500 in \u2514\u2500\u2500 spring \u2514\u2500\u2500 boot \u2514\u2500\u2500 AppTest.java 13 directories, 3 files App.java \u662f\u5f15\u5bfc\u7c7b\uff0c AppTest.java \u662f\u5355\u5143\u6d4b\u8bd5\u7c7b \u5728 pom.xml \u4e2d\uff0c archetype \u63d2\u4ef6\u6dfb\u52a0\u4e86 junit \u7684\u4f9d\u8d56 \u5728 pom.xml \u4e2d\u6dfb\u52a0Spring Boot\u7684web\u4f9d\u8d56\uff1a <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> 2.3.1.RELEASE </version> </dependency> \u67e5\u770b\u9879\u76ee dependency \u6811\u7684\u53d8\u5316\uff1a $ mvn dependency:tree -Dincludes=org.springframework* [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ first-spring-boot-application --- [INFO] deep-in-spring-boot:first-spring-boot-application:jar:1.0.0-SNAPSHOT [INFO] \\- org.springframework.boot:spring-boot-starter-web:jar:2.3.1.RELEASE:compile [INFO] +- org.springframework.boot:spring-boot-starter:jar:2.3.1.RELEASE:compile [INFO] | +- org.springframework.boot:spring-boot:jar:2.3.1.RELEASE:compile [INFO] | +- org.springframework.boot:spring-boot-autoconfigure:jar:2.3.1.RELEASE:compile [INFO] | +- org.springframework.boot:spring-boot-starter-logging:jar:2.3.1.RELEASE:compile [INFO] | \\- org.springframework:spring-core:jar:5.2.7.RELEASE:compile [INFO] | \\- org.springframework:spring-jcl:jar:5.2.7.RELEASE:compile [INFO] +- org.springframework.boot:spring-boot-starter-json:jar:2.3.1.RELEASE:compile [INFO] +- org.springframework.boot:spring-boot-starter-tomcat:jar:2.3.1.RELEASE:compile [INFO] +- org.springframework:spring-web:jar:5.2.7.RELEASE:compile [INFO] | \\- org.springframework:spring-beans:jar:5.2.7.RELEASE:compile [INFO] \\- org.springframework:spring-webmvc:jar:5.2.7.RELEASE:compile [INFO] +- org.springframework:spring-aop:jar:5.2.7.RELEASE:compile [INFO] +- org.springframework:spring-context:jar:5.2.7.RELEASE:compile [INFO] \\- org.springframework:spring-expression:jar:5.2.7.RELEASE:compile [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 0.802 s [INFO] Finished at: 2020-08-02T00:45:55+08:00 [INFO] ------------------------------------------------------------------------ \u7f16\u5199 App.java \u4ee3\u7801\uff1a @RestController @SpringBootApplication public class App { @RequestMapping ( \"/\" ) public String index () { return \"Welcome to Spring Boot!\" ; } public static void main ( String [] args ) { SpringApplication . run ( App . class , args ); } } \u4f7f\u7528Maven\u63d2\u4ef6\u65b9\u5f0f mvn spring-boot:run \u8fd0\u884c\u9879\u76ee\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... Downloading from aliyun-maven: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-metadata.xml Downloading from aliyun-maven: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/maven-metadata.xml Downloaded from aliyun-maven: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-metadata.xml (9.9 kB at 4.4 kB/s) Downloaded from aliyun-maven: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/maven-metadata.xml (21 kB at 8.7 kB/s) [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.835 s [INFO] Finished at: 2020-08-02T01:00:07+08:00 [INFO] ------------------------------------------------------------------------ [ERROR] No plugin found for prefix 'spring-boot' in the current project and in the plugin groups [org.apache.maven.plugins, org.codehaus.mojo] available from the repositories [local (/Users/nanlei/.m2/repository), aliyun-maven (http://maven.aliyun.com/nexus/content/groups/public/)] -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoPluginFoundForPrefixException \u67e5\u770b\u5b98\u65b9\u6587\u6863 https://docs.spring.io/spring-boot/docs/current/reference \u6709\u5982\u4e0b\u5185\u5bb9\uff1a 2.4.4. Running the Example At this point, your application should work. Since you used the spring-boot-starter-parent POM, you have a useful run goal that you can use to start the application. Type mvn spring-boot:run from the root project directory to start the application. \u5728 pom.xml \u4e2d\u6dfb\u52a0 spring-boot-starter-parent \uff1a <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.3.1.RELEASE </version> </parent> \u518d\u6b21\u8fd0\u884c\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] >>> spring-boot-maven-plugin:2.3.1.RELEASE:run (default-cli) > test-compile @ first-spring-boot-application >>> [INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ first-spring-boot-application --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ first-spring-boot-application --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ first-spring-boot-application --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ first-spring-boot-application --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] <<< spring-boot-maven-plugin:2.3.1.RELEASE:run (default-cli) < test-compile @ first-spring-boot-application <<< [INFO] [INFO] [INFO] --- spring-boot-maven-plugin:2.3.1.RELEASE:run (default-cli) @ first-spring-boot-application --- [INFO] Attaching agents: [] . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.1.RELEASE) 2020-08-02 01:13:46.642 INFO 6736 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 6736 (/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Workspace/first-spring-boot-application) 2020-08-02 01:13:46.644 INFO 6736 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-02 01:13:47.141 INFO 6736 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-02 01:13:47.147 INFO 6736 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-02 01:13:47.148 INFO 6736 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.36] 2020-08-02 01:13:47.181 INFO 6736 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-02 01:13:47.181 INFO 6736 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 507 ms 2020-08-02 01:13:47.268 INFO 6736 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-02 01:13:47.352 INFO 6736 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-02 01:13:47.359 INFO 6736 --- [ main] deep.in.spring.boot.App : Started App in 0.917 seconds (JVM running for 1.155) \u68c0\u67e5HTTP\u670d\u52a1\u548c\u6240\u5199\u4ee3\u7801\uff1a $ curl http://127.0.0.1:8080/ Welcome to Spring Boot","title":"1. \u4f7f\u7528Maven\u547d\u4ee4\u884c\u6784\u5efa\u9879\u76ee"},{"location":"SpringBoot/01-spring-boot-application/#2-spring-boot","text":"https://start.spring.io/ \u62f7\u8d1d\u751f\u6210\u597d\u7684zip\u5305\u5230\u9879\u76ee\u76ee\u5f55\uff1a $ cp ~/Downloads/first-application-by-gui.zip . \u89e3\u538b\u7f29\u8be5\u6587\u4ef6\uff1a $ unzip first-application-by-gui.zip Archive: first-application-by-gui.zip creating: first-application-by-gui/ creating: first-application-by-gui/.mvn/ creating: first-application-by-gui/.mvn/wrapper/ inflating: first-application-by-gui/.mvn/wrapper/maven-wrapper.properties inflating: first-application-by-gui/.mvn/wrapper/MavenWrapperDownloader.java inflating: first-application-by-gui/.mvn/wrapper/maven-wrapper.jar inflating: first-application-by-gui/mvnw inflating: first-application-by-gui/.gitignore inflating: first-application-by-gui/HELP.md inflating: first-application-by-gui/mvnw.cmd creating: first-application-by-gui/src/ creating: first-application-by-gui/src/main/ creating: first-application-by-gui/src/main/resources/ creating: first-application-by-gui/src/main/resources/templates/ inflating: first-application-by-gui/src/main/resources/application.properties creating: first-application-by-gui/src/main/resources/static/ creating: first-application-by-gui/src/main/java/ creating: first-application-by-gui/src/main/java/deep/ creating: first-application-by-gui/src/main/java/deep/in/ creating: first-application-by-gui/src/main/java/deep/in/spring/ creating: first-application-by-gui/src/main/java/deep/in/spring/boot/ inflating: first-application-by-gui/src/main/java/deep/in/spring/boot/FirstApplicationByGuiApplication.java creating: first-application-by-gui/src/test/ creating: first-application-by-gui/src/test/java/ creating: first-application-by-gui/src/test/java/deep/ creating: first-application-by-gui/src/test/java/deep/in/ creating: first-application-by-gui/src/test/java/deep/in/spring/ creating: first-application-by-gui/src/test/java/deep/in/spring/boot/ inflating: first-application-by-gui/src/test/java/deep/in/spring/boot/FirstApplicationByGuiApplicationTests.java inflating: first-application-by-gui/pom.xml \u4f7f\u7528 tree \u547d\u4ee4\u67e5\u770b\uff1a $ tree -a first-application-by-gui first-application-by-gui \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 .mvn \u2502 \u2514\u2500\u2500 wrapper \u2502 \u251c\u2500\u2500 MavenWrapperDownloader.java \u2502 \u251c\u2500\u2500 maven-wrapper.jar \u2502 \u2514\u2500\u2500 maven-wrapper.properties \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2514\u2500\u2500 FirstApplicationByGuiApplication.java \u2502 \u2514\u2500\u2500 resources \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 static \u2502 \u2514\u2500\u2500 templates \u2514\u2500\u2500 test \u2514\u2500\u2500 java \u2514\u2500\u2500 deep \u2514\u2500\u2500 in \u2514\u2500\u2500 spring \u2514\u2500\u2500 boot \u2514\u2500\u2500 FirstApplicationByGuiApplicationTests.java 18 directories, 11 files .gitignore \u6587\u4ef6\u5b9a\u4e49\u4e86\u5e38\u89c1\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u7248\u672c\u63a7\u5236\u5ffd\u7565\u540d\u5355\uff0c\u6bd4\u5982\uff1a HELP.md target/ !.mvn/wrapper/maven-wrapper.jar !**/src/main/**/target/ !**/src/test/**/target/ ### STS ### .apt_generated .classpath .factorypath .project .settings .springBeans .sts4-cache ### IntelliJ IDEA ### .idea *.iws *.iml *.ipr ### NetBeans ### /nbproject/private/ /nbbuild/ /dist/ /nbdist/ /.nb-gradle/ build/ !**/src/main/**/build/ !**/src/test/**/build/ ### VS Code ### .vscode/ Maven Wrapper\u6587\u4ef6\u5305\u542b .mvn \u76ee\u5f55\u3001 mvnw \u548c mvnw.cmd \u6587\u4ef6\uff0c \u53c2\u8003\uff1a https://github.com/takari/maven-wrapper \u53ef\u4ee5\u4e0d\u5b89\u88c5Maven\u800c\u76f4\u63a5\u4f7f\u7528\uff0c\u6bd4\u5982\uff1a Normally you instruct users to install a specific version of Apache Maven, put it on the PATH and then run the mvn command like the following: mvn clean install But now, with a Maven Wrapper setup, you can instruct users to run wrapper scripts: ./mvnw clean install application.properties \u6587\u4ef6 \u662fSpring Boot\u9ed8\u8ba4\u7684\u5e94\u7528\u5916\u90e8\u914d\u7f6e\u6587\u4ef6\uff0c\u5176\u914d\u7f6e\u5c5e\u6027\u53ef\u4ee5\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f\u7684\u884c\u4e3a\u3002 FirstApplicationByGuiApplicationTests.java \u6587\u4ef6 \u662fSpring Boot\u5355\u5143\u6d4b\u8bd5\u7684\u6a21\u7248JUnit\u6587\u4ef6\uff0c\u5176\u8def\u5f84\u548c\u5bf9\u5e94\u7684\u5f15\u5bfc\u6587\u4ef6 FirstApplicationByGuiApplication.java \u5bf9\u5e94\u3002 \u542f\u52a8\u9879\u76ee\u5e76\u8bbf\u95ee\uff1a $ curl http://127.0.0.1:8080/ {\"timestamp\":\"2020-08-02T08:57:15.817+00:00\",\"status\":404,\"error\":\"Not Found\",\"message\":\"\",\"path\":\"/\"} \u56e0\u9879\u76ee\u6ca1\u6709\u7f16\u5199\u9ed8\u8ba4\u670d\u52a1\u800c\u62a5404\u9519\u8bef \u5b89\u88c5 jsonpp \u67e5\u770bJSON\u54cd\u5e94\uff1a $ brew install jsonpp ==> Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/bottles/jsonpp-1.3.0_1.catalina.bottle.tar.gz ######################################################################## 100.0% ==> Pouring jsonpp-1.3.0_1.catalina.bottle.tar.gz \ud83c\udf7a /usr/local/Cellar/jsonpp/1.3.0_1: 5 files, 2.4MB \u518d\u6b21\u8bbf\u95ee\uff1a $ curl http://127.0.0.1:8080 | jsonpp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 102 0 102 0 0 20400 0 --:--:-- --:--:-- --:--:-- 20400 { \"timestamp\": \"2020-08-02T09:03:24.359+00:00\", \"status\": 404, \"error\": \"Not Found\", \"message\": \"\", \"path\": \"/\" }","title":"2. \u56fe\u5f62\u5316\u6784\u5efaSpring Boot\u5e94\u7528"},{"location":"SpringBoot/01-spring-boot-application/#3-spring-bootjar","text":"2.4.5. Creating an Executable Jar We finish our example by creating a completely self-contained executable jar file that we could run in production. Executable jars (sometimes called \u201cfat jars\u201d) are archives containing your compiled classes along with all of the jar dependencies that your code needs to run. \u53ef\u6267\u884c\u7684JAR\u53c8\u79f0\u4e3a\u201cfat jars\u201d To create an executable jar, we need to add the spring-boot-maven-plugin to our pom.xml . To do so, insert the following lines just below the dependencies section: \u6839\u636e\u5b98\u65b9\u6587\u6863\u89e3\u91ca\uff0c\u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\u5230 pom.xml \u4e2d\uff1a <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> \u7136\u540e\u6267\u884c mvn package \u547d\u4ee4\uff1a $ mvn package [INFO] Scanning for projects... [INFO] [INFO] ------------< deep-in-spring-boot:first-application-by-gui >------------ [INFO] Building first-application-by-gui 0.0.1-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) [INFO] ------------------------------------------------------- [INFO] T E S T S [INFO] ------------------------------------------------------- (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-02 17:15:06.025 INFO 4060 --- [ main] .b.FirstApplicationByGuiApplicationTests : Starting FirstApplicationByGuiApplicationTests on nanleis-MacBook-Pro.local with PID 4060 (started by nanlei in /Users/nanlei/Dev/Workspace/first-application-by-gui) 2020-08-02 17:15:06.026 INFO 4060 --- [ main] .b.FirstApplicationByGuiApplicationTests : No active profile set, falling back to default profiles: default 2020-08-02 17:15:06.709 INFO 4060 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-02 17:15:06.958 INFO 4060 --- [ main] .b.FirstApplicationByGuiApplicationTests : Started FirstApplicationByGuiApplicationTests in 1.075 seconds (JVM running for 1.706) [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.508 s - in deep.in.spring.boot.FirstApplicationByGuiApplicationTests 2020-08-02 17:15:07.127 INFO 4060 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor : Shutting down ExecutorService 'applicationTaskExecutor' [INFO] [INFO] Results: [INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] [INFO] --- maven-jar-plugin:3.2.0:jar (default-jar) @ first-application-by-gui --- [INFO] Building jar: /Users/nanlei/Dev/Workspace/first-application-by-gui/target/first-application-by-gui-0.0.1-SNAPSHOT.jar [INFO] [INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:repackage (repackage) @ first-application-by-gui --- [INFO] Replacing main artifact with repackaged archive [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.535 s [INFO] Finished at: 2020-08-02T17:15:07+08:00 [INFO] ------------------------------------------------------------------------ \u6700\u7ec8\u751f\u6210\u7684 first-application-by-gui-0.0.1-SNAPSHOT.jar \u5c31\u5728 target \u76ee\u5f55\u4e0b\uff0c\u4f7f\u7528 java -jar \u547d\u4ee4\u8fd0\u884cJAR\uff1a $ java -jar target/first-application-by-gui-0.0.1-SNAPSHOT.jar . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-02 17:24:33.034 INFO 4219 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : Starting FirstApplicationByGuiApplication v0.0.1-SNAPSHOT on nanleis-MacBook-Pro.local with PID 4219 (/Users/nanlei/Dev/Workspace/first-application-by-gui/target/first-application-by-gui-0.0.1-SNAPSHOT.jar started by nanlei in /Users/nanlei/Dev/Workspace/first-application-by-gui) 2020-08-02 17:24:33.036 INFO 4219 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : No active profile set, falling back to default profiles: default 2020-08-02 17:24:33.800 INFO 4219 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-02 17:24:33.809 INFO 4219 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-02 17:24:33.810 INFO 4219 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.37] 2020-08-02 17:24:33.865 INFO 4219 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-02 17:24:33.865 INFO 4219 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 785 ms 2020-08-02 17:24:34.031 INFO 4219 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-02 17:24:34.221 INFO 4219 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-02 17:24:34.231 INFO 4219 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : Started FirstApplicationByGuiApplication in 1.523 seconds (JVM running for 1.894) java -jar \u65b9\u5f0f\u548c mvn spring-boot:run \u65b9\u5f0f\u57fa\u672c\u65e0\u5f02","title":"3. \u521b\u5efaSpring Boot\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u6267\u884cJAR"},{"location":"SpringBoot/01-spring-boot-application/#4-spring-bootjar","text":"\u5728 target \u76ee\u5f55\u4e0b\u6267\u884c tree -h $ tree -h . \u251c\u2500\u2500 [ 128] classes \u2502 \u251c\u2500\u2500 [ 1] application.properties \u2502 \u2514\u2500\u2500 [ 96] deep \u2502 \u2514\u2500\u2500 [ 96] in \u2502 \u2514\u2500\u2500 [ 96] spring \u2502 \u2514\u2500\u2500 [ 96] boot \u2502 \u2514\u2500\u2500 [ 790] FirstApplicationByGuiApplication.class \u251c\u2500\u2500 [ 16M] first-application-by-gui-0.0.1-SNAPSHOT.jar \u251c\u2500\u2500 [3.0K] first-application-by-gui-0.0.1-SNAPSHOT.jar.original \u251c\u2500\u2500 [ 96] generated-sources \u2502 \u2514\u2500\u2500 [ 64] annotations \u251c\u2500\u2500 [ 96] generated-test-sources \u2502 \u2514\u2500\u2500 [ 64] test-annotations \u251c\u2500\u2500 [ 96] maven-archiver \u2502 \u2514\u2500\u2500 [ 87] pom.properties \u251c\u2500\u2500 [ 96] maven-status \u2502 \u2514\u2500\u2500 [ 128] maven-compiler-plugin \u2502 \u251c\u2500\u2500 [ 96] compile \u2502 \u2502 \u2514\u2500\u2500 [ 128] default-compile \u2502 \u2502 \u251c\u2500\u2500 [ 59] createdFiles.lst \u2502 \u2502 \u2514\u2500\u2500 [ 125] inputFiles.lst \u2502 \u2514\u2500\u2500 [ 96] testCompile \u2502 \u2514\u2500\u2500 [ 128] default-testCompile \u2502 \u251c\u2500\u2500 [ 64] createdFiles.lst \u2502 \u2514\u2500\u2500 [ 130] inputFiles.lst \u251c\u2500\u2500 [ 128] surefire-reports \u2502 \u251c\u2500\u2500 [ 18K] TEST-deep.in.spring.boot.FirstApplicationByGuiApplicationTests.xml \u2502 \u2514\u2500\u2500 [ 363] deep.in.spring.boot.FirstApplicationByGuiApplicationTests.txt \u2514\u2500\u2500 [ 96] test-classes \u2514\u2500\u2500 [ 96] deep \u2514\u2500\u2500 [ 96] in \u2514\u2500\u2500 [ 96] spring \u2514\u2500\u2500 [ 96] boot \u2514\u2500\u2500 [ 588] FirstApplicationByGuiApplicationTests.class 22 directories, 12 files first-application-by-gui-0.0.1-SNAPSHOT.jar.original \u662f\u672a\u5305\u542b\u7b2c\u4e09\u65b9\u4f9d\u8d56\u7684\u672c\u5730\u8d44\u6e90(\u7f16\u8bd1\u540e\u7684 classes \u76ee\u5f55\u4e0b\u7684\u8d44\u6e90)\uff0c\u6240\u5360\u7a7a\u95f4\u4ec53K\uff0c\u800c\u53ef\u6267\u884cJAR\u7684\u5927\u5c0f\u4e3a16M\u3002 \u89e3\u538b\u7f29 first-application-by-gui-0.0.1-SNAPSHOT.jar \u5230\u4e34\u65f6\u76ee\u5f55temp\u5e76\u67e5\u770b\uff1a $ unzip first-application-by-gui-0.0.1-SNAPSHOT.jar -d temp Archive: first-application-by-gui-0.0.1-SNAPSHOT.jar creating: temp/META-INF/ inflating: temp/META-INF/MANIFEST.MF creating: temp/org/ creating: temp/org/springframework/ creating: temp/org/springframework/boot/ creating: temp/org/springframework/boot/loader/ (\u7701\u7565\u90e8\u5206\u5185\u5bb9) extracting: temp/BOOT-INF/lib/tomcat-embed-websocket-9.0.37.jar extracting: temp/BOOT-INF/lib/spring-web-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-beans-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-webmvc-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-aop-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-context-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-expression-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/slf4j-api-1.7.30.jar extracting: temp/BOOT-INF/lib/spring-core-5.2.8.RELEASE.jar extracting: temp/BOOT-INF/lib/spring-jcl-5.2.8.RELEASE.jar inflating: temp/BOOT-INF/classpath.idx \u67e5\u770btemp\u76ee\u5f55\u7684\u7ed3\u6784\uff1a $ tree temp/ temp/ \u251c\u2500\u2500 BOOT-INF \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2514\u2500\u2500 FirstApplicationByGuiApplication.class \u2502 \u251c\u2500\u2500 classpath.idx \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500 spring-aop-5.2.8.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-beans-5.2.8.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-2.3.2.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-autoconfigure-2.3.2.RELEASE.jar \u2502 \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500 tomcat-embed-core-9.0.37.jar \u2502 \u2514\u2500\u2500 tomcat-embed-websocket-9.0.37.jar \u251c\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 deep-in-spring-boot \u2502 \u2514\u2500\u2500 first-application-by-gui \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 org \u2514\u2500\u2500 springframework \u2514\u2500\u2500 boot \u2514\u2500\u2500 loader \u251c\u2500\u2500 ClassPathIndexFile.class \u251c\u2500\u2500 ExecutableArchiveLauncher.class \u251c\u2500\u2500 JarLauncher.class \u251c\u2500\u2500 ... 20 directories, 100 files \u5176\u4e2d BOOT-INT/classes \u76ee\u5f55\u5b58\u653e\u5e94\u7528\u7f16\u8bd1\u540e\u7684class\u6587\u4ef6 BOOT-INF/lib \u76ee\u5f55\u5b58\u653e\u5e94\u7528\u4f9d\u8d56\u7684jar\u5305 META-INF \u76ee\u5f55\u5b58\u653e\u5e94\u7528\u76f8\u5173\u7684\u5143\u4fe1\u606f\uff0c\u6bd4\u5982 MANIFEST.MF \u6587\u4ef6 org \u76ee\u5f55\u5b58\u653eSpring Boot\u6846\u67b6\u76f8\u5173\u7684class\u6587\u4ef6 \u89e3\u538b\u7f29 first-application-by-gui-0.0.1-SNAPSHOT.jar.original \u6587\u4ef6\u5e76\u6bd4\u8f83\u4e8c\u8005\u76ee\u5f55\u5dee\u5f02\uff1a $ unzip first-application-by-gui-0.0.1-SNAPSHOT.jar.original -d original Archive: first-application-by-gui-0.0.1-SNAPSHOT.jar.original inflating: original/META-INF/MANIFEST.MF creating: original/deep/ creating: original/deep/in/ creating: original/deep/in/spring/ creating: original/deep/in/spring/boot/ creating: original/META-INF/maven/ creating: original/META-INF/maven/deep-in-spring-boot/ creating: original/META-INF/maven/deep-in-spring-boot/first-application-by-gui/ inflating: original/deep/in/spring/boot/FirstApplicationByGuiApplication.class inflating: original/application.properties inflating: original/META-INF/maven/deep-in-spring-boot/first-application-by-gui/pom.xml inflating: original/META-INF/maven/deep-in-spring-boot/first-application-by-gui/pom.properties $ tree original/ original/ \u251c\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 deep-in-spring-boot \u2502 \u2514\u2500\u2500 first-application-by-gui \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 application.properties \u2514\u2500\u2500 deep \u2514\u2500\u2500 in \u2514\u2500\u2500 spring \u2514\u2500\u2500 boot \u2514\u2500\u2500 FirstApplicationByGuiApplication.class 8 directories, 5 files \u9664\u4e86 META-INF \u76ee\u5f55\uff0c\u5176\u4f59\u5747\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5c06class\u6587\u4ef6\u548c application.properties \u653e\u5230\u4e86 BOOT-INF/classes \u4e0b\uff0c\u5c06\u6240\u6709\u4f9d\u8d56\u7684jar\u5305\u90fd\u653e\u5230\u4e86 BOOT-INF/lib \u4e0b\u3002\u8fd9\u548c\u4f20\u7edfJava Web\u9879\u76ee\u662f\u7c7b\u4f3c\u7684\uff0c\u6240\u6709class\u6587\u4ef6\u653e\u5728 WEB-INF/classes \u4e0b\uff0c\u800c\u6240\u6709\u4f9d\u8d56\u5728 WEB-INF/lib \u4e0b\u3002","title":"4. Spring Boot\u53ef\u6267\u884cJAR\u8d44\u6e90\u7ed3\u6784"},{"location":"SpringBoot/01-spring-boot-application/#5-jarspring-boot-loader","text":"\u53ef\u6267\u884cJAR\u5305\u88ab java -jar \u547d\u4ee4\u6267\u884c\u65f6\uff0c\u5176\u5e76\u4e0d\u80fd\u611f\u77e5jar\u6587\u4ef6\u662f\u5426\u662fSpring Boot\u63d2\u4ef6\u6253\u5305\u800c\u6765\uff0c\u6267\u884c\u6309\u7167\u6807\u51c6JAR\u6587\u4ef6\u6765\u8fdb\u884c\u3002 Java\u6807\u51c6\u53c2\u8003\uff1a https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html If the -jar option is specified, its argument is the name of the JAR file containing class and resource files for the application. The startup class must be indicated by the Main-Class manifest header in its source code. \u4e5f\u5c31\u662f MANIFEST.MF \u6587\u4ef6\u5fc5\u987b\u5728 META-INF \u76ee\u5f55\u4e0b\uff0c\u67e5\u770b\u8be5\u6587\u4ef6: $ cd temp $ cat META-INF/MANIFEST.MF Manifest-Version: 1.0 Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx Implementation-Title: first-application-by-gui Implementation-Version: 0.0.1-SNAPSHOT Start-Class: deep.in.spring.boot.FirstApplicationByGuiApplication Spring-Boot-Classes: BOOT-INF/classes/ Spring-Boot-Lib: BOOT-INF/lib/ Build-Jdk-Spec: 1.8 Spring-Boot-Version: 2.3.2.RELEASE Created-By: Maven Jar Plugin 3.2.0 Main-Class: org.springframework.boot.loader.JarLauncher \u53d1\u73b0 Main-Class \u5c5e\u6027\u4e3a org.springframework.boot.loader.JarLauncher \uff0c\u800c\u9879\u76ee\u7684\u5f15\u5bfc\u7c7b\u5728 Start-Class \u5c5e\u6027\u4e2d\uff0c\u53c2\u8003\u5b98\u65b9\u6587\u6863\u4ecb\u7ecd\uff1a You need to specify an appropriate Launcher as the Main-Class attribute of META-INF/MANIFEST.MF. The actual class that you want to launch (that is, the class that contains a main method) should be specified in the Start-Class attribute. The following example shows a typical MANIFEST.MF for an executable jar file: Main-Class: org.springframework.boot.loader.JarLauncher Start-Class: com.mycompany.project.MyApplication For a war file, it would be as follows: Main-Class: org.springframework.boot.loader.WarLauncher Start-Class: com.mycompany.project.MyApplication \u53ef\u4ee5\u770b\u5230\uff0cJAR\u548cWAR\u5bf9\u5e94\u4e86\u4e0d\u540c\u7684 Launcher \u5b9e\u73b0. \u56e0\u4e3a org.springframework.boot.loader.JarLauncher \u5e76\u975e\u9879\u76ee\u4e2d\u7684\u6587\u4ef6\uff0c\u90a3\u4e48\u5b83\u662f\u7531 spring-boot-maven-plugin \u63d2\u4ef6\u5728\u6253\u5305\u65f6\u5f15\u5165\u7684\uff0c\u4e3a\u4e86\u7814\u7a76\uff0c\u5148\u53bb\u67e5\u627e\u5b83\u7684\u6240\u5c5e\uff0c\u5728 https://search.maven.org/ \u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u6309\u7c7b\u5168\u540d\u641c\u7d22\uff0c\u627e\u5230GAV\u4fe1\u606f <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-loader </artifactId> <version> 2.3.2.RELEASE </version> </dependency> \u65e2\u7136 org.springframework.boot.loader.JarLauncher \u662f MANIFEAST.MF \u5b9a\u4e49\u7684\u4e3b\u5f15\u5bfc\u7c7b\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd0\u884c\u8be5\u6587\u4ef6\u4e5f\u80fd\u542f\u52a8\u9879\u76ee\uff1a $ java org.springframework.boot.loader.JarLauncher . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-02 19:53:47.440 INFO 4807 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : Starting FirstApplicationByGuiApplication v0.0.1-SNAPSHOT on nanleis-MacBook-Pro.local with PID 4807 (/Users/nanlei/Dev/Workspace/first-application-by-gui/target/temp/BOOT-INF/classes started by nanlei in /Users/nanlei/Dev/Workspace/first-application-by-gui/target/temp) 2020-08-02 19:53:47.442 INFO 4807 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : No active profile set, falling back to default profiles: default 2020-08-02 19:53:48.060 INFO 4807 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-02 19:53:48.069 INFO 4807 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-02 19:53:48.069 INFO 4807 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.37] 2020-08-02 19:53:48.122 INFO 4807 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-02 19:53:48.123 INFO 4807 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 645 ms 2020-08-02 19:53:48.286 INFO 4807 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-02 19:53:48.439 INFO 4807 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-02 19:53:48.448 INFO 4807 --- [ main] d.i.s.b.FirstApplicationByGuiApplication : Started FirstApplicationByGuiApplication in 1.288 seconds (JVM running for 1.585) \u4ece\u8f93\u51fa\u4e2d\u4e5f\u80fd\u770b\u5230 deep.in.spring.boot.FirstApplicationByGuiApplication \u88ab JarLauncher \u88c5\u8f7d\u5e76\u6267\u884c\uff0c\u4e5f\u5c31\u662f META-INF/MANIFEST.MF \u4e2d\u7684 Start-Class \u88ab JarLauncher \u6267\u884c\u3002\u82e5\u76f4\u63a5\u4f7f\u7528java\u547d\u4ee4\u6267\u884c deep.in.spring.boot.FirstApplicationByGuiApplication \uff1a $ cd BOOT-INF/classes $ java deep.in.spring.boot.FirstApplicationByGuiApplication Exception in thread \"main\" java.lang.NoClassDefFoundError: org/springframework/boot/SpringApplication at deep.in.spring.boot.FirstApplicationByGuiApplication.main(FirstApplicationByGuiApplication.java:10) Caused by: java.lang.ClassNotFoundException: org.springframework.boot.SpringApplication at java.net.URLClassLoader.findClass(URLClassLoader.java:382) at java.lang.ClassLoader.loadClass(ClassLoader.java:418) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355) at java.lang.ClassLoader.loadClass(ClassLoader.java:351) ... 1 more \u63d0\u793a\u627e\u4e0d\u5230\u7c7b org.springframework.boot.SpringApplication \uff0c\u8fd9\u662f\u7531\u4e8ejava\u547d\u4ee4\u6ca1\u6709\u6307\u5b9a classpath \uff0c\u52a0\u4e0a classpath \u53c2\u6570\u4e4b\u540e\uff0c\u4e5f\u80fd\u542f\u52a8\u7a0b\u5e8f\uff1a $ java -classpath \".:../lib/*\" deep.in.spring.boot.FirstApplicationByGuiApplication","title":"5. JAR\u6267\u884c\u6a21\u5757spring-boot-loader"},{"location":"SpringBoot/01-spring-boot-application/#6-jarlauncher","text":"\u5728 pom.xml \u4e2d\u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\uff0c\u7528\u4e8e\u6e90\u7801\u5206\u6790\uff1a <!-- spring-boot-loader \u5206\u6790 --> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-loader </artifactId> <scope> provided </scope> </dependency> \u4ee5\u4e0b\u5206\u6790\u5747\u57fa\u4e8eorg.springframework.boot:spring-boot-loader:2.3.1.RELEASE \u56e0\u4e3a\u8fd0\u884c\u65f6 spring-boot-loader \u5728JAR\u6587\u4ef6\u4e2d\u5b58\u5728\uff0c\u6240\u4ee5\u8fd9\u91cc scope \u5b9a\u4e3a provided \u3002 \u5728IDEA\u4e2d\u5bf9 spring-boot-loader \u5f00\u542f\u65ad\u70b9\u8c03\u8bd5\uff1a + \u5c06\u9879\u76ee\u6253\u5305 + \u5728IDEA\u7684 Run/Debug Configuration \u4e2d\u65b0\u5efa JAR Application + \u586b\u5199\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe \u5728IDEA\u4e2d\u6309 command+O \u67e5\u627e org.springframework.boot.loader.JarLauncher \uff0c\u5373\u53ef\u4ece main() \u65b9\u6cd5\u5f00\u59cb\u8ddf\u8e2a\u8c03\u8bd5\u3002 JarLauncher \u7ee7\u627f\u81ea org.springframework.boot.loader.Launcher \uff0c\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a JarLauncher \u7684 main() \u65b9\u6cd5\u4e3a\uff1a public static void main ( String [] args ) throws Exception { new JarLauncher (). launch ( args ); } Launcher#launch(args) \u5b9e\u73b0\u4e3a\uff1a protected void launch ( String [] args ) throws Exception { if ( ! isExploded ()) { JarFile . registerUrlProtocolHandler (); } ClassLoader classLoader = createClassLoader ( getClassPathArchivesIterator ()); String jarMode = System . getProperty ( \"jarmode\" ); String launchClass = ( jarMode != null && ! jarMode . isEmpty ()) ? JAR_MODE_LAUNCHER : getMainClass (); launch ( args , launchClass , classLoader ); } \u5176\u4e2d JarFile.registerUrlProtocolHandler() \u65b9\u6cd5\u4e3a\uff1a private static final String PROTOCOL_HANDLER = \"java.protocol.handler.pkgs\" ; private static final String HANDLERS_PACKAGE = \"org.springframework.boot.loader\" ; /** * Register a {@literal 'java.protocol.handler.pkgs'} property so that a * {@link URLStreamHandler} will be located to deal with jar URLs. */ public static void registerUrlProtocolHandler () { String handlers = System . getProperty ( PROTOCOL_HANDLER , \"\" ); System . setProperty ( PROTOCOL_HANDLER , ( \"\" . equals ( handlers ) ? HANDLERS_PACKAGE : handlers + \"|\" + HANDLERS_PACKAGE )); resetCachedUrlHandlers (); } /** * Reset any cached handlers just in case a jar protocol has already been used. We * reset the handler by trying to set a null {@link URLStreamHandlerFactory} which * should have no effect other than clearing the handlers cache. */ private static void resetCachedUrlHandlers () { try { URL . setURLStreamHandlerFactory ( null ); } catch ( Error ex ) { // Ignore } } \u8be5\u65b9\u6cd5\u5c06 org.springframework.boot.loader \u8ffd\u52a0\u5230Java\u7cfb\u7edf\u5c5e\u6027 java.protocol.handler.pkgs \u4e2d\uff0c\u4e5f\u5c31\u662f org.springframework.boot.loader \u5305\u4e0b\u5b58\u5728\u4e00\u4e2a Handler \u7c7b\uff0c\u5373 org.springframework.boot.loader.jar.Handler \uff0c\u5b83\u6269\u5c55\u4e86 URLStreamHandler \uff0c\u8fd9\u662f java.net.URLStreamHandler \u7684\u6269\u5c55\u673a\u5236\u5b9e\u73b0\u7684\uff0c\u7531 URL#getURLStreamHandler(String protocol) \u65b9\u6cd5\u63d0\u4f9b\uff1a private static final String protocolPathProp = \"java.protocol.handler.pkgs\" ; /** * A table of protocol handlers. */ static Hashtable < String , URLStreamHandler > handlers = new Hashtable <> (); private static Object streamHandlerLock = new Object (); /** * Returns the Stream Handler. * @param protocol the protocol to use */ static URLStreamHandler getURLStreamHandler ( String protocol ) { URLStreamHandler handler = handlers . get ( protocol ); if ( handler == null ) { boolean checkedWithFactory = false ; // Use the factory (if any) if ( factory != null ) { handler = factory . createURLStreamHandler ( protocol ); checkedWithFactory = true ; } // Try java protocol handler if ( handler == null ) { String packagePrefixList = null ; packagePrefixList = java . security . AccessController . doPrivileged ( new sun . security . action . GetPropertyAction ( protocolPathProp , \"\" )); if ( packagePrefixList != \"\" ) { packagePrefixList += \"|\" ; } // REMIND: decide whether to allow the \"null\" class prefix // or not. packagePrefixList += \"sun.net.www.protocol\" ; StringTokenizer packagePrefixIter = new StringTokenizer ( packagePrefixList , \"|\" ); while ( handler == null && packagePrefixIter . hasMoreTokens ()) { String packagePrefix = packagePrefixIter . nextToken (). trim (); try { String clsName = packagePrefix + \".\" + protocol + \".Handler\" ; Class <?> cls = null ; try { cls = Class . forName ( clsName ); } catch ( ClassNotFoundException e ) { ClassLoader cl = ClassLoader . getSystemClassLoader (); if ( cl != null ) { cls = cl . loadClass ( clsName ); } } if ( cls != null ) { handler = ( URLStreamHandler ) cls . newInstance (); } } catch ( Exception e ) { // any number of exceptions can get thrown here } } } synchronized ( streamHandlerLock ) { URLStreamHandler handler2 = null ; // Check again with hashtable just in case another // thread created a handler since we last checked handler2 = handlers . get ( protocol ); if ( handler2 != null ) { return handler2 ; } // Check with factory if another thread set a // factory since our last check if ( ! checkedWithFactory && factory != null ) { handler2 = factory . createURLStreamHandler ( protocol ); } if ( handler2 != null ) { // The handler from the factory must be given more // importance. Discard the default handler that // this thread created. handler = handler2 ; } // Insert this handler into the hashtable if ( handler != null ) { handlers . put ( protocol , handler ); } } } return handler ; } \u5176\u4e2dJDK\u5185\u5efa\u534f\u8bae\u653e\u5728 sun.net.www.protocol \u5305\u4e0b\uff0c\u7c7b\u5168\u540d\u6a21\u5f0f\u4e3a sun.net.www.protocol.${protocol}.Handler \uff0c ${protocol} \u4e3a\u534f\u8bae\u540d\uff0c\u5e38\u89c1\u534f\u8bae\u6709\uff1a FILE : sun.net.www.protocol.file.Handler JAR : sun.net.www.prorocol.jar.Handler HTTP : sun.net.www.prorocol.http.Handler HTTPS : sun.net.www.prorocol.https.Handler FTP : sun.net.www.prorocol.ftp.Handler \u56de\u5230 org.springframework.boot.loader.jar.Handler \u4e2d\uff0c\u6309\u7167\u7c7b\u540d\u6a21\u5f0f\uff0c\u5b9e\u73b0\u534f\u8bae\u4e3aJAR\uff0c\u8986\u76d6\u4e86JDK\u7684\u5185\u5efa\u5b9e\u73b0\uff0c\u56e0\u4e3aSpring Boot\u7684FAT JAR\u5305\u542b\u4e86\u4f20\u7edf\u7684java JAR\u8d44\u6e90\uff0c\u8fd8\u5305\u542b\u4e86\u4f9d\u8d56\u7684JAR\u6587\u4ef6\uff0c\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u5e94\u7528\u5f52\u6863\u6587\u4ef6\uff0c\u5f53\u4f7f\u7528 java -jar \u547d\u4ee4\u6765\u5f15\u5bfc\u65f6\uff0c\u5185\u90e8\u7684JAR\u6587\u4ef6\u65e0\u6cd5\u88ab\u5185\u5efa\u7684 sun.net.www.prorocol.jar.Handler \u5f53\u4f5c classpath \uff0c\u6240\u4ee5\u9700\u8981\u66ff\u6362\u5b9e\u73b0\u3002 \u5177\u4f53\u53ef\u4ee5\u53c2\u8003 org.springframework.boot.loader.jar.JarURLConnection#get(URL url, JarFile jarFile) \u65b9\u6cd5\u548c org.springframework.boot.loader.jar.JarFile \u7c7b\u3002 Launcher#launch(args) \u65b9\u6cd5\u7684\u7b2c\u4e8c\u6b65\u4e3a createClassLoader(getClassPathArchivesIterator()) \uff0c\u5176\u4e2d getClassPathArchivesIterator() \u65b9\u6cd5\u7531 ExecutableArchiveLauncher \u63d0\u4f9b\uff1a @Override protected Iterator < Archive > getClassPathArchivesIterator () throws Exception { Archive . EntryFilter searchFilter = this :: isSearchCandidate ; Iterator < Archive > archives = this . archive . getNestedArchives ( searchFilter , ( entry ) -> isNestedArchive ( entry ) && ! isEntryIndexed ( entry )); if ( isPostProcessingClassPathArchives ()) { archives = applyClassPathArchivePostProcessing ( archives ); } return archives ; } \u800c isNestedArchive(Archive.Entry entry) \u65b9\u6cd5\u5219\u7531\u5b50\u7c7b JarLauncher \u6216 WarLauncher \u63d0\u4f9b\uff0c\u5728 JarLauncher \u4e2d\uff1a static final EntryFilter NESTED_ARCHIVE_ENTRY_FILTER = ( entry ) -> { if ( entry . isDirectory ()) { return entry . getName (). equals ( \"BOOT-INF/classes/\" ); } return entry . getName (). startsWith ( \"BOOT-INF/lib/\" ); }; @Override protected boolean isNestedArchive ( Archive . Entry entry ) { return NESTED_ARCHIVE_ENTRY_FILTER . matches ( entry ); } \u4e5f\u5c31\u662f\u8fc7\u6ee4 Archive.Entry \u6240\u5339\u914d\u7684\u540d\u79f0\u662f BOOT-INF/classes/ \u8fd8\u662f BOOT-INF/lib/ \u524d\u7f00\uff0c\u800c getClassPathArchivesIterator() \u65b9\u6cd5\u8fd4\u56de\u7ed3\u679c\u8fd8\u662f\u53d6\u51b3\u4e8e archive \u5c5e\u6027\u7684\u5185\u5bb9\uff1a public ExecutableArchiveLauncher () { try { this . archive = createArchive (); this . classPathIndex = getClassPathIndex ( this . archive ); } catch ( Exception ex ) { throw new IllegalStateException ( ex ); } } \u6b64\u5904 archive \u6e90\u4e8e\u7236\u7c7b Launcher \u7684 createArchive() \u65b9\u6cd5\uff1a protected final Archive createArchive () throws Exception { ProtectionDomain protectionDomain = getClass (). getProtectionDomain (); CodeSource codeSource = protectionDomain . getCodeSource (); URI location = ( codeSource != null ) ? codeSource . getLocation (). toURI () : null ; String path = ( location != null ) ? location . getSchemeSpecificPart () : null ; if ( path == null ) { throw new IllegalStateException ( \"Unable to determine code source archive\" ); } File root = new File ( path ); if ( ! root . exists ()) { throw new IllegalStateException ( \"Unable to determine code source archive from \" + root ); } return ( root . isDirectory () ? new ExplodedArchive ( root ) : new JarFileArchive ( root )); } \u8fd9\u91cc\u4e3b\u8981\u901a\u8fc7 Launcher \u6240\u5728\u7684\u5a92\u4ecb\uff0c\u5224\u65ad\u662f JarFileArchive \u8fd8\u662f ExplodedArchive (\u89e3\u538b\u76ee\u5f55)\uff0c\u56e0\u4e3a\u8be5\u65b9\u6cd5\u662f final \u7c7b\u578b\uff0c\u6240\u4ee5\u5b50\u7c7b JarLauncher \u6216 WarLauncher \u5747\u7ee7\u627f\u8be5\u5b9e\u73b0\u3002 \u518d\u5f80\u540e\u5c31\u662f\u6839\u636e\u83b7\u53d6\u5230\u7684archives\u53bb\u521b\u5efa ClassLoader \uff0c\u5728 ExecutableArchiveLauncher \u4e2d\uff1a @Override protected ClassLoader createClassLoader ( Iterator < Archive > archives ) throws Exception { List < URL > urls = new ArrayList <> ( guessClassPathSize ()); while ( archives . hasNext ()) { urls . add ( archives . next (). getUrl ()); } if ( this . classPathIndex != null ) { urls . addAll ( this . classPathIndex . getUrls ()); } return createClassLoader ( urls . toArray ( new URL [ 0 ] )); } \u6700\u540e\u8c03\u7528 Launcher \u4e2d\u7684 createClassLoader(URL[] urls) \u65b9\u6cd5\u521b\u5efa ClassLoader \uff1a protected ClassLoader createClassLoader ( URL [] urls ) throws Exception { return new LaunchedURLClassLoader ( isExploded (), getArchive (), urls , getClass (). getClassLoader ()); } \u4e4b\u540e\u786e\u5b9a launchClass \u7684\u5185\u5bb9\uff0c\u5c31\u662f\u4ece MANIFEST.MF \u4e2d\u83b7\u53d6 Start-Class \u7684\u5185\u5bb9\uff0c\u5728 ExecutableArchiveLauncher \u4e2d\uff1a private static final String START_CLASS_ATTRIBUTE = \"Start-Class\" ; @Override protected String getMainClass () throws Exception { Manifest manifest = this . archive . getManifest (); String mainClass = null ; if ( manifest != null ) { mainClass = manifest . getMainAttributes (). getValue ( START_CLASS_ATTRIBUTE ); } if ( mainClass == null ) { throw new IllegalStateException ( \"No 'Start-Class' manifest entry specified in \" + this ); } return mainClass ; } \u7d27\u63a5\u7740\u8c03\u7528\u5b9e\u9645\u7684\u5f15\u5bfc\u7c7b launch(String[] args, String launchClass, ClassLoader classLoader) protected void launch ( String [] args , String launchClass , ClassLoader classLoader ) throws Exception { Thread . currentThread (). setContextClassLoader ( classLoader ); createMainMethodRunner ( launchClass , args , classLoader ). run (); } protected MainMethodRunner createMainMethodRunner ( String mainClass , String [] args , ClassLoader classLoader ) { return new MainMethodRunner ( mainClass , args ); } \u5b9e\u9645\u6267\u884c\u7684\u65b9\u6cd5\u4e3a MainMethodRunner#run() \uff1a public class MainMethodRunner { private final String mainClassName ; private final String [] args ; public MainMethodRunner ( String mainClass , String [] args ) { this . mainClassName = mainClass ; this . args = ( args != null ) ? args . clone () : null ; } public void run () throws Exception { Class <?> mainClass = Class . forName ( this . mainClassName , false , Thread . currentThread (). getContextClassLoader ()); Method mainMethod = mainClass . getDeclaredMethod ( \"main\" , String [] . class ); mainMethod . setAccessible ( true ); mainMethod . invoke ( null , new Object [] { this . args }); } } \u6700\u540e\u5c06 mainClass \u4e2d\u7684 main(String[]) \u65b9\u6cd5\u6309\u9759\u6001\u65b9\u6cd5\u8c03\u7528\uff0c\u6700\u7ec8 JarLauncher \u662f\u5728\u540c\u8fdb\u7a0b\u5185\u8c03\u7528 Start-Class \u7684 main(String[]) \u65b9\u6cd5\uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u524d\u51c6\u5907\u597dClass Path\u3002","title":"6. JarLauncher\u7684\u5b9e\u73b0\u539f\u7406"},{"location":"SpringBoot/01-spring-boot-application/#7-warlauncher","text":"\u548c JarLauncher \u5dee\u5f02\u4e0d\u5927\uff0c\u4e8c\u8005\u90fd\u662f\u7ee7\u627f\u81ea ExecutableArchiveLauncher \uff1a public class WarLauncher extends ExecutableArchiveLauncher { public WarLauncher () { } protected WarLauncher ( Archive archive ) { super ( archive ); } @Override protected boolean isPostProcessingClassPathArchives () { return false ; } @Override protected boolean isSearchCandidate ( Entry entry ) { return entry . getName (). startsWith ( \"WEB-INF/\" ); } @Override public boolean isNestedArchive ( Archive . Entry entry ) { if ( entry . isDirectory ()) { return entry . getName (). equals ( \"WEB-INF/classes/\" ); } return entry . getName (). startsWith ( \"WEB-INF/lib/\" ) || entry . getName (). startsWith ( \"WEB-INF/lib-provided/\" ); } public static void main ( String [] args ) throws Exception { new WarLauncher (). launch ( args ); } } \u4e3b\u8981\u533a\u522b\u5728\u4e8e\u548cJAR\u7684Class Path\u4e0d\u540c\uff0c WEB-INF/classes/ \u548c WEB-INF/lib/ \u662f\u4f20\u7edfServlet\u5e94\u7528\u7684Class Path\u8def\u5f84\uff0c WEB-INF/lib-provided/ \u662fSpring Boot\u7684 WarLauncher \u5b9a\u5236\u5b9e\u73b0\u3002 \u5c06 pom.xml \u7684 <packaging> \u5143\u7d20\u6539\u4e3a war \uff1a <packaging> war </packaging> \u518d\u6b21\u4f7f\u7528Maven\u8fdb\u884c\u6253\u5305\uff1a $ mvn clean package [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ first-spring-boot-application --- [INFO] Deleting /Users/nanlei/Dev/Workspace/first-spring-boot-application/target [INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ first-spring-boot-application --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ first-spring-boot-application --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/classes [INFO] [INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ first-spring-boot-application --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ first-spring-boot-application --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/test-classes [INFO] [INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ first-spring-boot-application --- [INFO] [INFO] ------------------------------------------------------- [INFO] T E S T S [INFO] ------------------------------------------------------- [INFO] Running deep.in.spring.boot.AppTest [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in deep.in.spring.boot.AppTest [INFO] [INFO] Results: [INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] [INFO] --- maven-war-plugin:3.2.3:war (default-war) @ first-spring-boot-application --- [INFO] Packaging webapp [INFO] Assembling webapp [first-spring-boot-application] in [/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT] [INFO] Processing war project [INFO] Webapp assembled in [102 msecs] [INFO] Building war: /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT.war [INFO] [INFO] --- spring-boot-maven-plugin:2.3.1.RELEASE:repackage (repackage) @ first-spring-boot-application --- [INFO] Replacing main artifact with repackaged archive [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.457 s [INFO] Finished at: 2020-08-04T00:23:52+08:00 [INFO] ------------------------------------------------------------------------ \u5207\u6362\u5230 target \u76ee\u5f55\uff0c\u5c06 first-spring-boot-application-1.0.0-SNAPSHOT.war \u89e3\u538b\u7f29\u5230temp\u76ee\u5f55\u4e0b\uff1a $ cd target $ unzip first-spring-boot-application-1.0.0-SNAPSHOT.war -d temp Archive: first-spring-boot-application-1.0.0-SNAPSHOT.war creating: temp/META-INF/ inflating: temp/META-INF/MANIFEST.MF creating: temp/org/ creating: temp/org/springframework/ creating: temp/org/springframework/boot/ creating: temp/org/springframework/boot/loader/ inflating: temp/org/springframework/boot/loader/ClassPathIndexFile.class (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) inflating: temp/org/springframework/boot/loader/util/SystemPropertyUtils.class creating: temp/WEB-INF/ creating: temp/WEB-INF/classes/ creating: temp/WEB-INF/classes/deep/ creating: temp/WEB-INF/classes/deep/in/ creating: temp/WEB-INF/classes/deep/in/spring/ creating: temp/WEB-INF/classes/deep/in/spring/boot/ creating: temp/WEB-INF/lib/ inflating: temp/WEB-INF/classes/deep/in/spring/boot/App.class extracting: temp/WEB-INF/lib/jackson-datatype-jsr310-2.11.0.jar (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) extracting: temp/WEB-INF/lib/snakeyaml-1.26.jar creating: temp/META-INF/maven/ creating: temp/META-INF/maven/deep-in-spring-boot/ creating: temp/META-INF/maven/deep-in-spring-boot/first-spring-boot-application/ inflating: temp/META-INF/maven/deep-in-spring-boot/first-spring-boot-application/pom.xml inflating: temp/META-INF/maven/deep-in-spring-boot/first-spring-boot-application/pom.properties extracting: temp/WEB-INF/lib/log4j-to-slf4j-2.13.3.jar extracting: temp/WEB-INF/lib/spring-context-5.2.7.RELEASE.jar extracting: temp/WEB-INF/lib/spring-core-5.2.7.RELEASE.jar extracting: temp/WEB-INF/lib/jul-to-slf4j-1.7.30.jar extracting: temp/WEB-INF/lib/spring-boot-starter-2.3.1.RELEASE.jar extracting: temp/WEB-INF/lib/spring-webmvc-5.2.7.RELEASE.jar creating: temp/WEB-INF/lib-provided/ extracting: temp/WEB-INF/lib-provided/spring-boot-loader-2.3.1.RELEASE.jar \u4f7f\u7528tree\u89c2\u5bdf\u76ee\u5f55\u7ed3\u6784\uff1a $ cd temp $ tree . \u251c\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 deep-in-spring-boot \u2502 \u2514\u2500\u2500 first-spring-boot-application \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2514\u2500\u2500 App.class \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u251c\u2500\u2500 jackson-annotations-2.11.0.jar \u2502 \u2502 \u251c\u2500\u2500 (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) \u2502 \u2502 \u2514\u2500\u2500 tomcat-embed-websocket-9.0.36.jar \u2502 \u2514\u2500\u2500 lib-provided \u2502 \u2514\u2500\u2500 spring-boot-loader-2.3.1.RELEASE.jar \u2514\u2500\u2500 org \u2514\u2500\u2500 springframework \u2514\u2500\u2500 boot \u2514\u2500\u2500 loader \u251c\u2500\u2500 ClassPathIndexFile.class \u251c\u2500\u2500 ExecutableArchiveLauncher.class \u251c\u2500\u2500 JarLauncher.class \u251c\u2500\u2500 (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) \u251c\u2500\u2500 WarLauncher.class \u251c\u2500\u2500 (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) 21 directories, 99 files \u76f8\u6bd4JAR\u7684\u89e3\u538b\u76ee\u5f55\uff0cWAR\u589e\u52a0\u4e86 /WEB-INF/lib-provided/ \uff0c\u5e76\u4e14\u8be5\u76ee\u5f55\u4e0b\u4ec5\u6709\u4e00\u4e2aJAR\u6587\u4ef6\uff0c\u5c31\u662f spring-boot-loader-2.3.1.RELEASE.jar \uff0c\u4e5f\u5c31\u662f\u8be5\u76ee\u5f55\u4e0b\u5b58\u653e\u4e86 scope \u4e3a provided \u7684JAR\u6587\u4ef6\u3002 \u56e0\u4e3a\u4f20\u7edf Servlet \u9879\u76ee\u5e76\u4e0d\u9700\u8981\u8fd9\u4e2a\u76ee\u5f55\uff0c\u90a3\u4e48 /WEB-INF/lib-provided/ \u4e2d\u7684JAR\u5c06\u88ab Servlet \u5bb9\u5668\u5ffd\u7565\uff0c\u53c8\u6bd4\u5982Servlet API\uff0c\u8be5API\u7531\u5bb9\u5668\u63d0\u4f9b\uff0c\u4f46\u7f16\u7801\u65f6\u9700\u8981\u3002\u8fd9\u6837\u8bbe\u8ba1\u7684\u597d\u5904\u5728\u4e8eWAR\u6587\u4ef6\u80fd\u591f\u5728 Servlet \u5bb9\u5668\u4e2d\u517c\u5bb9\u8fd0\u884c\u3002 \u67e5\u770b META-INF/MANIFEST.MF \u7684\u5185\u5bb9\uff1a $ cat META-INF/MANIFEST.MF Manifest-Version: 1.0 Implementation-Title: first-spring-boot-application Implementation-Version: 1.0.0-SNAPSHOT Start-Class: deep.in.spring.boot.App Spring-Boot-Classes: WEB-INF/classes/ Spring-Boot-Lib: WEB-INF/lib/ Build-Jdk-Spec: 1.8 Spring-Boot-Version: 2.3.1.RELEASE Created-By: Maven Archiver 3.4.0 Implementation-Vendor: Pivotal Software, Inc. Main-Class: org.springframework.boot.loader.WarLauncher \u66f4\u6539\u4e3a war \u65b9\u5f0f\u6253\u5305\u540e\uff0c Main-Class \u5c31\u662f org.springframework.boot.loader.WarLauncher \u4e86\uff0c\u800c Start-Class \u4ecd\u7136\u4e0d\u53d8\u3002\u65e2\u7136\u662f WarLauncher \u4e3a\u4e3b\u5f15\u5bfc\u7c7b\uff0c\u90a3\u4e48\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528 java -jar \u547d\u4ee4\u6765\u542f\u52a8\uff1a $ java -jar first-spring-boot-application-1.0.0-SNAPSHOT.war . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.1.RELEASE) 2020-08-04 00:34:25.529 INFO 35990 --- [ main] deep.in.spring.boot.App : Starting App v1.0.0-SNAPSHOT on nanleis-MacBook-Pro.local with PID 35990 (/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT.war started by nanlei in /Users/nanlei/Dev/Workspace/first-spring-boot-application/target) 2020-08-04 00:34:25.532 INFO 35990 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-04 00:34:26.576 INFO 35990 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-04 00:34:26.589 INFO 35990 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-04 00:34:26.589 INFO 35990 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.36] 2020-08-04 00:34:27.039 INFO 35990 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-04 00:34:27.040 INFO 35990 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1449 ms 2020-08-04 00:34:27.220 INFO 35990 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-04 00:34:27.473 INFO 35990 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-04 00:34:27.487 INFO 35990 --- [ main] deep.in.spring.boot.App : Started App in 2.373 seconds (JVM running for 2.815) \u7531\u6b64\u53ef\u89c1\uff0c\u6253\u5305WAR\u6587\u4ef6\u662f\u4e00\u79cd\u517c\u5bb9\u63aa\u65bd\uff0c\u65e2\u80fd\u88ab WarLauncher \u542f\u52a8\uff0c\u4e5f\u80fd\u517c\u5bb9 Servlet \u5bb9\u5668\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c JarLauncher \u548c WarLauncher \u5e76\u65e0\u672c\u8d28\u5dee\u522b\u3002","title":"7. WarLauncher\u7684\u5dee\u5f02"},{"location":"SpringBoot/02-spring-boot-maven-dependency/","text":"02 - \u56fa\u5316\u7684Maven\u4f9d\u8d56 \u4e4b\u524d\u5df2\u7ecf\u4f7f\u7528\u7684 org.springframework.boot:spring-boot-starter-web \u548c org.springframework.boot:spring-boot-loader \u5747\u7ee7\u627f\u81ea org.springframework.boot:spring-boot-starter-parent \uff0c\u6bd4\u5982\u7248\u672c\u4fe1\u606f\uff0c\u8fd9\u4e9b\u662fMaven\u4f9d\u8d56\u7ba1\u7406\u7684\u8303\u7574\uff0c\u964d\u4f4e\u4e86Spring Boot\u4f9d\u8d56\u7ba1\u7406\u7684\u6210\u672c\u3002 \u800c\u914d\u7f6e org.springframework.boot:spring-boot-starter-parent \u4e5f\u5b58\u5728\u4e00\u5b9a\u7684\u9650\u5236\uff0c\u56e0\u4e3a\u662f\u5355\u7ee7\u627f\u65b9\u5f0f\uff0c\u9650\u5236\u4e86\u5176\u4f9d\u8d56\u4ec5\u662fSpring Boot\u76f8\u5173\u3002\u82e5\u8981\u9700\u8981\u56fa\u5316\u5176\u4ed6\u7c7b\u578b\u7684\u4f9d\u8d56\u5c31\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6216\u8005\u5e94\u7528\u7684 pom.xml \u6709\u81ea\u5b9a\u4e49\u7684parent\u3002 \u5728 \u5b98\u65b9\u6587\u6863 \u4e2d\uff0c\u4ecb\u7ecd\u4e86\u76f8\u5173\u5185\u5bb9\uff1a Using Spring Boot without the Parent POM There may be reasons for you not to inherit from the spring-boot-starter-parent POM. You may have your own corporate standard parent that you need to use or you may prefer to explicitly declare all your Maven configuration. If you do not want to use the spring-boot-starter-parent , you can still keep the benefit of the dependency management (but not the plugin management) by using an import scoped dependency, as follows: <dependencyManagement> <dependencies> <dependency> <!-- Import dependency management from Spring Boot --> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-dependencies </artifactId> <version> 2.3.2.RELEASE </version> <type> pom </type> <scope> import </scope> </dependency> </dependencies> </dependencyManagement> \u5bf9\u793a\u4f8b\u9879\u76ee\u4f5c\u51fa\u8c03\u6574\uff0c\u4fee\u6539 pom.xml \u6587\u4ef6\uff1a <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> deep-in-spring-boot </groupId> <artifactId> first-spring-boot-application </artifactId> <packaging> war </packaging> <version> 1.0.0-SNAPSHOT </version> <name> first-spring-boot-application </name> <!-- <parent>--> <!-- <groupId>org.springframework.boot</groupId>--> <!-- <artifactId>spring-boot-starter-parent</artifactId>--> <!-- <version>2.3.2.RELEASE</version>--> <!-- </parent>--> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> 2.3.2.RELEASE </version> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 3.8.1 </version> <scope> test </scope> </dependency> <!-- spring-boot-loader \u5206\u6790 --> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-loader </artifactId> <scope> provided </scope> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <!-- Import dependency management from Spring Boot --> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-dependencies </artifactId> <version> 2.3.2.RELEASE </version> <type> pom </type> <scope> import </scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> </project> \u53bb\u6389 <parent> \u5143\u7d20\uff0c\u6dfb\u52a0\u4e86 spring-boot-dependencies \uff0c\u4e4b\u540e\u91cd\u65b0\u6253\u5305\uff1a $ mvn clean package [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ first-spring-boot-application --- [INFO] Deleting /Users/nanlei/Dev/Workspace/first-spring-boot-application/target [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ first-spring-boot-application --- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent! [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ first-spring-boot-application --- [INFO] Changes detected - recompiling the module! [WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/classes [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ first-spring-boot-application --- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent! [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ first-spring-boot-application --- [INFO] Changes detected - recompiling the module! [WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/test-classes [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ first-spring-boot-application --- [INFO] Surefire report directory: /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/surefire-reports ------------------------------------------------------- T E S T S ------------------------------------------------------- Running deep.in.spring.boot.AppTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec Results : Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] --- maven-war-plugin:2.2:war (default-war) @ first-spring-boot-application --- [INFO] Packaging webapp [INFO] Assembling webapp [first-spring-boot-application] in [/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT] [INFO] Processing war project [INFO] Webapp assembled in [133 msecs] [INFO] Building war: /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT.war [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.686 s [INFO] Finished at: 2020-08-04T11:11:26+08:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-war-plugin:2.2:war (default-war) on project first-spring-boot-application: Error assembling WAR: webxml attribute is required (or pre-existing WEB-INF/web.xml if executing in update mode) -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException \u6253\u5305\u5931\u8d25\u4e86\uff0c\u9519\u8bef\u539f\u56e0\u662fweb\u5e94\u7528\u7684\u90e8\u7f72\u63cf\u8ff0\u6587\u4ef6 WEB-INF/web.xml \u5728\u9879\u76ee\u4e2d\u5e76\u4e0d\u5b58\u5728\uff0c\u5f53\u8bbe\u7f6e pom.xml \u7684 <packaging>war</packaging> \u65f6\uff0cMaven\u4f1a\u6267\u884c maven-war-plugin:2.2 \uff0c WEB-INF/web.xml \u5c31\u662f\u5fc5\u987b\u7684\u3002\u4f46\u662f\uff0c\u5728\u4f5c\u51fa\u8c03\u6574\u4e4b\u524d\u5374\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u5728 spring-boot-dependencies \u548c spring-boot-starter-parent \u7684\u5dee\u522b\u4e4b\u4e2d\u3002 \u67e5\u770b spring-boot-starter-parent-2.3.2.RELEASE.pom <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-dependencies </artifactId> <version> 2.3.2.RELEASE </version> </parent> <artifactId> spring-boot-starter-parent </artifactId> <packaging> pom </packaging> <name> spring-boot-starter-parent </name> <description> Parent pom providing dependency and plugin management for applications built with Maven </description> ... </project> \u53ef\u4ee5\u770b\u51fa spring-boot-dependencies \u662f spring-boot-starter-parent \u7684 parent \uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u5c06 spring-boot-dependencies \u76f4\u63a5\u4f5c\u4e3a parent \u3002 \u67e5\u770b spring-boot-dependencies-2.3.2.RELEASE.pom \uff0c\u53ef\u4ee5\u770b\u5230 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" > <modelVersion> 4.0.0 </modelVersion> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-dependencies </artifactId> <version> 2.3.2.RELEASE </version> <packaging> pom </packaging> <name> spring-boot-dependencies </name> <description> Spring Boot Dependencies </description> ... <properties> ... <spring-boot.version> 2.3.2.RELEASE </spring-boot.version> ... <maven-war-plugin.version> 3.2.3 </maven-war-plugin.version> ... </properties> <dependencyManagement> ... <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> ${spring-boot.version} </version> </dependency> ... </dependencyManagement> <build> <pluginManagement> <plugins> ... <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-war-plugin </artifactId> <version> ${maven-war-plugin.version} </version> </plugin> ... </plugins> </pluginManagement> </build> </project> \u65e0\u8bba\u662fSpring Boot\u7684\u4f9d\u8d56 spring-boot-starter-web \u7b49\uff0c\u8fd8\u662f\u63d2\u4ef6 maven-war-plugin \u7b49\uff0c\u5747\u5b9a\u4e49\u5728\u6b64\u5904\u3002\u5f53\u9879\u76ee pom.xml \u6587\u4ef6\u7528 <parent> \u65b9\u5f0f\u5f15\u5165 spring-boot-starter-parent \u65f6\uff0c mvn package \u5c06\u4f7f\u7528 maven-war-plugin:3.2.3 \u548c spring-boot-maven-plugin:2.3.2.RELEASE \u3002 \u76f8\u53cd\uff0c <dependencyManagement> \u65b9\u5f0f\u5bfc\u5165 spring-boot-dependencies \u5c3d\u7ba1\u548c\u524d\u8005\u76f8\u540c\uff0c\u4f46\u6b64\u65f6\u4ec5\u5173\u6ce8 <dependencyManagement> \uff0c\u6240\u4ee5 maven-war-plugin \u91c7\u7528\u7684\u7248\u672c\u662f2.2\uff0c\u624b\u52a8\u6dfb\u52a0 maven-war-plugin:3.2.3 \u5230\u9879\u76ee pom.xml \u4e2d\uff1a <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > ... <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> 2.3.2.RELEASE </version> </plugin> <!-- \u4fdd\u6301\u548cspring-boot-dependencies\u7248\u672c\u4e00\u81f4 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-war-plugin </artifactId> <version> 3.2.3 </version> </plugin> </plugins> </build> </project> \u518d\u6b21\u6267\u884c\u6253\u5305\uff1a $ mvn clean package [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ first-spring-boot-application --- [INFO] Deleting /Users/nanlei/Dev/Workspace/first-spring-boot-application/target [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ first-spring-boot-application --- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent! [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/main/resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ first-spring-boot-application --- [INFO] Changes detected - recompiling the module! [WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/classes [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ first-spring-boot-application --- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent! [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Workspace/first-spring-boot-application/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ first-spring-boot-application --- [INFO] Changes detected - recompiling the module! [WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/test-classes [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ first-spring-boot-application --- [INFO] Surefire report directory: /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/surefire-reports ------------------------------------------------------- T E S T S ------------------------------------------------------- Running deep.in.spring.boot.AppTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec Results : Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] --- maven-war-plugin:3.2.3:war (default-war) @ first-spring-boot-application --- [INFO] Packaging webapp [INFO] Assembling webapp [first-spring-boot-application] in [/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT] [INFO] Processing war project [INFO] Webapp assembled in [110 msecs] [INFO] Building war: /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT.war [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.441 s [INFO] Finished at: 2020-08-04T13:40:35+08:00 [INFO] ------------------------------------------------------------------------ \u6b64\u65f6\u6253\u5305\u53ef\u4ee5\u6210\u529f\uff0c\u542f\u52a8\u7a0b\u5e8f\uff1a $ java -jar target/first-spring-boot-application-1.0.0-SNAPSHOT.war no main manifest attribute, in target/first-spring-boot-application-1.0.0-SNAPSHOT.war \u6ca1\u6709\u53d1\u73b0 MANIFEST.MF \uff0c\u8bf4\u660e spring-boot-maven-plugin \u6ca1\u6709\u6267\u884c\uff0c\u5b98\u65b9\u6587\u6863\u5bf9\u6b64\u6709\u8be6\u7ec6\u8bf4\u660e\uff1a Create an Executable JAR with Maven The spring-boot-maven-plugin can be used to create an executable \u201cfat\u201d JAR. If you use the spring-boot-starter-parent POM, you can declare the plugin and your jars are repackaged as follows: <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> If you do not use the parent POM, you can still use the plugin. However, you must additionally add an <executions> section, as follows: <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> 2.3.2.RELEASE </version> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> </executions> </plugin> </plugins> </build> \u5bf9 pring-boot-maven-plugin \u8bbe\u7f6e execution \u7684 goal \u4e3a repackage \u540e\uff0c\u518d\u6b21\u6253\u5305\uff1a $ mvn clean package [INFO] Scanning for projects... (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) [INFO] --- maven-war-plugin:3.2.3:war (default-war) @ first-spring-boot-application --- [INFO] Packaging webapp [INFO] Assembling webapp [first-spring-boot-application] in [/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT] [INFO] Processing war project [INFO] Webapp assembled in [116 msecs] [INFO] Building war: /Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT.war [INFO] [INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:repackage (default) @ first-spring-boot-application --- [INFO] Replacing main artifact with repackaged archive [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.028 s [INFO] Finished at: 2020-08-04T13:56:06+08:00 [INFO] ------------------------------------------------------------------------ Maven\u65e5\u5fd7\u4e2d\u663e\u793a\u4e86 spring-boot-maven-plugin:2.3.2.RELEASE \u63d2\u4ef6\u7684\u6267\u884c\u4fe1\u606f\uff0c\u518d\u6b21\u542f\u52a8\u7a0b\u5e8f\uff1a $ java -jar target/first-spring-boot-application-1.0.0-SNAPSHOT.war . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-04 13:58:03.282 INFO 4253 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 4253 (/Users/nanlei/Dev/Workspace/first-spring-boot-application/target/first-spring-boot-application-1.0.0-SNAPSHOT.war started by nanlei in /Users/nanlei/Dev/Workspace/first-spring-boot-application) 2020-08-04 13:58:03.285 INFO 4253 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-04 13:58:04.239 INFO 4253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-04 13:58:04.251 INFO 4253 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-04 13:58:04.251 INFO 4253 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.37] 2020-08-04 13:58:04.682 INFO 4253 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-04 13:58:04.682 INFO 4253 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1342 ms 2020-08-04 13:58:04.843 INFO 4253 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-04 13:58:05.092 INFO 4253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-04 13:58:05.105 INFO 4253 --- [ main] deep.in.spring.boot.App : Started App in 2.212 seconds (JVM running for 2.633) \u81f3\u6b64\u9879\u76ee\u53ef\u4ee5\u6b63\u5e38\u542f\u52a8\u4e86\uff0c\u5728\u8c03\u6574\u4f9d\u8d56\u914d\u7f6e\u7684\u8fc7\u7a0b\u4e2d( <parent> \u65b9\u5f0f\u5230 <dependencyManagement> \u65b9\u5f0f)\uff0c\u9047\u5230\u4e86\u5982\u4e0b\u95ee\u9898\uff1a maven-war-plugin \u63d2\u4ef6\u5728\u7248\u672c\u4e0a\u7684\u5dee\u5f02 2.2 \u7248\u672c\u9ed8\u8ba4\u7684\u6253\u5305\u89c4\u5219\u662f\u5fc5\u987b\u5b58\u5728Web\u5e94\u7528\u90e8\u7f72\u63cf\u8ff0\u6587\u4ef6 WEB-INF/web.xml 3.2.3 \u7248\u672c\u4e2d\u5219\u8c03\u6574\u4e86\u8be5\u884c\u4e3a spring-boot-maven-plugin \u63d2\u4ef6\u5728\u4f7f\u7528\u65f6\u6ce8\u610f\u6dfb\u52a0 repackage \u7684 goal \uff0c\u5426\u5219\u53ef\u80fd\u4e0d\u4f1a\u6dfb\u52a0Spring Boot\u7684\u5f15\u5bfc\u4f9d\u8d56\uff0c\u4ece\u800c\u65e0\u6cd5\u542f\u52a8\u7a0b\u5e8f \u51fa\u4e8e\u4e60\u60ef\uff0c\u901a\u5e38\u4e0d\u5c06 spring-boot-dependencies \u76f4\u63a5\u4f5c\u4e3a <parent> \uff0c\u5c3d\u7ba1 spring-boot-starter-parent \u4e5f\u53ea\u662f\u7b80\u5355\u7ee7\u627f\u4e86 spring-boot-dependencies","title":"Maven Dependencies"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/","text":"03 - \u5d4c\u5165\u5f0fWeb\u5bb9\u5668 \u5d4c\u5165\u5f0fServlet Web\u5bb9\u5668 \u00b6 \u4ece\u4e4b\u524d\u9879\u76ee\u542f\u52a8\u7684\u65e5\u5fd7\u4e2d\uff0c\u603b\u80fd\u770b\u5230\u4e00\u884c\uff1a [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' \u8bf4\u660e\u9879\u76ee\u4f7f\u7528\u7684Web\u5bb9\u5668\u662fTomcat\uff0c\u800c\u5728 pom.xml \u4e2d\u6ca1\u6709\u76f4\u63a5\u5f15\u5165\u76f8\u5173\u4f9d\u8d56\uff0c\u800c\u5728WAR\u5305\u7684\u89e3\u538b\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230 WEB-INF/lib/spring-boot-starter-tomcat-2.3.2.RELEASE.jar \u7684\u5b58\u5728\uff0c\u8bf4\u660e\u8be5JAR\u6587\u4ef6\u5e94\u8be5\u7531 spring-boot-starter-web \u95f4\u63a5\u5f15\u5165\uff0c\u4f7f\u7528Maven\u7684 dependency \u63d2\u4ef6\u53ef\u4ee5\u770b\u5230\u4f9d\u8d56\u5173\u7cfb\uff1a $ mvn dependency:tree -Dincludes=*:spring-boot-starter-tomcat:jar:2.3.2.RELEASE [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ first-spring-boot-application --- [INFO] deep-in-spring-boot:first-spring-boot-application:war:1.0.0-SNAPSHOT [INFO] \\- org.springframework.boot:spring-boot-starter-web:jar:2.3.2.RELEASE:compile [INFO] \\- org.springframework.boot:spring-boot-starter-tomcat:jar:2.3.2.RELEASE:compile [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.107 s [INFO] Finished at: 2020-08-04T14:47:52+08:00 [INFO] ------------------------------------------------------------------------ \u5728 Spring Boot\u5b98\u65b9\u7f51\u7ad9 \uff0c\u4ecb\u7ecdSpring Boot\u7684\u7279\u6027\u65f6\uff0c\u6709\u5982\u4e0b\u5185\u5bb9 Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) \u793a\u4f8b\u9879\u76ee\u90fd\u662f Servlet Web\u7a0b\u5e8f\uff0cSpring Boot\u51c6\u5907\u4e863\u79cd\u5d4c\u5165\u5f0fWeb\u5bb9\u5668\uff0c\u5206\u522b\u662f Tomcat \uff0c Jetty \u548c Undertow \u3002 \u5728\u5b98\u65b9\u6587\u6863\u4e2d\uff0c\u5bf93\u79cdServlet\u5bb9\u5668\u7684\u76f8\u5173\u4ecb\u7ecd\uff1a Spring Boot supports the following embedded servlet containers: Name Servlet Version Tomcat 9.0 4.0 Jetty 9.4 3.1 Undertow 2.0 4.0 You can also deploy Spring Boot applications to any Servlet 3.1+ compatible container. 1. Tomcat\u4f5c\u4e3a\u5d4c\u5165\u5f0fServlet Web\u5bb9\u5668 \u00b6 \u5d4c\u5165\u5f0fTomcat\u4f5c\u4e3aWeb\u5e94\u7528\u7684\u4e00\u90e8\u5206\uff0c\u7ed3\u5408\u5176API\u5b9e\u73b0Servlet\u5bb9\u5668\u7684\u5f15\u5bfc\u3002\u540c\u6837\uff0cTomcat\u4e5f\u63d0\u4f9b\u4e86Maven\u63d2\u4ef6\uff0c\u4e0d\u9700\u8981\u7f16\u7801\uff0c\u4e5f\u4e0d\u9700\u8981\u5916\u7f6eTomcat\u5bb9\u5668\uff0c\u5c06\u5f53\u524d\u5e94\u7528\u76f4\u63a5\u6253\u5305\u4e3a\u53ef\u8fd0\u884c\u7684JAR\u6216WAR\u6587\u4ef6\uff0c\u901a\u8fc7 java -jar \u547d\u4ee4\u542f\u52a8\u3002 \u65b0\u5efa\u9879\u76ee servlet-sample \uff0c\u7ed3\u6784\u5982\u4e0b\uff1a $ tree . . \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2514\u2500\u2500 servlet \u2502 \u2502 \u2514\u2500\u2500 HelloServlet.java \u2502 \u251c\u2500\u2500 resources \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 web.xml \u2514\u2500\u2500 test \u2514\u2500\u2500 java 13 directories, 3 files \u4f20\u7edf\u7684Java Web\u9879\u76ee\uff0c\u9700\u8981\u5728web\u6839\u8def\u5f84\u4e0b\u6709 WEB-INF/web.xml \u6587\u4ef6\u5b58\u5728\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation= \"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version= \"3.0\" > <servlet> <!-- Servlet \u58f0\u660e --> <servlet-name> HelloServlet </servlet-name> <servlet-class> deep.in.spring.boot.servlet.HelloServlet </servlet-class> <init-param> <param-name> init-param1 </param-name> <param-value> param1 </param-value> </init-param> </servlet> <!-- \u58f0\u660e Servlet \u6620\u5c04 --> <servlet-mapping> <!-- \u5173\u8054 Servlet--> <servlet-name> HelloServlet </servlet-name> <url-pattern> /hello </url-pattern> </servlet-mapping> </web-app> \u58f0\u660e\u4e86\u4e00\u4e2aServlet\uff0c\u5e76\u914d\u7f6e\u4e00\u5bf9\u521d\u59cb\u5316\u53c2\u6570\uff0c\u540c\u65f6\u58f0\u660e\u8be5Servlet\u7684\u6620\u5c04\u5730\u5740\uff0c\u7f16\u5199Servlet\u7c7b\uff1a public class HelloServlet extends HttpServlet { @Override public void init ( ServletConfig servletConfig ) { Collections . list ( servletConfig . getInitParameterNames ()) . forEach ( name -> { System . out . println ( \"Init param name : \" + name + \" , value : \" + servletConfig . getInitParameter ( name )); }); } /** * \u8f93\u51fa HTTP \u8bf7\u6c42\u53c2\u6570 \"messsage\" \u7684\u5185\u5bb9\uff08\u652f\u6301\u4efb\u610f HTTP \u65b9\u6cd5\uff09 * * @param request {@link HttpServletRequest} * @param response {@link HttpServletResponse} * @throws IOException * @throws ServletException */ @Override public void service ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { // \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570 \"message\" \u5185\u5bb9 String message = request . getParameter ( \"message\" ); System . out . println ( \"message : \" + message ); PrintWriter writer = response . getWriter (); // \u8f93\u51fa \"message\" \u53c2\u6570\u5185\u5bb9 writer . println ( message ); writer . flush (); } } \u9879\u76ee\u7684 pom.xml \u4e2d\u5f15\u5165\u76f8\u5173\u4f9d\u8d56\u548c\u63d2\u4ef6\u914d\u7f6e\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> deep-in-spring-boot </groupId> <artifactId> servlet-sample </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> war </packaging> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> </properties> <dependencies> <!-- \u4f7f\u7528 Servlet 3.1 API --> <dependency> <groupId> javax.servlet </groupId> <artifactId> javax.servlet-api </artifactId> <version> 3.1.0 </version> <scope> provided </scope> </dependency> </dependencies> <build> <plugins> <!-- Tomcat 8 Maven \u63d2\u4ef6\u7528\u4e8e\u6784\u5efa\u53ef\u6267\u884c war --> <!-- https://mvnrepository.com/artifact/org.apache.tomcat.maven/tomcat8-maven-plugin --> <plugin> <groupId> org.apache.tomcat.maven </groupId> <artifactId> tomcat8-maven-plugin </artifactId> <version> 3.0-r1655215 </version> <executions> <execution> <id> tomcat-run </id> <goals> <!-- \u6700\u7ec8\u6253\u5305\u6210\u53ef\u6267\u884c\u7684jar\u5305 --> <goal> exec-war-only </goal> </goals> <phase> package </phase> <configuration> <!-- ServletContext \u8def\u5f84 --> <path> / </path> </configuration> </execution> </executions> </plugin> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <configuration> <source> 8 </source> <target> 8 </target> </configuration> </plugin> </plugins> </build> <pluginRepositories> <pluginRepository> <!-- tomcat8-maven-plugin \u6240\u5728\u4ed3\u5e93 --> <id> Alfresco </id> <name> Alfresco Repository </name> <url> https://artifacts.alfresco.com/nexus/content/repositories/public/ </url> <snapshots> <enabled> false </enabled> </snapshots> </pluginRepository> </pluginRepositories> </project> \u51c6\u5907\u597d\u6240\u9700\u5185\u5bb9\u540e\u76f4\u63a5\u6267\u884c\u6253\u5305\uff1a $ mvn clean package [INFO] Scanning for projects... [INFO] [INFO] -----------------< deep-in-spring-boot:servlet-sample >----------------- [INFO] Building servlet-sample 1.0.0-SNAPSHOT [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ servlet-sample --- [INFO] Deleting /Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/target [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ servlet-sample --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 0 resource [INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ servlet-sample --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/target/classes [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ servlet-sample --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ servlet-sample --- [INFO] Changes detected - recompiling the module! [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ servlet-sample --- [INFO] [INFO] --- maven-war-plugin:2.2:war (default-war) @ servlet-sample --- [INFO] Packaging webapp [INFO] Assembling webapp [servlet-sample] in [/Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/target/servlet-sample-1.0.0-SNAPSHOT] [INFO] Processing war project [INFO] Copying webapp resources [/Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/src/main/webapp] [INFO] Webapp assembled in [26 msecs] [INFO] Building war: /Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/target/servlet-sample-1.0.0-SNAPSHOT.war [INFO] WEB-INF/web.xml already added, skipping [INFO] [INFO] --- tomcat8-maven-plugin:3.0-r1655215:exec-war-only (tomcat-run) @ servlet-sample --- [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.817 s [INFO] Finished at: 2020-08-06T14:47:16+08:00 [INFO] ------------------------------------------------------------------------ \u6253\u5305\u5b8c\u6210\uff0c\u4f7f\u7528 java -jar \u547d\u4ee4\u8fd0\u884c\uff1a $ cd target $ java -jar servlet-sample-1.0.0-SNAPSHOT-war-exec.jar Aug 06, 2020 2:50:17 PM org.apache.coyote.http11.Http11NioProtocol init INFO: Initializing ProtocolHandler [\"http-nio-8080\"] Aug 06, 2020 2:50:17 PM org.apache.tomcat.util.net.NioSelectorPool getSharedSelector INFO: Using a shared selector for servlet write/read Aug 06, 2020 2:50:17 PM org.apache.catalina.core.StandardService startInternal INFO: Starting service Tomcat Aug 06, 2020 2:50:17 PM org.apache.catalina.core.StandardEngine startInternal INFO: Starting Servlet Engine: Apache Tomcat/8.0.14 Aug 06, 2020 2:50:18 PM org.apache.jasper.servlet.TldScanner scanJars INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time. Aug 06, 2020 2:50:18 PM org.apache.coyote.http11.Http11NioProtocol start INFO: Starting ProtocolHandler [\"http-nio-8080\"] \u6d4b\u8bd5HTTP\u670d\u52a1\uff1a $ curl http://127.0.0.1:8080/hello?message=helloworld helloworld \u540c\u65f6\u53ef\u4ee5\u770b\u5230\u547d\u4ee4\u884c\u8f93\u51fa\uff1a Init param name : init-param1 , value : param1 message : helloworld \u6b64\u65f6\u5728target\u76ee\u5f55\u4e0b\u51fa\u73b0\u89e3\u538b\u7684 .extract \u76ee\u5f55\uff0c\u89c2\u5bdf\u7ed3\u6784\uff1a $ tree .extract/ .extract/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 web.xml \u251c\u2500\u2500 logs \u2502 \u2514\u2500\u2500 access_log.2020-08-06 \u251c\u2500\u2500 temp \u251c\u2500\u2500 webapps \u2502 \u251c\u2500\u2500 ROOT \u2502 \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2502 \u2514\u2500\u2500 deep-in-spring-boot \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlet-sample \u2502 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlet \u2502 \u2502 \u2502 \u2514\u2500\u2500 HelloServlet.class \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 ROOT.war \u2514\u2500\u2500 work \u2514\u2500\u2500 Tomcat \u2514\u2500\u2500 localhost \u2514\u2500\u2500 ROOT 20 directories, 8 files \u7531\u6b64\u53ef\u89c1\uff0cTomcat Maven\u63d2\u4ef6\u5e76\u975e\u5d4c\u5165\u5f0fTomcat\uff0c\u4ecd\u4e3a\u4f20\u7edfTomcat\u5bb9\u5668\u90e8\u7f72\u65b9\u5f0f\uff0c\u5c06\u5e94\u7528\u6253\u5305\u4e3a ROOT.war \uff0c\u7136\u540e\u5728Tomcat\u542f\u52a8\u8fc7\u7a0b\u4e2d\u5c06 ROOT.war \u90e8\u7f72\u5230 webapps \u76ee\u5f55\uff0c\u4f46\u8be5\u63d2\u4ef6\u652f\u6301\u6307\u5b9a ServletContext \u8def\u5f84\u3002 Spring Boot\u4f7f\u7528\u5d4c\u5165\u5f0fTomcat\u6784\u5efa\u4e3a TomcatWebServer Bean\uff0c\u7531Spring\u4e0a\u4e0b\u6587\u5c06\u5176\u5f15\u5bfc\uff0c\u5d4c\u5165\u5f0f\u7ec4\u4ef6\u7684\u8fd0\u884c\uff0c ClassLoader \u7684\u88c5\u8f7d\u5747\u7531Spring Boot\u6846\u67b6\u5b8c\u6210\u3002 Tomcat Maven\u63d2\u4ef6\u6253\u5305\u540e\u7684JAR\u6216WAR\u5c5e\u4e8e\u975eFAT\u6a21\u5f0f\uff0c\u5f52\u6863\u6587\u4ef6\u4f1a\u88ab\u538b\u7f29\uff0c\u800cSpring Boot Maven\u63d2\u4ef6 spring-boot-maven-plugin \u4f7f\u7528\u96f6\u538b\u7f29\u6a21\u5f0f\uff0c\u5c06\u5e94\u7528\u5f52\u6863\u5230JAR\u6216WAR\u5305\u4e2d\uff0c\u5728jar\u547d\u4ee4\u5e2e\u52a9\u4e2d\u6709\u4ecb\u7ecd\uff1a $ jar Usage: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ... Options: -c create new archive -t list table of contents for archive -x extract named (or all) files from archive -u update existing archive -v generate verbose output on standard output -f specify archive file name -m include manifest information from specified manifest file -n perform Pack200 normalization after creating a new archive -e specify application entry point for stand-alone application bundled into an executable jar file -0 store only; use no ZIP compression -P preserve leading '/' (absolute path) and \"..\" (parent directory) components from file names -M do not create a manifest file for the entries -i generate index information for the specified jar files -C change to the specified directory and include the following file If any file is a directory then it is processed recursively. The manifest file name, the archive file name and the entry point name are specified in the same order as the 'm', 'f' and 'e' flags. Example 1: to archive two class files into an archive called classes.jar: jar cvf classes.jar Foo.class Bar.class Example 2: use an existing manifest file 'mymanifest' and archive all the files in the foo/ directory into 'classes.jar': jar cvfm classes.jar mymanifest -C foo/ . \u4f20\u7edfServlet\u5bb9\u5668\u5c06\u538b\u7f29\u7684WAR\u6587\u4ef6\u89e3\u538b\u5230\u5bf9\u5e94\u76ee\u5f55\uff0c\u518d\u52a0\u8f7d\u8be5\u76ee\u5f55\u4e2d\u7684\u8d44\u6e90\u3002\u800cSpring Boot\u7684\u53ef\u6267\u884cWAR\u6587\u4ef6\u9700\u8981\u5728\u4e0d\u89e3\u538b\u7684\u524d\u63d0\u4e0b\u8bfb\u53d6\u5176\u4e2d\u8d44\u6e90\uff0c\u4e5f\u5c31\u662f spring-boot-loader \u9700\u8981\u8986\u76d6\u5185\u5efaJAR\u534f\u8bae\u7684URLStreamHandler\u7684\u539f\u56e0\u6240\u5728\u3002 2. Jetty\u4f5c\u4e3a\u5d4c\u5165\u5f0fServlet Web\u5bb9\u5668 \u00b6 \u5c06\u9ed8\u8ba4\u7684\u5d4c\u5165\u5f0f\u5bb9\u5668Tomact\u5207\u6362\u81f3Jetty\u7684\u6b65\u9aa4\u975e\u5e38\u7b80\u5355\uff0c\u5b98\u65b9\u6587\u6863\u5bf9\u6b64\u6709\u8be6\u7ec6\u8bf4\u660e\uff1a Use Another Web Server Many Spring Boot starters include default embedded containers. For servlet stack applications, the spring-boot-starter-web includes Tomcat by including spring-boot-starter-tomcat , but you can use spring-boot-starter-jetty or spring-boot-starter-undertow instead. For reactive stack applications, the spring-boot-starter-webflux includes Reactor Netty by including spring-boot-starter-reactor-netty , but you can use spring-boot-starter-tomcat , spring-boot-starter-jetty , or spring-boot-starter-undertow instead. When switching to a different HTTP server, you need to exclude the default dependencies in addition to including the one you need. To help with this process, Spring Boot provides a separate starter for each of the supported HTTP servers. The following Maven example shows how to exclude Tomcat and include Jetty for Spring MVC: <properties> <servlet-api.version> 3.1.0 </servlet-api.version> </properties> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <!-- Exclude the Tomcat dependency --> <exclusion> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-tomcat </artifactId> </exclusion> </exclusions> </dependency> <!-- Use Jetty instead --> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-jetty </artifactId> </dependency> The version of the Servlet API has been overridden as, unlike Tomcat 9 and Undertow 2.0, Jetty 9.4 does not support Servlet 4.0. \u6839\u636e\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u660e\uff0c\u65b0\u5efa\u9879\u76ee embedded-web-server \u3002\u524d\u9762\u5206\u6790\u8fc7 spring-boot-starter-tomcat \u4e3a spring-boot-starter-web \u95f4\u63a5\u5f15\u5165\uff0c\u6240\u4ee5\u5728\u4f9d\u8d56\u4e2d\u9700\u8981\u6392\u9664\uff0c\u518d\u6dfb\u52a0\u65b0\u7684Jetty\u4f9d\u8d56 spring-boot-starter-jetty \u5373\u53ef\u3002 \u8fd0\u884c\u9879\u76ee\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) [INFO] <<< spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) < test-compile @ first-spring-boot-application <<< [INFO] [INFO] [INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) @ first-spring-boot-application --- [INFO] Attaching agents: [] . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-06 17:50:22.470 INFO 8185 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 8185 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application) 2020-08-06 17:50:22.472 INFO 8185 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-06 17:50:22.916 INFO 8185 --- [ main] org.eclipse.jetty.util.log : Logging initialized @947ms to org.eclipse.jetty.util.log.Slf4jLog 2020-08-06 17:50:23.023 INFO 8185 --- [ main] o.s.b.w.e.j.JettyServletWebServerFactory : Server initialized with port: 8080 2020-08-06 17:50:23.024 INFO 8185 --- [ main] org.eclipse.jetty.server.Server : jetty-9.4.30.v20200611; built: 2020-06-11T12:34:51.929Z; git: 271836e4c1f4612f12b7bb13ef5a92a927634b0d; jvm 1.8.0_251-b08 2020-08-06 17:50:23.043 INFO 8185 --- [ main] o.e.j.s.h.ContextHandler.application : Initializing Spring embedded WebApplicationContext 2020-08-06 17:50:23.043 INFO 8185 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 531 ms 2020-08-06 17:50:23.111 INFO 8185 --- [ main] org.eclipse.jetty.server.session : DefaultSessionIdManager workerName=node0 2020-08-06 17:50:23.111 INFO 8185 --- [ main] org.eclipse.jetty.server.session : No SessionScavenger set, using defaults 2020-08-06 17:50:23.112 INFO 8185 --- [ main] org.eclipse.jetty.server.session : node0 Scavenging every 660000ms 2020-08-06 17:50:23.118 INFO 8185 --- [ main] o.e.jetty.server.handler.ContextHandler : Started o.s.b.w.e.j.JettyEmbeddedWebAppContext@6c67e137{application,/,[file:///private/var/folders/dy/g2n42jw12y3g6th2pgtz59_c0000gn/T/jetty-docbase.8002049805771173289.8080/],AVAILABLE} 2020-08-06 17:50:23.118 INFO 8185 --- [ main] org.eclipse.jetty.server.Server : Started @1150ms 2020-08-06 17:50:23.214 INFO 8185 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-06 17:50:23.303 INFO 8185 --- [ main] o.e.j.s.h.ContextHandler.application : Initializing Spring DispatcherServlet 'dispatcherServlet' 2020-08-06 17:50:23.303 INFO 8185 --- [ main] o.s.web.servlet.DispatcherServlet : Initializing Servlet 'dispatcherServlet' 2020-08-06 17:50:23.307 INFO 8185 --- [ main] o.s.web.servlet.DispatcherServlet : Completed initialization in 4 ms 2020-08-06 17:50:23.334 INFO 8185 --- [ main] o.e.jetty.server.AbstractConnector : Started ServerConnector@b6b1987{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} 2020-08-06 17:50:23.336 INFO 8185 --- [ main] o.s.b.web.embedded.jetty.JettyWebServer : Jetty started on port(s) 8080 (http/1.1) with context path '/' 2020-08-06 17:50:23.343 INFO 8185 --- [ main] deep.in.spring.boot.App : Started App in 1.098 seconds (JVM running for 1.374) \u9879\u76ee\u6b63\u5e38\u542f\u52a8\uff0c\u4e0d\u540c\u7684\u662f\uff0c\u8fd0\u884c\u5bb9\u5668\u5207\u6362\u5230\u4e86Jetty\uff0c\u5176\u4e2d org.springframework.boot.web.embedded.jetty.JettyWebServer \u5c31\u662fSpring Boot\u7ed3\u5408Jetty API\u5b9e\u73b0\u7684 org.springframework.boot.web.server.WebServer Bean\u3002 3. Undertow\u4f5c\u4e3a\u5d4c\u5165\u5f0fServlet Web\u5bb9\u5668 \u00b6 \u82e5\u5c06Servlet\u5bb9\u5668\u5207\u6362\u5230Undertow\uff0c\u79fb\u9664 spring-boot-starter-tomcat \u4f9d\u8d56\u540e\u518d\u6dfb\u52a0 spring-boot-starter-undertow \u4f9d\u8d56\u5373\u53ef\uff0c\u518d\u6b21\u8fd0\u884c\u9879\u76ee\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) [INFO] <<< spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) < test-compile @ first-spring-boot-application <<< [INFO] [INFO] [INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) @ first-spring-boot-application --- [INFO] Attaching agents: [] . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-06 18:06:05.804 INFO 8332 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 8332 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application) 2020-08-06 18:06:05.806 INFO 8332 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-06 18:06:06.317 WARN 8332 --- [ main] io.undertow.websockets.jsr : UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used 2020-08-06 18:06:06.334 INFO 8332 --- [ main] io.undertow.servlet : Initializing Spring embedded WebApplicationContext 2020-08-06 18:06:06.334 INFO 8332 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 488 ms 2020-08-06 18:06:06.449 INFO 8332 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-06 18:06:06.531 INFO 8332 --- [ main] io.undertow : starting server: Undertow - 2.1.3.Final 2020-08-06 18:06:06.534 INFO 8332 --- [ main] org.xnio : XNIO version 3.8.0.Final 2020-08-06 18:06:06.542 INFO 8332 --- [ main] org.xnio.nio : XNIO NIO Implementation Version 3.8.0.Final 2020-08-06 18:06:06.601 INFO 8332 --- [ main] org.jboss.threads : JBoss Threads version 3.1.0.Final 2020-08-06 18:06:06.649 INFO 8332 --- [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8080 (http) 2020-08-06 18:06:06.656 INFO 8332 --- [ main] deep.in.spring.boot.App : Started App in 1.068 seconds (JVM running for 1.323) \u4ece\u65e5\u5fd7\u4e2d\u53ef\u4ee5\u770b\u5230\uff0cUndertow Web\u5bb9\u5668\u5df2\u7ecf\u6210\u529f\u542f\u52a8\uff0c\u4f46\u8fd9\u91cc\u7684\u8f93\u51fa\u65e5\u5fd7\u662f UndertowWebServer \uff0c\u800c\u5b9e\u9645\u4e0a\u6b64\u5904Undertow\u7684\u5b9e\u73b0\u662f org.springframework.boot.web.embedded.undertow.UndertowServletWebServer \uff0c\u5b83\u7ee7\u627f\u81ea UndertowWebServer \uff0c\u7531\u4e8e\u5f53\u524d\u7248\u672c\u7684\u5b50\u7c7b UndertowServletWebServer \u4e2d\u6ca1\u6709\u5b9a\u4e49\u65e5\u5fd7\u8f93\u51fa\uff0c\u800c\u662f\u5728\u7236\u7c7b UndertowWebServer \u8fdb\u884c\u4e2d\u8f93\u51fa\u7684\uff0c\u6240\u4ee5\u5728\u65e5\u5fd7\u4e0a\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u3002 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u8fdb\u884c\u65ad\u70b9\u8ddf\u8e2a\u6765\u786e\u5b9a\uff0c\u5728 ServletWebServerApplicationContext \u4e2d\u6709 createWebServer() \u65b9\u6cd5\uff0c\u5728Spring Boot\u9879\u76ee\u542f\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u6267\u884c\u5230\u6b64\uff0c\u8fdb\u884c\u65ad\u70b9\u8ddf\u8e2a\uff0c\u5c31\u80fd\u660e\u786e\u5b9e\u9645\u521b\u5efa\u7684 WebServer \u7684\u5177\u4f53\u5b9e\u4f8b\u662f\u4ec0\u4e48\u3002 \u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668 \u00b6 \u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668\u901a\u5e38\u5904\u4e8e\u88ab\u52a8\u6fc0\u6d3b\u72b6\u6001\uff0c\u9700\u8981\u589e\u52a0 spring-boot-starter-webflux \u4f9d\u8d56\uff0c\u800c\u5b83\u548c spring-boot-starter-web \u540c\u65f6\u5b58\u5728\u65f6\uff0c spring-boot-starter-webflux \u4f1a\u88ab\u5ffd\u7565\uff0c\u8fd9\u662f SpringApplication \u4e2d\u5bf9Web\u5e94\u7528\u7c7b\u578b\u7684\u63a8\u65ad\u51b3\u5b9a\u7684\uff1a /** * Create a new {@link SpringApplication} instance. The application context will load * beans from the specified primary sources (see {@link SpringApplication class-level} * documentation for details. The instance can be customized before calling * {@link #run(String...)}. * @param resourceLoader the resource loader to use * @param primarySources the primary bean sources * @see #run(Class, String[]) * @see #setSources(Set) */ @SuppressWarnings ({ \"unchecked\" , \"rawtypes\" }) public SpringApplication ( ResourceLoader resourceLoader , Class <?> ... primarySources ) { this . resourceLoader = resourceLoader ; Assert . notNull ( primarySources , \"PrimarySources must not be null\" ); this . primarySources = new LinkedHashSet <> ( Arrays . asList ( primarySources )); this . webApplicationType = WebApplicationType . deduceFromClasspath (); setInitializers (( Collection ) getSpringFactoriesInstances ( ApplicationContextInitializer . class )); setListeners (( Collection ) getSpringFactoriesInstances ( ApplicationListener . class )); this . mainApplicationClass = deduceMainApplicationClass (); } \u521b\u5efa SpringApplication \u5b9e\u4f8b\u65f6\uff0c this.webApplicationType = WebApplicationType.deduceFromClasspath(); \u5c31\u662f\u5bf9Web\u5e94\u7528\u7684\u7c7b\u578b\u8fdb\u884c\u63a8\u65ad\uff0c\u5176\u5177\u4f53\u903b\u8f91\u5728\u679a\u4e3e\u7c7b WebApplicationType \u4e2d\uff1a private static final String WEBMVC_INDICATOR_CLASS = \"org.springframework.web.servlet.DispatcherServlet\" ; private static final String WEBFLUX_INDICATOR_CLASS = \"org.springframework.web.reactive.DispatcherHandler\" ; private static final String JERSEY_INDICATOR_CLASS = \"org.glassfish.jersey.servlet.ServletContainer\" ; private static final String SERVLET_APPLICATION_CONTEXT_CLASS = \"org.springframework.web.context.WebApplicationContext\" ; static WebApplicationType deduceFromClasspath () { if ( ClassUtils . isPresent ( WEBFLUX_INDICATOR_CLASS , null ) && ! ClassUtils . isPresent ( WEBMVC_INDICATOR_CLASS , null ) && ! ClassUtils . isPresent ( JERSEY_INDICATOR_CLASS , null )) { return WebApplicationType . REACTIVE ; } for ( String className : SERVLET_INDICATOR_CLASSES ) { if ( ! ClassUtils . isPresent ( className , null )) { return WebApplicationType . NONE ; } } return WebApplicationType . SERVLET ; } \u53ef\u4ee5\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u53ea\u6709\u5f53 spring-boot-starter-webflux \u5355\u72ec\u5b58\u5728\u662f\uff0c WebApplicationType \u624d\u662fREACTIVE\u7c7b\u578b\u3002 4. Undertow\u4f5c\u4e3a\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668 \u00b6 \u4fee\u6539pom.xml\uff0c\u6dfb\u52a0\u76f8\u5173\u4f9d\u8d56\uff1a <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-webflux </artifactId> <version> 2.3.2.RELEASE </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-undertow </artifactId> </dependency> </dependencies> \u7f16\u5199\u4e00\u4e9bWebFlux\u4ee3\u7801\uff0c\u5e76\u5c06 maven-compiler-plugin \u7684\u7f16\u8bd1\u7ea7\u522b\u8c03\u6574\u52301.8\uff1a @RestController @SpringBootApplication public class App { @RequestMapping ( \"/\" ) public String index () { return \"Welcome to SpringBoot\" ; } @Bean public RouterFunction < ServerResponse > helloworld () { return route ( GET ( \"/helloworld\" ), request -> ok (). body ( Mono . just ( \"Hello World\" ), String . class ) ); } public static void main ( String [] args ) { SpringApplication . run ( App . class , args ); } } \u542f\u52a8\u9879\u76ee\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) [INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) @ first-spring-boot-application --- [INFO] Attaching agents: [] . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-07 14:03:53.126 INFO 3738 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 3738 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application) 2020-08-07 14:03:53.130 INFO 3738 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-07 14:03:53.717 INFO 3738 --- [ main] io.undertow : starting server: Undertow - 2.1.3.Final 2020-08-07 14:03:53.721 INFO 3738 --- [ main] org.xnio : XNIO version 3.8.0.Final 2020-08-07 14:03:53.727 INFO 3738 --- [ main] org.xnio.nio : XNIO NIO Implementation Version 3.8.0.Final 2020-08-07 14:03:53.793 INFO 3738 --- [ main] org.jboss.threads : JBoss Threads version 3.1.0.Final 2020-08-07 14:03:53.853 INFO 3738 --- [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8080 (http) 2020-08-07 14:03:53.862 INFO 3738 --- [ main] deep.in.spring.boot.App : Started App in 0.947 seconds (JVM running for 1.206) \u6b64\u65f6\u4ecd\u7136\u542f\u52a8\u7684\u662f UndertowWebServer \u5b9e\u4f8b\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u8fd8\u662f\u901a\u8fc7\u65ad\u70b9\u8ddf\u8e2a\u6765\u4e00\u63a2\u7a76\u7adf\uff1a \u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd0\u884c\u5728REACTIVE\u7c7b\u578b\u4e0b\uff0cSpring\u7684\u4e0a\u4e0b\u6587\u5c31\u662f ReactiveWebServerApplicationContext \u4e86\uff0c\u5176\u4e2d\u7684 createWebServer() \u65b9\u6cd5\u548c ServletWebServerApplicationContext \u7684\u7565\u6709\u4e0d\u540c\uff1a private void createWebServer () { WebServerManager serverManager = this . serverManager ; if ( serverManager == null ) { String webServerFactoryBeanName = getWebServerFactoryBeanName (); ReactiveWebServerFactory webServerFactory = getWebServerFactory ( webServerFactoryBeanName ); boolean lazyInit = getBeanFactory (). getBeanDefinition ( webServerFactoryBeanName ). isLazyInit (); this . serverManager = new WebServerManager ( this , webServerFactory , this :: getHttpHandler , lazyInit ); getBeanFactory (). registerSingleton ( \"webServerGracefulShutdown\" , new WebServerGracefulShutdownLifecycle ( this . serverManager )); getBeanFactory (). registerSingleton ( \"webServerStartStop\" , new WebServerStartStopLifecycle ( this . serverManager )); } initPropertySources (); } \u4e8c\u8005\u90fd\u662f WebServerApplicationContext \u63a5\u53e3\u7684\u5b50\u7c7b\uff0c\u5176\u4e2d\u7684 getWebServer() \u65b9\u6cd5\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u8fd0\u884c\u7684 WebServer \u5b9e\u4f8b\uff0c\u5728 App.java \u4e2d\u6dfb\u52a0\u76f8\u5173\u4ee3\u7801\uff1a @Bean public ApplicationRunner runner ( WebServerApplicationContext context ) { return args -> { System . out . println ( \"WebServer type: \" + context . getWebServer (). getClass (). getName ()); }; } \u5229\u7528\u4e86 ApplicationRunner \u63a5\u53e3\u7684\u7279\u6027\uff0c\u5728 SpringApplication \u542f\u52a8\u540e\u56de\u8c03\u3002\u518d\u6b21\u542f\u52a8\u9879\u76ee\u53ef\u4ee5\u770b\u5230\u63a7\u5236\u53f0\u8f93\u51fa\uff1a 2020-08-07 14:19:58.687 INFO 3867 --- [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8080 (http) 2020-08-07 14:19:58.722 INFO 3867 --- [ main] deep.in.spring.boot.App : Started App in 2.19 seconds (JVM running for 2.659) WebServer type: org.springframework.boot.web.embedded.undertow.UndertowWebServer \u7ee7\u7eed\u6d4b\u8bd5HTTP\u670d\u52a1\uff1a $ curl http://localhost:8080 Welcome to Spring $ curl http://localhost:8080/helloworld Hello World \u4f46\u5728\u4e0a\u9762\u4f7f\u7528 ApplicationRunner \u6ce8\u5165 WebServerApplicationContext \u65f6\uff0c\u4ee3\u7801\u5b58\u5728\u4e00\u4e2a\u6f5c\u5728\u7684\u95ee\u9898\uff1a\u6ca1\u6709\u8003\u8651\u975eWeb\u5e94\u7528\u7684\u60c5\u51b5\u3002\u53ef\u4ee5\u5229\u7528Spring\u7684\u4e8b\u4ef6\u673a\u5236\u6765\u8fdb\u884c\u5b8c\u5584\u3002 Spring Boot\u5b98\u65b9\u6587\u6863\u5bf9\u76f8\u5173\u4e8b\u4ef6\u7684\u4ecb\u7ecd\uff1a the following events are also published after ApplicationPreparedEvent and before ApplicationStartedEvent : A WebServerInitializedEvent is sent after the WebServer is ready. ServletWebServerInitializedEvent and ReactiveWebServerInitializedEvent are the servlet and reactive variants respectively. Servlet\u548cReactive\u6709\u5404\u81ea\u7684\u521d\u59cb\u5316\u4e8b\u4ef6\uff0c\u4f7f\u7528\u5b83\u4eec\u7684\u7236\u7c7b WebServerInitializedEvent \u5219\u8986\u76d6\u7684\u8303\u56f4\u66f4\u5e7f\uff0c\u4fee\u6539 App.java \u4ee3\u7801\uff1a // @Bean // public ApplicationRunner runner(WebServerApplicationContext context) { // return args -> { // System.out.println(\"WebServer type: \" + context.getWebServer().getClass().getName()); // }; // } @EventListener ( WebServerInitializedEvent . class ) public void onWebServerReady ( WebServerInitializedEvent event ) { System . out . println ( \"WebServer Type: \" + event . getWebServer (). getClass (). getName ()); } \u542f\u52a8\u9879\u76ee\uff0c\u4f9d\u7136\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\uff0c\u4f46\u7a0b\u5e8f\u5065\u58ee\u6027\u66f4\u4f73\uff0c\u5373\u4fbf\u4e0d\u5728Web\u5e94\u7528\u4e2d\u8fd0\u884c\uff0c\u4e5f\u4e0d\u4f1a\u6ce8\u5165 WebServerApplicationContext \u5931\u8d25\uff1a 2020-08-07 15:24:05.760 INFO 4413 --- [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8080 (http) WebServer Type: org.springframework.boot.web.embedded.undertow.UndertowWebServer 2020-08-07 15:24:05.772 INFO 4413 --- [ main] deep.in.spring.boot.App : Started App in 1.87 seconds (JVM running for 2.319) \u6ce8\u610f\u8f93\u51fa\u7684\u987a\u5e8f\uff0c\u7406\u89e3\u4e8b\u4ef6\u673a\u5236\u7684\u65f6\u5e8f\u3002 5. Jetty\u4f5c\u4e3a\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668 \u00b6 \u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u82e5\u8981\u4f7f\u7528Jetty\u4f5c\u4e3aWeb\u5bb9\u5668\uff0c\u53ea\u9700\u4fee\u6539 pom.xml \u4e2d\u7684\u4f9d\u8d56\u5373\u53ef\uff1a <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-jetty </artifactId> </dependency> \u542f\u52a8\u9879\u76ee\u5f97\u5230\u7c7b\u4f3c\u7684\u8f93\u51fa\uff1a 2020-08-07 15:32:04.568 INFO 4478 --- [ main] o.s.b.web.embedded.jetty.JettyWebServer : Jetty started on port(s) 8080 (http/1.1) with context path '/' WebServer Type: org.springframework.boot.web.embedded.jetty.JettyWebServer 2020-08-07 15:32:04.579 INFO 4478 --- [ main] deep.in.spring.boot.App : Started App in 1.448 seconds (JVM running for 1.877) 6. Tomcat\u4f5c\u4e3a\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668 \u00b6 \u8981\u6ce8\u610f\u7684\u662f\uff0cTomcat\u662fServlet Web\u7684\u9ed8\u8ba4\u5bb9\u5668\uff0c\u4f46\u4e0d\u662fReactive Web\u7684\u9ed8\u8ba4\u5bb9\u5668\u3002 \u540c\u6837\u8981\u4f7f\u7528Tomcat\uff0c\u4fee\u6539 pom.xml : <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-tomcat </artifactId> </dependency> \u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a 2020-08-07 15:35:03.966 INFO 4497 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' WebServer Type: org.springframework.boot.web.embedded.tomcat.TomcatWebServer 2020-08-07 15:35:03.977 INFO 4497 --- [ main] deep.in.spring.boot.App : Started App in 1.677 seconds (JVM running for 2.116) 7. \u9ed8\u8ba4\u7684\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668 \u00b6 Netty\u4f5c\u4e3a\u9ed8\u8ba4\u7684Reactive Web\u5bb9\u5668\uff0c\u82e5\u8981\u4f7f\u7528\uff0c\u53bb\u6389\u5bb9\u5668\u4f9d\u8d56\u5373\u53ef\uff1a 2020-08-07 15:36:58.625 INFO 4510 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 8080 WebServer Type: org.springframework.boot.web.embedded.netty.NettyWebServer 2020-08-07 15:36:58.638 INFO 4510 --- [ main] deep.in.spring.boot.App : Started App in 1.393 seconds (JVM running for 1.811)","title":"Embedded Web Server"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/#servlet-web","text":"\u4ece\u4e4b\u524d\u9879\u76ee\u542f\u52a8\u7684\u65e5\u5fd7\u4e2d\uff0c\u603b\u80fd\u770b\u5230\u4e00\u884c\uff1a [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' \u8bf4\u660e\u9879\u76ee\u4f7f\u7528\u7684Web\u5bb9\u5668\u662fTomcat\uff0c\u800c\u5728 pom.xml \u4e2d\u6ca1\u6709\u76f4\u63a5\u5f15\u5165\u76f8\u5173\u4f9d\u8d56\uff0c\u800c\u5728WAR\u5305\u7684\u89e3\u538b\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230 WEB-INF/lib/spring-boot-starter-tomcat-2.3.2.RELEASE.jar \u7684\u5b58\u5728\uff0c\u8bf4\u660e\u8be5JAR\u6587\u4ef6\u5e94\u8be5\u7531 spring-boot-starter-web \u95f4\u63a5\u5f15\u5165\uff0c\u4f7f\u7528Maven\u7684 dependency \u63d2\u4ef6\u53ef\u4ee5\u770b\u5230\u4f9d\u8d56\u5173\u7cfb\uff1a $ mvn dependency:tree -Dincludes=*:spring-boot-starter-tomcat:jar:2.3.2.RELEASE [INFO] Scanning for projects... [INFO] [INFO] ---------< deep-in-spring-boot:first-spring-boot-application >---------- [INFO] Building first-spring-boot-application 1.0.0-SNAPSHOT [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ first-spring-boot-application --- [INFO] deep-in-spring-boot:first-spring-boot-application:war:1.0.0-SNAPSHOT [INFO] \\- org.springframework.boot:spring-boot-starter-web:jar:2.3.2.RELEASE:compile [INFO] \\- org.springframework.boot:spring-boot-starter-tomcat:jar:2.3.2.RELEASE:compile [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.107 s [INFO] Finished at: 2020-08-04T14:47:52+08:00 [INFO] ------------------------------------------------------------------------ \u5728 Spring Boot\u5b98\u65b9\u7f51\u7ad9 \uff0c\u4ecb\u7ecdSpring Boot\u7684\u7279\u6027\u65f6\uff0c\u6709\u5982\u4e0b\u5185\u5bb9 Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) \u793a\u4f8b\u9879\u76ee\u90fd\u662f Servlet Web\u7a0b\u5e8f\uff0cSpring Boot\u51c6\u5907\u4e863\u79cd\u5d4c\u5165\u5f0fWeb\u5bb9\u5668\uff0c\u5206\u522b\u662f Tomcat \uff0c Jetty \u548c Undertow \u3002 \u5728\u5b98\u65b9\u6587\u6863\u4e2d\uff0c\u5bf93\u79cdServlet\u5bb9\u5668\u7684\u76f8\u5173\u4ecb\u7ecd\uff1a Spring Boot supports the following embedded servlet containers: Name Servlet Version Tomcat 9.0 4.0 Jetty 9.4 3.1 Undertow 2.0 4.0 You can also deploy Spring Boot applications to any Servlet 3.1+ compatible container.","title":"\u5d4c\u5165\u5f0fServlet Web\u5bb9\u5668"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/#1-tomcatservlet-web","text":"\u5d4c\u5165\u5f0fTomcat\u4f5c\u4e3aWeb\u5e94\u7528\u7684\u4e00\u90e8\u5206\uff0c\u7ed3\u5408\u5176API\u5b9e\u73b0Servlet\u5bb9\u5668\u7684\u5f15\u5bfc\u3002\u540c\u6837\uff0cTomcat\u4e5f\u63d0\u4f9b\u4e86Maven\u63d2\u4ef6\uff0c\u4e0d\u9700\u8981\u7f16\u7801\uff0c\u4e5f\u4e0d\u9700\u8981\u5916\u7f6eTomcat\u5bb9\u5668\uff0c\u5c06\u5f53\u524d\u5e94\u7528\u76f4\u63a5\u6253\u5305\u4e3a\u53ef\u8fd0\u884c\u7684JAR\u6216WAR\u6587\u4ef6\uff0c\u901a\u8fc7 java -jar \u547d\u4ee4\u542f\u52a8\u3002 \u65b0\u5efa\u9879\u76ee servlet-sample \uff0c\u7ed3\u6784\u5982\u4e0b\uff1a $ tree . . \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2514\u2500\u2500 servlet \u2502 \u2502 \u2514\u2500\u2500 HelloServlet.java \u2502 \u251c\u2500\u2500 resources \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 web.xml \u2514\u2500\u2500 test \u2514\u2500\u2500 java 13 directories, 3 files \u4f20\u7edf\u7684Java Web\u9879\u76ee\uff0c\u9700\u8981\u5728web\u6839\u8def\u5f84\u4e0b\u6709 WEB-INF/web.xml \u6587\u4ef6\u5b58\u5728\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation= \"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version= \"3.0\" > <servlet> <!-- Servlet \u58f0\u660e --> <servlet-name> HelloServlet </servlet-name> <servlet-class> deep.in.spring.boot.servlet.HelloServlet </servlet-class> <init-param> <param-name> init-param1 </param-name> <param-value> param1 </param-value> </init-param> </servlet> <!-- \u58f0\u660e Servlet \u6620\u5c04 --> <servlet-mapping> <!-- \u5173\u8054 Servlet--> <servlet-name> HelloServlet </servlet-name> <url-pattern> /hello </url-pattern> </servlet-mapping> </web-app> \u58f0\u660e\u4e86\u4e00\u4e2aServlet\uff0c\u5e76\u914d\u7f6e\u4e00\u5bf9\u521d\u59cb\u5316\u53c2\u6570\uff0c\u540c\u65f6\u58f0\u660e\u8be5Servlet\u7684\u6620\u5c04\u5730\u5740\uff0c\u7f16\u5199Servlet\u7c7b\uff1a public class HelloServlet extends HttpServlet { @Override public void init ( ServletConfig servletConfig ) { Collections . list ( servletConfig . getInitParameterNames ()) . forEach ( name -> { System . out . println ( \"Init param name : \" + name + \" , value : \" + servletConfig . getInitParameter ( name )); }); } /** * \u8f93\u51fa HTTP \u8bf7\u6c42\u53c2\u6570 \"messsage\" \u7684\u5185\u5bb9\uff08\u652f\u6301\u4efb\u610f HTTP \u65b9\u6cd5\uff09 * * @param request {@link HttpServletRequest} * @param response {@link HttpServletResponse} * @throws IOException * @throws ServletException */ @Override public void service ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { // \u83b7\u53d6\u8bf7\u6c42\u53c2\u6570 \"message\" \u5185\u5bb9 String message = request . getParameter ( \"message\" ); System . out . println ( \"message : \" + message ); PrintWriter writer = response . getWriter (); // \u8f93\u51fa \"message\" \u53c2\u6570\u5185\u5bb9 writer . println ( message ); writer . flush (); } } \u9879\u76ee\u7684 pom.xml \u4e2d\u5f15\u5165\u76f8\u5173\u4f9d\u8d56\u548c\u63d2\u4ef6\u914d\u7f6e\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> deep-in-spring-boot </groupId> <artifactId> servlet-sample </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> war </packaging> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> </properties> <dependencies> <!-- \u4f7f\u7528 Servlet 3.1 API --> <dependency> <groupId> javax.servlet </groupId> <artifactId> javax.servlet-api </artifactId> <version> 3.1.0 </version> <scope> provided </scope> </dependency> </dependencies> <build> <plugins> <!-- Tomcat 8 Maven \u63d2\u4ef6\u7528\u4e8e\u6784\u5efa\u53ef\u6267\u884c war --> <!-- https://mvnrepository.com/artifact/org.apache.tomcat.maven/tomcat8-maven-plugin --> <plugin> <groupId> org.apache.tomcat.maven </groupId> <artifactId> tomcat8-maven-plugin </artifactId> <version> 3.0-r1655215 </version> <executions> <execution> <id> tomcat-run </id> <goals> <!-- \u6700\u7ec8\u6253\u5305\u6210\u53ef\u6267\u884c\u7684jar\u5305 --> <goal> exec-war-only </goal> </goals> <phase> package </phase> <configuration> <!-- ServletContext \u8def\u5f84 --> <path> / </path> </configuration> </execution> </executions> </plugin> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <configuration> <source> 8 </source> <target> 8 </target> </configuration> </plugin> </plugins> </build> <pluginRepositories> <pluginRepository> <!-- tomcat8-maven-plugin \u6240\u5728\u4ed3\u5e93 --> <id> Alfresco </id> <name> Alfresco Repository </name> <url> https://artifacts.alfresco.com/nexus/content/repositories/public/ </url> <snapshots> <enabled> false </enabled> </snapshots> </pluginRepository> </pluginRepositories> </project> \u51c6\u5907\u597d\u6240\u9700\u5185\u5bb9\u540e\u76f4\u63a5\u6267\u884c\u6253\u5305\uff1a $ mvn clean package [INFO] Scanning for projects... [INFO] [INFO] -----------------< deep-in-spring-boot:servlet-sample >----------------- [INFO] Building servlet-sample 1.0.0-SNAPSHOT [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ servlet-sample --- [INFO] Deleting /Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/target [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ servlet-sample --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 0 resource [INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ servlet-sample --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to /Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/target/classes [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ servlet-sample --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ servlet-sample --- [INFO] Changes detected - recompiling the module! [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ servlet-sample --- [INFO] [INFO] --- maven-war-plugin:2.2:war (default-war) @ servlet-sample --- [INFO] Packaging webapp [INFO] Assembling webapp [servlet-sample] in [/Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/target/servlet-sample-1.0.0-SNAPSHOT] [INFO] Processing war project [INFO] Copying webapp resources [/Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/src/main/webapp] [INFO] Webapp assembled in [26 msecs] [INFO] Building war: /Users/nanlei/Dev/Codebase/deep-in-spring-boot/servlet-sample/target/servlet-sample-1.0.0-SNAPSHOT.war [INFO] WEB-INF/web.xml already added, skipping [INFO] [INFO] --- tomcat8-maven-plugin:3.0-r1655215:exec-war-only (tomcat-run) @ servlet-sample --- [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.817 s [INFO] Finished at: 2020-08-06T14:47:16+08:00 [INFO] ------------------------------------------------------------------------ \u6253\u5305\u5b8c\u6210\uff0c\u4f7f\u7528 java -jar \u547d\u4ee4\u8fd0\u884c\uff1a $ cd target $ java -jar servlet-sample-1.0.0-SNAPSHOT-war-exec.jar Aug 06, 2020 2:50:17 PM org.apache.coyote.http11.Http11NioProtocol init INFO: Initializing ProtocolHandler [\"http-nio-8080\"] Aug 06, 2020 2:50:17 PM org.apache.tomcat.util.net.NioSelectorPool getSharedSelector INFO: Using a shared selector for servlet write/read Aug 06, 2020 2:50:17 PM org.apache.catalina.core.StandardService startInternal INFO: Starting service Tomcat Aug 06, 2020 2:50:17 PM org.apache.catalina.core.StandardEngine startInternal INFO: Starting Servlet Engine: Apache Tomcat/8.0.14 Aug 06, 2020 2:50:18 PM org.apache.jasper.servlet.TldScanner scanJars INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time. Aug 06, 2020 2:50:18 PM org.apache.coyote.http11.Http11NioProtocol start INFO: Starting ProtocolHandler [\"http-nio-8080\"] \u6d4b\u8bd5HTTP\u670d\u52a1\uff1a $ curl http://127.0.0.1:8080/hello?message=helloworld helloworld \u540c\u65f6\u53ef\u4ee5\u770b\u5230\u547d\u4ee4\u884c\u8f93\u51fa\uff1a Init param name : init-param1 , value : param1 message : helloworld \u6b64\u65f6\u5728target\u76ee\u5f55\u4e0b\u51fa\u73b0\u89e3\u538b\u7684 .extract \u76ee\u5f55\uff0c\u89c2\u5bdf\u7ed3\u6784\uff1a $ tree .extract/ .extract/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 web.xml \u251c\u2500\u2500 logs \u2502 \u2514\u2500\u2500 access_log.2020-08-06 \u251c\u2500\u2500 temp \u251c\u2500\u2500 webapps \u2502 \u251c\u2500\u2500 ROOT \u2502 \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2502 \u2514\u2500\u2500 deep-in-spring-boot \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlet-sample \u2502 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2502 \u2514\u2500\u2500 spring \u2502 \u2502 \u2502 \u2514\u2500\u2500 boot \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlet \u2502 \u2502 \u2502 \u2514\u2500\u2500 HelloServlet.class \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 ROOT.war \u2514\u2500\u2500 work \u2514\u2500\u2500 Tomcat \u2514\u2500\u2500 localhost \u2514\u2500\u2500 ROOT 20 directories, 8 files \u7531\u6b64\u53ef\u89c1\uff0cTomcat Maven\u63d2\u4ef6\u5e76\u975e\u5d4c\u5165\u5f0fTomcat\uff0c\u4ecd\u4e3a\u4f20\u7edfTomcat\u5bb9\u5668\u90e8\u7f72\u65b9\u5f0f\uff0c\u5c06\u5e94\u7528\u6253\u5305\u4e3a ROOT.war \uff0c\u7136\u540e\u5728Tomcat\u542f\u52a8\u8fc7\u7a0b\u4e2d\u5c06 ROOT.war \u90e8\u7f72\u5230 webapps \u76ee\u5f55\uff0c\u4f46\u8be5\u63d2\u4ef6\u652f\u6301\u6307\u5b9a ServletContext \u8def\u5f84\u3002 Spring Boot\u4f7f\u7528\u5d4c\u5165\u5f0fTomcat\u6784\u5efa\u4e3a TomcatWebServer Bean\uff0c\u7531Spring\u4e0a\u4e0b\u6587\u5c06\u5176\u5f15\u5bfc\uff0c\u5d4c\u5165\u5f0f\u7ec4\u4ef6\u7684\u8fd0\u884c\uff0c ClassLoader \u7684\u88c5\u8f7d\u5747\u7531Spring Boot\u6846\u67b6\u5b8c\u6210\u3002 Tomcat Maven\u63d2\u4ef6\u6253\u5305\u540e\u7684JAR\u6216WAR\u5c5e\u4e8e\u975eFAT\u6a21\u5f0f\uff0c\u5f52\u6863\u6587\u4ef6\u4f1a\u88ab\u538b\u7f29\uff0c\u800cSpring Boot Maven\u63d2\u4ef6 spring-boot-maven-plugin \u4f7f\u7528\u96f6\u538b\u7f29\u6a21\u5f0f\uff0c\u5c06\u5e94\u7528\u5f52\u6863\u5230JAR\u6216WAR\u5305\u4e2d\uff0c\u5728jar\u547d\u4ee4\u5e2e\u52a9\u4e2d\u6709\u4ecb\u7ecd\uff1a $ jar Usage: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ... Options: -c create new archive -t list table of contents for archive -x extract named (or all) files from archive -u update existing archive -v generate verbose output on standard output -f specify archive file name -m include manifest information from specified manifest file -n perform Pack200 normalization after creating a new archive -e specify application entry point for stand-alone application bundled into an executable jar file -0 store only; use no ZIP compression -P preserve leading '/' (absolute path) and \"..\" (parent directory) components from file names -M do not create a manifest file for the entries -i generate index information for the specified jar files -C change to the specified directory and include the following file If any file is a directory then it is processed recursively. The manifest file name, the archive file name and the entry point name are specified in the same order as the 'm', 'f' and 'e' flags. Example 1: to archive two class files into an archive called classes.jar: jar cvf classes.jar Foo.class Bar.class Example 2: use an existing manifest file 'mymanifest' and archive all the files in the foo/ directory into 'classes.jar': jar cvfm classes.jar mymanifest -C foo/ . \u4f20\u7edfServlet\u5bb9\u5668\u5c06\u538b\u7f29\u7684WAR\u6587\u4ef6\u89e3\u538b\u5230\u5bf9\u5e94\u76ee\u5f55\uff0c\u518d\u52a0\u8f7d\u8be5\u76ee\u5f55\u4e2d\u7684\u8d44\u6e90\u3002\u800cSpring Boot\u7684\u53ef\u6267\u884cWAR\u6587\u4ef6\u9700\u8981\u5728\u4e0d\u89e3\u538b\u7684\u524d\u63d0\u4e0b\u8bfb\u53d6\u5176\u4e2d\u8d44\u6e90\uff0c\u4e5f\u5c31\u662f spring-boot-loader \u9700\u8981\u8986\u76d6\u5185\u5efaJAR\u534f\u8bae\u7684URLStreamHandler\u7684\u539f\u56e0\u6240\u5728\u3002","title":"1. Tomcat\u4f5c\u4e3a\u5d4c\u5165\u5f0fServlet Web\u5bb9\u5668"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/#2-jettyservlet-web","text":"\u5c06\u9ed8\u8ba4\u7684\u5d4c\u5165\u5f0f\u5bb9\u5668Tomact\u5207\u6362\u81f3Jetty\u7684\u6b65\u9aa4\u975e\u5e38\u7b80\u5355\uff0c\u5b98\u65b9\u6587\u6863\u5bf9\u6b64\u6709\u8be6\u7ec6\u8bf4\u660e\uff1a Use Another Web Server Many Spring Boot starters include default embedded containers. For servlet stack applications, the spring-boot-starter-web includes Tomcat by including spring-boot-starter-tomcat , but you can use spring-boot-starter-jetty or spring-boot-starter-undertow instead. For reactive stack applications, the spring-boot-starter-webflux includes Reactor Netty by including spring-boot-starter-reactor-netty , but you can use spring-boot-starter-tomcat , spring-boot-starter-jetty , or spring-boot-starter-undertow instead. When switching to a different HTTP server, you need to exclude the default dependencies in addition to including the one you need. To help with this process, Spring Boot provides a separate starter for each of the supported HTTP servers. The following Maven example shows how to exclude Tomcat and include Jetty for Spring MVC: <properties> <servlet-api.version> 3.1.0 </servlet-api.version> </properties> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <!-- Exclude the Tomcat dependency --> <exclusion> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-tomcat </artifactId> </exclusion> </exclusions> </dependency> <!-- Use Jetty instead --> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-jetty </artifactId> </dependency> The version of the Servlet API has been overridden as, unlike Tomcat 9 and Undertow 2.0, Jetty 9.4 does not support Servlet 4.0. \u6839\u636e\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u660e\uff0c\u65b0\u5efa\u9879\u76ee embedded-web-server \u3002\u524d\u9762\u5206\u6790\u8fc7 spring-boot-starter-tomcat \u4e3a spring-boot-starter-web \u95f4\u63a5\u5f15\u5165\uff0c\u6240\u4ee5\u5728\u4f9d\u8d56\u4e2d\u9700\u8981\u6392\u9664\uff0c\u518d\u6dfb\u52a0\u65b0\u7684Jetty\u4f9d\u8d56 spring-boot-starter-jetty \u5373\u53ef\u3002 \u8fd0\u884c\u9879\u76ee\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) [INFO] <<< spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) < test-compile @ first-spring-boot-application <<< [INFO] [INFO] [INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) @ first-spring-boot-application --- [INFO] Attaching agents: [] . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-06 17:50:22.470 INFO 8185 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 8185 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application) 2020-08-06 17:50:22.472 INFO 8185 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-06 17:50:22.916 INFO 8185 --- [ main] org.eclipse.jetty.util.log : Logging initialized @947ms to org.eclipse.jetty.util.log.Slf4jLog 2020-08-06 17:50:23.023 INFO 8185 --- [ main] o.s.b.w.e.j.JettyServletWebServerFactory : Server initialized with port: 8080 2020-08-06 17:50:23.024 INFO 8185 --- [ main] org.eclipse.jetty.server.Server : jetty-9.4.30.v20200611; built: 2020-06-11T12:34:51.929Z; git: 271836e4c1f4612f12b7bb13ef5a92a927634b0d; jvm 1.8.0_251-b08 2020-08-06 17:50:23.043 INFO 8185 --- [ main] o.e.j.s.h.ContextHandler.application : Initializing Spring embedded WebApplicationContext 2020-08-06 17:50:23.043 INFO 8185 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 531 ms 2020-08-06 17:50:23.111 INFO 8185 --- [ main] org.eclipse.jetty.server.session : DefaultSessionIdManager workerName=node0 2020-08-06 17:50:23.111 INFO 8185 --- [ main] org.eclipse.jetty.server.session : No SessionScavenger set, using defaults 2020-08-06 17:50:23.112 INFO 8185 --- [ main] org.eclipse.jetty.server.session : node0 Scavenging every 660000ms 2020-08-06 17:50:23.118 INFO 8185 --- [ main] o.e.jetty.server.handler.ContextHandler : Started o.s.b.w.e.j.JettyEmbeddedWebAppContext@6c67e137{application,/,[file:///private/var/folders/dy/g2n42jw12y3g6th2pgtz59_c0000gn/T/jetty-docbase.8002049805771173289.8080/],AVAILABLE} 2020-08-06 17:50:23.118 INFO 8185 --- [ main] org.eclipse.jetty.server.Server : Started @1150ms 2020-08-06 17:50:23.214 INFO 8185 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-06 17:50:23.303 INFO 8185 --- [ main] o.e.j.s.h.ContextHandler.application : Initializing Spring DispatcherServlet 'dispatcherServlet' 2020-08-06 17:50:23.303 INFO 8185 --- [ main] o.s.web.servlet.DispatcherServlet : Initializing Servlet 'dispatcherServlet' 2020-08-06 17:50:23.307 INFO 8185 --- [ main] o.s.web.servlet.DispatcherServlet : Completed initialization in 4 ms 2020-08-06 17:50:23.334 INFO 8185 --- [ main] o.e.jetty.server.AbstractConnector : Started ServerConnector@b6b1987{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} 2020-08-06 17:50:23.336 INFO 8185 --- [ main] o.s.b.web.embedded.jetty.JettyWebServer : Jetty started on port(s) 8080 (http/1.1) with context path '/' 2020-08-06 17:50:23.343 INFO 8185 --- [ main] deep.in.spring.boot.App : Started App in 1.098 seconds (JVM running for 1.374) \u9879\u76ee\u6b63\u5e38\u542f\u52a8\uff0c\u4e0d\u540c\u7684\u662f\uff0c\u8fd0\u884c\u5bb9\u5668\u5207\u6362\u5230\u4e86Jetty\uff0c\u5176\u4e2d org.springframework.boot.web.embedded.jetty.JettyWebServer \u5c31\u662fSpring Boot\u7ed3\u5408Jetty API\u5b9e\u73b0\u7684 org.springframework.boot.web.server.WebServer Bean\u3002","title":"2. Jetty\u4f5c\u4e3a\u5d4c\u5165\u5f0fServlet Web\u5bb9\u5668"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/#3-undertowservlet-web","text":"\u82e5\u5c06Servlet\u5bb9\u5668\u5207\u6362\u5230Undertow\uff0c\u79fb\u9664 spring-boot-starter-tomcat \u4f9d\u8d56\u540e\u518d\u6dfb\u52a0 spring-boot-starter-undertow \u4f9d\u8d56\u5373\u53ef\uff0c\u518d\u6b21\u8fd0\u884c\u9879\u76ee\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) [INFO] <<< spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) < test-compile @ first-spring-boot-application <<< [INFO] [INFO] [INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) @ first-spring-boot-application --- [INFO] Attaching agents: [] . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-06 18:06:05.804 INFO 8332 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 8332 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application) 2020-08-06 18:06:05.806 INFO 8332 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-06 18:06:06.317 WARN 8332 --- [ main] io.undertow.websockets.jsr : UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used 2020-08-06 18:06:06.334 INFO 8332 --- [ main] io.undertow.servlet : Initializing Spring embedded WebApplicationContext 2020-08-06 18:06:06.334 INFO 8332 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 488 ms 2020-08-06 18:06:06.449 INFO 8332 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-06 18:06:06.531 INFO 8332 --- [ main] io.undertow : starting server: Undertow - 2.1.3.Final 2020-08-06 18:06:06.534 INFO 8332 --- [ main] org.xnio : XNIO version 3.8.0.Final 2020-08-06 18:06:06.542 INFO 8332 --- [ main] org.xnio.nio : XNIO NIO Implementation Version 3.8.0.Final 2020-08-06 18:06:06.601 INFO 8332 --- [ main] org.jboss.threads : JBoss Threads version 3.1.0.Final 2020-08-06 18:06:06.649 INFO 8332 --- [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8080 (http) 2020-08-06 18:06:06.656 INFO 8332 --- [ main] deep.in.spring.boot.App : Started App in 1.068 seconds (JVM running for 1.323) \u4ece\u65e5\u5fd7\u4e2d\u53ef\u4ee5\u770b\u5230\uff0cUndertow Web\u5bb9\u5668\u5df2\u7ecf\u6210\u529f\u542f\u52a8\uff0c\u4f46\u8fd9\u91cc\u7684\u8f93\u51fa\u65e5\u5fd7\u662f UndertowWebServer \uff0c\u800c\u5b9e\u9645\u4e0a\u6b64\u5904Undertow\u7684\u5b9e\u73b0\u662f org.springframework.boot.web.embedded.undertow.UndertowServletWebServer \uff0c\u5b83\u7ee7\u627f\u81ea UndertowWebServer \uff0c\u7531\u4e8e\u5f53\u524d\u7248\u672c\u7684\u5b50\u7c7b UndertowServletWebServer \u4e2d\u6ca1\u6709\u5b9a\u4e49\u65e5\u5fd7\u8f93\u51fa\uff0c\u800c\u662f\u5728\u7236\u7c7b UndertowWebServer \u8fdb\u884c\u4e2d\u8f93\u51fa\u7684\uff0c\u6240\u4ee5\u5728\u65e5\u5fd7\u4e0a\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u3002 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u8fdb\u884c\u65ad\u70b9\u8ddf\u8e2a\u6765\u786e\u5b9a\uff0c\u5728 ServletWebServerApplicationContext \u4e2d\u6709 createWebServer() \u65b9\u6cd5\uff0c\u5728Spring Boot\u9879\u76ee\u542f\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u6267\u884c\u5230\u6b64\uff0c\u8fdb\u884c\u65ad\u70b9\u8ddf\u8e2a\uff0c\u5c31\u80fd\u660e\u786e\u5b9e\u9645\u521b\u5efa\u7684 WebServer \u7684\u5177\u4f53\u5b9e\u4f8b\u662f\u4ec0\u4e48\u3002","title":"3. Undertow\u4f5c\u4e3a\u5d4c\u5165\u5f0fServlet Web\u5bb9\u5668"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/#reactive-web","text":"\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668\u901a\u5e38\u5904\u4e8e\u88ab\u52a8\u6fc0\u6d3b\u72b6\u6001\uff0c\u9700\u8981\u589e\u52a0 spring-boot-starter-webflux \u4f9d\u8d56\uff0c\u800c\u5b83\u548c spring-boot-starter-web \u540c\u65f6\u5b58\u5728\u65f6\uff0c spring-boot-starter-webflux \u4f1a\u88ab\u5ffd\u7565\uff0c\u8fd9\u662f SpringApplication \u4e2d\u5bf9Web\u5e94\u7528\u7c7b\u578b\u7684\u63a8\u65ad\u51b3\u5b9a\u7684\uff1a /** * Create a new {@link SpringApplication} instance. The application context will load * beans from the specified primary sources (see {@link SpringApplication class-level} * documentation for details. The instance can be customized before calling * {@link #run(String...)}. * @param resourceLoader the resource loader to use * @param primarySources the primary bean sources * @see #run(Class, String[]) * @see #setSources(Set) */ @SuppressWarnings ({ \"unchecked\" , \"rawtypes\" }) public SpringApplication ( ResourceLoader resourceLoader , Class <?> ... primarySources ) { this . resourceLoader = resourceLoader ; Assert . notNull ( primarySources , \"PrimarySources must not be null\" ); this . primarySources = new LinkedHashSet <> ( Arrays . asList ( primarySources )); this . webApplicationType = WebApplicationType . deduceFromClasspath (); setInitializers (( Collection ) getSpringFactoriesInstances ( ApplicationContextInitializer . class )); setListeners (( Collection ) getSpringFactoriesInstances ( ApplicationListener . class )); this . mainApplicationClass = deduceMainApplicationClass (); } \u521b\u5efa SpringApplication \u5b9e\u4f8b\u65f6\uff0c this.webApplicationType = WebApplicationType.deduceFromClasspath(); \u5c31\u662f\u5bf9Web\u5e94\u7528\u7684\u7c7b\u578b\u8fdb\u884c\u63a8\u65ad\uff0c\u5176\u5177\u4f53\u903b\u8f91\u5728\u679a\u4e3e\u7c7b WebApplicationType \u4e2d\uff1a private static final String WEBMVC_INDICATOR_CLASS = \"org.springframework.web.servlet.DispatcherServlet\" ; private static final String WEBFLUX_INDICATOR_CLASS = \"org.springframework.web.reactive.DispatcherHandler\" ; private static final String JERSEY_INDICATOR_CLASS = \"org.glassfish.jersey.servlet.ServletContainer\" ; private static final String SERVLET_APPLICATION_CONTEXT_CLASS = \"org.springframework.web.context.WebApplicationContext\" ; static WebApplicationType deduceFromClasspath () { if ( ClassUtils . isPresent ( WEBFLUX_INDICATOR_CLASS , null ) && ! ClassUtils . isPresent ( WEBMVC_INDICATOR_CLASS , null ) && ! ClassUtils . isPresent ( JERSEY_INDICATOR_CLASS , null )) { return WebApplicationType . REACTIVE ; } for ( String className : SERVLET_INDICATOR_CLASSES ) { if ( ! ClassUtils . isPresent ( className , null )) { return WebApplicationType . NONE ; } } return WebApplicationType . SERVLET ; } \u53ef\u4ee5\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u53ea\u6709\u5f53 spring-boot-starter-webflux \u5355\u72ec\u5b58\u5728\u662f\uff0c WebApplicationType \u624d\u662fREACTIVE\u7c7b\u578b\u3002","title":"\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/#4-undertowreactive-web","text":"\u4fee\u6539pom.xml\uff0c\u6dfb\u52a0\u76f8\u5173\u4f9d\u8d56\uff1a <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-webflux </artifactId> <version> 2.3.2.RELEASE </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-undertow </artifactId> </dependency> </dependencies> \u7f16\u5199\u4e00\u4e9bWebFlux\u4ee3\u7801\uff0c\u5e76\u5c06 maven-compiler-plugin \u7684\u7f16\u8bd1\u7ea7\u522b\u8c03\u6574\u52301.8\uff1a @RestController @SpringBootApplication public class App { @RequestMapping ( \"/\" ) public String index () { return \"Welcome to SpringBoot\" ; } @Bean public RouterFunction < ServerResponse > helloworld () { return route ( GET ( \"/helloworld\" ), request -> ok (). body ( Mono . just ( \"Hello World\" ), String . class ) ); } public static void main ( String [] args ) { SpringApplication . run ( App . class , args ); } } \u542f\u52a8\u9879\u76ee\uff1a $ mvn spring-boot:run [INFO] Scanning for projects... (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) [INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:run (default-cli) @ first-spring-boot-application --- [INFO] Attaching agents: [] . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-07 14:03:53.126 INFO 3738 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 3738 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application) 2020-08-07 14:03:53.130 INFO 3738 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-07 14:03:53.717 INFO 3738 --- [ main] io.undertow : starting server: Undertow - 2.1.3.Final 2020-08-07 14:03:53.721 INFO 3738 --- [ main] org.xnio : XNIO version 3.8.0.Final 2020-08-07 14:03:53.727 INFO 3738 --- [ main] org.xnio.nio : XNIO NIO Implementation Version 3.8.0.Final 2020-08-07 14:03:53.793 INFO 3738 --- [ main] org.jboss.threads : JBoss Threads version 3.1.0.Final 2020-08-07 14:03:53.853 INFO 3738 --- [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8080 (http) 2020-08-07 14:03:53.862 INFO 3738 --- [ main] deep.in.spring.boot.App : Started App in 0.947 seconds (JVM running for 1.206) \u6b64\u65f6\u4ecd\u7136\u542f\u52a8\u7684\u662f UndertowWebServer \u5b9e\u4f8b\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u8fd8\u662f\u901a\u8fc7\u65ad\u70b9\u8ddf\u8e2a\u6765\u4e00\u63a2\u7a76\u7adf\uff1a \u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd0\u884c\u5728REACTIVE\u7c7b\u578b\u4e0b\uff0cSpring\u7684\u4e0a\u4e0b\u6587\u5c31\u662f ReactiveWebServerApplicationContext \u4e86\uff0c\u5176\u4e2d\u7684 createWebServer() \u65b9\u6cd5\u548c ServletWebServerApplicationContext \u7684\u7565\u6709\u4e0d\u540c\uff1a private void createWebServer () { WebServerManager serverManager = this . serverManager ; if ( serverManager == null ) { String webServerFactoryBeanName = getWebServerFactoryBeanName (); ReactiveWebServerFactory webServerFactory = getWebServerFactory ( webServerFactoryBeanName ); boolean lazyInit = getBeanFactory (). getBeanDefinition ( webServerFactoryBeanName ). isLazyInit (); this . serverManager = new WebServerManager ( this , webServerFactory , this :: getHttpHandler , lazyInit ); getBeanFactory (). registerSingleton ( \"webServerGracefulShutdown\" , new WebServerGracefulShutdownLifecycle ( this . serverManager )); getBeanFactory (). registerSingleton ( \"webServerStartStop\" , new WebServerStartStopLifecycle ( this . serverManager )); } initPropertySources (); } \u4e8c\u8005\u90fd\u662f WebServerApplicationContext \u63a5\u53e3\u7684\u5b50\u7c7b\uff0c\u5176\u4e2d\u7684 getWebServer() \u65b9\u6cd5\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u8fd0\u884c\u7684 WebServer \u5b9e\u4f8b\uff0c\u5728 App.java \u4e2d\u6dfb\u52a0\u76f8\u5173\u4ee3\u7801\uff1a @Bean public ApplicationRunner runner ( WebServerApplicationContext context ) { return args -> { System . out . println ( \"WebServer type: \" + context . getWebServer (). getClass (). getName ()); }; } \u5229\u7528\u4e86 ApplicationRunner \u63a5\u53e3\u7684\u7279\u6027\uff0c\u5728 SpringApplication \u542f\u52a8\u540e\u56de\u8c03\u3002\u518d\u6b21\u542f\u52a8\u9879\u76ee\u53ef\u4ee5\u770b\u5230\u63a7\u5236\u53f0\u8f93\u51fa\uff1a 2020-08-07 14:19:58.687 INFO 3867 --- [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8080 (http) 2020-08-07 14:19:58.722 INFO 3867 --- [ main] deep.in.spring.boot.App : Started App in 2.19 seconds (JVM running for 2.659) WebServer type: org.springframework.boot.web.embedded.undertow.UndertowWebServer \u7ee7\u7eed\u6d4b\u8bd5HTTP\u670d\u52a1\uff1a $ curl http://localhost:8080 Welcome to Spring $ curl http://localhost:8080/helloworld Hello World \u4f46\u5728\u4e0a\u9762\u4f7f\u7528 ApplicationRunner \u6ce8\u5165 WebServerApplicationContext \u65f6\uff0c\u4ee3\u7801\u5b58\u5728\u4e00\u4e2a\u6f5c\u5728\u7684\u95ee\u9898\uff1a\u6ca1\u6709\u8003\u8651\u975eWeb\u5e94\u7528\u7684\u60c5\u51b5\u3002\u53ef\u4ee5\u5229\u7528Spring\u7684\u4e8b\u4ef6\u673a\u5236\u6765\u8fdb\u884c\u5b8c\u5584\u3002 Spring Boot\u5b98\u65b9\u6587\u6863\u5bf9\u76f8\u5173\u4e8b\u4ef6\u7684\u4ecb\u7ecd\uff1a the following events are also published after ApplicationPreparedEvent and before ApplicationStartedEvent : A WebServerInitializedEvent is sent after the WebServer is ready. ServletWebServerInitializedEvent and ReactiveWebServerInitializedEvent are the servlet and reactive variants respectively. Servlet\u548cReactive\u6709\u5404\u81ea\u7684\u521d\u59cb\u5316\u4e8b\u4ef6\uff0c\u4f7f\u7528\u5b83\u4eec\u7684\u7236\u7c7b WebServerInitializedEvent \u5219\u8986\u76d6\u7684\u8303\u56f4\u66f4\u5e7f\uff0c\u4fee\u6539 App.java \u4ee3\u7801\uff1a // @Bean // public ApplicationRunner runner(WebServerApplicationContext context) { // return args -> { // System.out.println(\"WebServer type: \" + context.getWebServer().getClass().getName()); // }; // } @EventListener ( WebServerInitializedEvent . class ) public void onWebServerReady ( WebServerInitializedEvent event ) { System . out . println ( \"WebServer Type: \" + event . getWebServer (). getClass (). getName ()); } \u542f\u52a8\u9879\u76ee\uff0c\u4f9d\u7136\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\uff0c\u4f46\u7a0b\u5e8f\u5065\u58ee\u6027\u66f4\u4f73\uff0c\u5373\u4fbf\u4e0d\u5728Web\u5e94\u7528\u4e2d\u8fd0\u884c\uff0c\u4e5f\u4e0d\u4f1a\u6ce8\u5165 WebServerApplicationContext \u5931\u8d25\uff1a 2020-08-07 15:24:05.760 INFO 4413 --- [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8080 (http) WebServer Type: org.springframework.boot.web.embedded.undertow.UndertowWebServer 2020-08-07 15:24:05.772 INFO 4413 --- [ main] deep.in.spring.boot.App : Started App in 1.87 seconds (JVM running for 2.319) \u6ce8\u610f\u8f93\u51fa\u7684\u987a\u5e8f\uff0c\u7406\u89e3\u4e8b\u4ef6\u673a\u5236\u7684\u65f6\u5e8f\u3002","title":"4. Undertow\u4f5c\u4e3a\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/#5-jettyreactive-web","text":"\u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u82e5\u8981\u4f7f\u7528Jetty\u4f5c\u4e3aWeb\u5bb9\u5668\uff0c\u53ea\u9700\u4fee\u6539 pom.xml \u4e2d\u7684\u4f9d\u8d56\u5373\u53ef\uff1a <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-jetty </artifactId> </dependency> \u542f\u52a8\u9879\u76ee\u5f97\u5230\u7c7b\u4f3c\u7684\u8f93\u51fa\uff1a 2020-08-07 15:32:04.568 INFO 4478 --- [ main] o.s.b.web.embedded.jetty.JettyWebServer : Jetty started on port(s) 8080 (http/1.1) with context path '/' WebServer Type: org.springframework.boot.web.embedded.jetty.JettyWebServer 2020-08-07 15:32:04.579 INFO 4478 --- [ main] deep.in.spring.boot.App : Started App in 1.448 seconds (JVM running for 1.877)","title":"5. Jetty\u4f5c\u4e3a\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/#6-tomcatreactive-web","text":"\u8981\u6ce8\u610f\u7684\u662f\uff0cTomcat\u662fServlet Web\u7684\u9ed8\u8ba4\u5bb9\u5668\uff0c\u4f46\u4e0d\u662fReactive Web\u7684\u9ed8\u8ba4\u5bb9\u5668\u3002 \u540c\u6837\u8981\u4f7f\u7528Tomcat\uff0c\u4fee\u6539 pom.xml : <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-tomcat </artifactId> </dependency> \u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a 2020-08-07 15:35:03.966 INFO 4497 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' WebServer Type: org.springframework.boot.web.embedded.tomcat.TomcatWebServer 2020-08-07 15:35:03.977 INFO 4497 --- [ main] deep.in.spring.boot.App : Started App in 1.677 seconds (JVM running for 2.116)","title":"6. Tomcat\u4f5c\u4e3a\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668"},{"location":"SpringBoot/03-spring-boot-embedded-web-server/#7-reactive-web","text":"Netty\u4f5c\u4e3a\u9ed8\u8ba4\u7684Reactive Web\u5bb9\u5668\uff0c\u82e5\u8981\u4f7f\u7528\uff0c\u53bb\u6389\u5bb9\u5668\u4f9d\u8d56\u5373\u53ef\uff1a 2020-08-07 15:36:58.625 INFO 4510 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 8080 WebServer Type: org.springframework.boot.web.embedded.netty.NettyWebServer 2020-08-07 15:36:58.638 INFO 4510 --- [ main] deep.in.spring.boot.App : Started App in 1.393 seconds (JVM running for 1.811)","title":"7. \u9ed8\u8ba4\u7684\u5d4c\u5165\u5f0fReactive Web\u5bb9\u5668"},{"location":"SpringBoot/04-spring-boot-understanding-auto-config/","text":"04 - \u7406\u89e3\u81ea\u52a8\u88c5\u914d Spring Boot\u5b98\u65b9\u6587\u6863\u5bf9\u81ea\u52a8\u88c5\u914d(Auto-configuration)\u505a\u4e86\u7b80\u5355\u4ecb\u7ecd\uff1a Spring Boot auto-configuration attempts to automatically configure your Spring application based on the jar dependencies that you have added. For example, if HSQLDB is on your classpath, and you have not manually configured any database connection beans, then Spring Boot auto-configures an in-memory database. You need to opt-in to auto-configuration by adding the @EnableAutoConfiguration or @SpringBootApplication annotations to one of your @Configuration classes. \u81ea\u52a8\u88c5\u914d\u662f\u5b58\u5728\u524d\u63d0\u7684\uff0c\u57fa\u4e8e\u6dfb\u52a0\u7684JAR\u6587\u4ef6\u4f9d\u8d56\uff0c\u4f46\u81ea\u52a8\u88c5\u914d\u7684\u5b9e\u4f53\u5e76\u975e\u4e00\u5b9a\u88c5\u8f7d\u3002 \u6587\u6863\u4e3e\u4f8b\u8bf4\u660e\u5f53 HSQLDB \u5728Class Path\u4e2d\uff0c\u4e0d\u9700\u8981\u624b\u52a8\u914d\u7f6e\u6570\u636e\u5e93\u8fde\u63a5\u7684Beans\uff0c\u800c\u662fSpring Boot\u81ea\u52a8\u88c5\u914d\u4e00\u4e2a\u5185\u5b58\u578b\u7684\u6570\u636e\u5e93\u3002\u6dfb\u52a0\u5982\u4e0b\u4f9d\u8d56\u5230 pom.xml \u4e2d( spring-boot-dependencies \u4e2d\u5df2\u7ecf\u5305\u542b\u4e86 HSQLDB \u7684\u7248\u672c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u518d\u6b21\u6307\u5b9a)\uff1a <dependency> <groupId> org.hsqldb </groupId> <artifactId> hsqldb </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-jdbc </artifactId> <version> 2.3.2.RELEASE </version> </dependency> \u6dfb\u52a0\u6570\u636e\u5e93\u8868\u548c\u6570\u636e\uff0c\u5c06 schema.sql \u548c data.sql \u6587\u4ef6\u76f4\u63a5\u653e\u5230 resources \u76ee\u5f55\u4e0b\u5373\u53ef\uff1a CREATE TABLE person ( id INT NOT NULL , name varchar ( 50 ) DEFAULT NULL ) INSERT INTO person ( id , name ) VALUES ( 1 , 'Tom' ); INSERT INTO person ( id , name ) VALUES ( 2 , 'Jerry' ); \u65e0\u9700\u4efb\u4f55\u5176\u4ed6\u914d\u7f6e\uff0c\u76f4\u63a5\u542f\u52a8\u9879\u76ee\uff1a . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-13 09:18:07.994 INFO 2034 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 2034 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot) 2020-08-13 09:18:07.996 INFO 2034 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-13 09:18:08.837 INFO 2034 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-08-13 09:18:08.848 INFO 2034 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-08-13 09:18:08.848 INFO 2034 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.37] 2020-08-13 09:18:08.912 INFO 2034 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-08-13 09:18:08.912 INFO 2034 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 872 ms 2020-08-13 09:18:09.032 INFO 2034 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Starting... 2020-08-13 09:18:09.037 WARN 2034 --- [ main] com.zaxxer.hikari.util.DriverDataSource : Registered driver with driverClassName=org.hsqldb.jdbcDriver was not found, trying direct instantiation. 2020-08-13 09:18:09.675 INFO 2034 --- [ main] com.zaxxer.hikari.pool.PoolBase : HikariPool-1 - Driver does not support get/set network timeout for connections. (feature not supported) 2020-08-13 09:18:09.678 INFO 2034 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Start completed. 2020-08-13 09:18:09.907 INFO 2034 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-08-13 09:18:10.257 INFO 2034 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-13 09:18:10.269 INFO 2034 --- [ main] deep.in.spring.boot.App : Started App in 2.572 seconds (JVM running for 3.027) \u4ece\u65e5\u5fd7\u4e2d\u53ef\u4ee5\u770b\u5230\uff0cSpring Boot\u81ea\u52a8\u521d\u59cb\u5316\u4e86 HikariDataSource \u4f5c\u4e3a\u6570\u636e\u5e93\u8fde\u63a5\u6c60\uff0c\u7ee7\u7eed\u7f16\u5199\u5e94\u7528\u4ee3\u7801\uff1a @Autowired private JdbcTemplate jdbcTemplate ; @RequestMapping ( \"/listuser\" ) public List listuser (){ return jdbcTemplate . queryForList ( \"select * from person\" ); } \u76f4\u63a5\u6d4b\u8bd5\u63a5\u53e3\u5373\u53ef\uff1a $ curl http://localhost:8080/listuser | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 47 0 47 0 0 15666 0 --:--:-- --:--:-- --:--:-- 15666 [ { \"ID\" : 1, \"NAME\" : \"Tom\" }, { \"ID\" : 2, \"NAME\" : \"Jerry\" } ] \u6ca1\u6709\u914d\u7f6e\u6570\u636e\u6e90\uff0c\u6ca1\u6709\u914d\u7f6e JdbcTemplate Bean\uff0c\u4f46\u53ef\u4ee5\u76f4\u63a5\u6ce8\u5165\u4f7f\u7528\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u90fd\u662f\u81ea\u52a8\u88c5\u914d\u7684\u3002 \u5b98\u65b9\u6587\u6863\u7ee7\u7eed\u4ecb\u7ecd\uff0c\u6ce8\u89e3 @EnableAutoConfiguration \u6216 @SpringBootApplication \u6807\u6ce8\u5230\u4efb\u4e00 @Configuration \u7c7b\u4e0a\uff0c\u5373\u53ef\u5f00\u542f\u81ea\u52a8\u88c5\u914d\u3002\u4f46\u5374\u6ca1\u6709\u4ecb\u7ecd @Configuration \u5982\u4f55\u88c5\u914d\u3002\u5728Spring Framework\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 @Import \u548c @ComponentScan \u6ce8\u89e3\u6765\u88c5\u914d\uff0c\u7531 AnnotationConfigApplicationContext \u6765\u6ce8\u518c\u3002 1. \u7406\u89e3 @SpringBootApplication \u00b6 \u5b98\u65b9\u6587\u6863\u4e5f\u8bf4\u4e86\u4f7f\u7528 @SpringBootApplication \u53ef\u4ee5\u5f00\u542f\u81ea\u52a8\u88c5\u914d\uff0c\u4e0b\u9762\u4ece\u6b64\u5904\u5165\u624b\uff0c\u9996\u5148\u770b\u5b98\u65b9\u6587\u6863\u7684\u89e3\u91ca\uff1a Using the @SpringBootApplication Annotation Many Spring Boot developers like their apps to use auto-configuration, component scan and be able to define extra configuration on their \"application class\". A single @SpringBootApplication annotation can be used to enable those three features, that is: @EnableAutoConfiguration : enable Spring Boot\u2019s auto-configuration mechanism @ComponentScan : enable @Component scan on the package where the application is located (see the best practices) @Configuration : allow to register extra beans in the context or import additional configuration classes \u53ef\u4ee5\u770b\u51fa\uff0c @SpringBootApplication \u6fc0\u6d3b\u4e86\u4e09\u4e2a\u6ce8\u89e3\u7279\u6027\uff0c\u5176\u4e2d @EnableAutoConfiguration \u6fc0\u6d3bSpring Boot\u7684\u81ea\u52a8\u88c5\u914d\u673a\u5236\uff1b @ComponentScan \u6fc0\u6d3b @Component \u626b\u63cf\uff1b @Configuration \u5141\u8bb8\u6ce8\u518c\u66f4\u591a\u7684bean\u5230\u4e0a\u4e0b\u6587\u4e2d\u6216\u5bfc\u5165\u66f4\u591a\u7684\u914d\u7f6e\u7c7b\u3002\u5e76\u4e14\u7ed9\u51fa\u4ee3\u7801\u793a\u4f8b\uff1a package com.example.myapplication ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } \u4f7f\u75283\u4e2a\u6ce8\u89e3\u66ff\u6362 @SpringBootApplication \uff0c\u91cd\u6784\u9879\u76ee\u4ee3\u7801\uff1a @RestController @EnableAutoConfiguration @ComponentScan @Configuration public class App { ... } \u91cd\u65b0\u542f\u52a8\u9879\u76ee\uff0c\u53d1\u73b0\u4e00\u5207\u6b63\u5e38\uff0c\u6d4b\u8bd5HTTP\u670d\u52a1\u4e5f\u5e76\u65e0\u5f02\u5e38\uff0c\u8bf4\u660e\u66ff\u6362\u548c\u6587\u6863\u6240\u8ff0\u65e0\u8bef\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u5374\u8981\u590d\u6742\u4e00\u4e9b\uff0c\u770b\u4e00\u4e0b @SpringBootApplication \u6ce8\u89e3\u58f0\u660e\uff1a @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan ( excludeFilters = { @Filter ( type = FilterType . CUSTOM , classes = TypeExcludeFilter . class ), @Filter ( type = FilterType . CUSTOM , classes = AutoConfigurationExcludeFilter . class ) }) public @interface SpringBootApplication { ... } \u6587\u6863\u7684\u63cf\u8ff0\u548c\u4ee3\u7801\u5b9e\u9645\u662f\u6709\u533a\u522b\u7684\uff0c\u5b9e\u9645\u5f15\u7528\u8fd8\u5e94\u4ee5\u6e90\u7801\u4e3a\u51c6\uff0c\u6587\u6863\u4f5c\u4e3a\u53c2\u8003\u3002 \u5b9e\u9645\u4e0a\uff0c @SpringBootApplication \u7b49\u4ef7\u4e8e @SpringBootConfiguration \u3001 @EnableAutoConfiguration \u548c @ComponentScan \uff0c\u4f46 @ComponentScan \u5e76\u975e\u9ed8\u8ba4\u503c\uff0c\u800c\u662f\u52a0\u5165\u4e86\u6392\u9664\uff1a TypeExcludeFilter \u548c AutoConfigurationExcludeFilter \u3002 TypeExcludeFilter \u7528\u4e8e\u67e5\u627e BeanFactory \u4e2d\u5df2\u7ecf\u6ce8\u518c\u7684 TypeExcludeFilter Bean\uff0c\u4f5c\u4e3a\u4ee3\u7406\u6267\u884c\u5bf9\u8c61\u3002 public class TypeExcludeFilter implements TypeFilter , BeanFactoryAware { private BeanFactory beanFactory ; private Collection < TypeExcludeFilter > delegates ; @Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { this . beanFactory = beanFactory ; } @Override public boolean match ( MetadataReader metadataReader , MetadataReaderFactory metadataReaderFactory ) throws IOException { if ( this . beanFactory instanceof ListableBeanFactory && getClass () == TypeExcludeFilter . class ) { for ( TypeExcludeFilter delegate : getDelegates ()) { if ( delegate . match ( metadataReader , metadataReaderFactory )) { return true ; } } } return false ; } private Collection < TypeExcludeFilter > getDelegates () { Collection < TypeExcludeFilter > delegates = this . delegates ; if ( delegates == null ) { delegates = (( ListableBeanFactory ) this . beanFactory ). getBeansOfType ( TypeExcludeFilter . class ). values (); this . delegates = delegates ; } return delegates ; } ... } AutoConfigurationExcludeFilter \u7528\u4e8e\u6392\u9664\u5176\u4ed6\u540c\u65f6\u6807\u6ce8 @EnableAutoConfiguration \u548c @Configuration \u7684\u7c7b\uff1a public class AutoConfigurationExcludeFilter implements TypeFilter , BeanClassLoaderAware { private ClassLoader beanClassLoader ; private volatile List < String > autoConfigurations ; @Override public void setBeanClassLoader ( ClassLoader beanClassLoader ) { this . beanClassLoader = beanClassLoader ; } @Override public boolean match ( MetadataReader metadataReader , MetadataReaderFactory metadataReaderFactory ) throws IOException { return isConfiguration ( metadataReader ) && isAutoConfiguration ( metadataReader ); } private boolean isConfiguration ( MetadataReader metadataReader ) { return metadataReader . getAnnotationMetadata (). isAnnotated ( Configuration . class . getName ()); } private boolean isAutoConfiguration ( MetadataReader metadataReader ) { return getAutoConfigurations (). contains ( metadataReader . getClassMetadata (). getClassName ()); } protected List < String > getAutoConfigurations () { if ( this . autoConfigurations == null ) { this . autoConfigurations = SpringFactoriesLoader . loadFactoryNames ( EnableAutoConfiguration . class , this . beanClassLoader ); } return this . autoConfigurations ; } } \u800c @SpringBootConfiguration \u7684\u58f0\u660e\u4e3a\uff1a @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Configuration public @interface SpringBootConfiguration { ... } @Configuration \u7684\u58f0\u660e\u4e3a\uff1a @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Component public @interface Configuration { ... } \u53ef\u4ee5\u53d1\u73b0\u5c42\u7ea7\u5173\u7cfb\u4e3a\uff1a @Component @Configuration @SpringBootConfiguration @ComponentScan \u4ec5\u5173\u6ce8 @Component \uff0c\u800c @SpringBootConfiguration \u5c5e\u4e8e @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c\u6240\u4ee5\u80fd\u591f\u88ab @ComponentScan \u8bc6\u522b\u3002 @Repository \u3001 @Service \u3001 @Controller \u5c5e\u4e8e @Component \u7684\u76f4\u63a5\u6d3e\u751f\u6ce8\u89e3\uff0c\u4e5f\u88ab\u79f0\u4e3aSpring\u6a21\u5f0f\u6ce8\u89e3(Stereotype Annotation) \u5b98\u65b9\u6587\u6863\u7ee7\u7eed\u7b80\u5355\u4ecb\u7ecd\u4e86 @SpringBootApplication \u7684\u5c5e\u6027\u522b\u540d @SpringBootApplication also provides aliases to customize the attributes of @EnableAutoConfiguration and @ComponentScan @SpringBootApplication \u7684\u5c5e\u6027\u65b9\u6cd5\u58f0\u660e\u4e3a\uff1a public @interface SpringBootApplication { @AliasFor ( annotation = EnableAutoConfiguration . class ) Class <?>[] exclude () default {}; /** * ... * @since 1.3.0 */ @AliasFor ( annotation = EnableAutoConfiguration . class ) String [] excludeName () default {}; /** * ... * @since 1.3.0 */ @AliasFor ( annotation = ComponentScan . class , attribute = \"basePackages\" ) String [] scanBasePackages () default {}; /** * ... * @since 1.3.0 */ @AliasFor ( annotation = ComponentScan . class , attribute = \"basePackageClasses\" ) Class <?>[] scanBasePackageClasses () default {}; /** * ... * @since 2.3.0 */ @AliasFor ( annotation = ComponentScan . class , attribute = \"nameGenerator\" ) Class <? extends BeanNameGenerator > nameGenerator () default BeanNameGenerator . class ; /** * ... * @since 2.2 */ @AliasFor ( annotation = Configuration . class ) boolean proxyBeanMethods () default true ; } \u901a\u8fc7 @AliasFor \uff0c\u53ef\u4ee5\u5c06\u6ce8\u89e3\u5c5e\u6027\u522b\u540d\u5230\u67d0\u4e2a\u6ce8\u89e3\u4e2d\uff0c\u91cd\u6784\u4e00\u4e0b\u4ee3\u7801\uff0c\u5c06\u5f15\u5bfc\u7c7b\u8c03\u6574\u5230 deep.in.spring.boot.app \u5305\u4e2d\u5e76\u91cd\u65b0\u547d\u540d\uff1a package deep.in.spring.boot.app ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.EnableAutoConfiguration ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.context.annotation.ComponentScan ; import org.springframework.context.annotation.Configuration ; //@EnableAutoConfiguration //@ComponentScan //@Configuration @SpringBootApplication ( scanBasePackages = \"deep.in.spring.boot.config\" ) public class FirstSpringBootApp { public static void main ( String [] args ) { SpringApplication . run ( FirstSpringBootApp . class , args ); } } \u5c06 @EventListener \u65b9\u6cd5\u62bd\u53d6\u81f3 deep.in.spring.boot.config.WebConfig \u914d\u7f6e\u7c7b\u4e2d\uff1a package deep.in.spring.boot.config ; import org.springframework.boot.web.context.WebServerInitializedEvent ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.event.EventListener ; @Configuration public class WebConfig { @EventListener ( WebServerInitializedEvent . class ) public void onWebServerReady ( WebServerInitializedEvent event ) { System . out . println ( \"WebServer Type: \" + event . getWebServer (). getClass (). getName ()); System . out . println ( \"ApplicationContext: \" + event . getApplicationContext (). getClass (). getName ()); } } \u6ce8\u610f\u5728 FirstSpringBootApp \u4e2d\u518d\u6b21\u4f7f\u7528 @SpringBootApplication \uff0c\u5e76\u8bbe\u7f6e\u5c5e\u6027 scanBasePackages = \"deep.in.spring.boot.config\" \u3002 \u518d\u6b21\u542f\u52a8\u9879\u76ee\uff0c\u770b\u5230\u8f93\u51fa\uff1a . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-19 14:11:28.722 INFO 6047 --- [ main] d.in.spring.boot.app.FirstSpringBootApp : Starting FirstSpringBootApp on nanleis-MacBook-Pro.local with PID 6047 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot) (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) 2020-08-19 14:11:30.921 INFO 6047 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' WebServer Type: org.springframework.boot.web.embedded.tomcat.TomcatWebServer ApplicationContext: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext 2020-08-19 14:11:30.929 INFO 6047 --- [ main] d.in.spring.boot.app.FirstSpringBootApp : Started FirstSpringBootApp in 2.497 seconds (JVM running for 2.935) \u8bf4\u660e\u914d\u7f6e\u7c7b\u8fd0\u884c\u6b63\u5e38\uff0c\u82e5\u4e0d\u914d\u7f6e scanBasePackages \u5c5e\u6027\uff0c\u90a3\u4e48\u914d\u7f6e\u7c7b WebConfig \u5c06\u4e0d\u4f1a\u88ab\u626b\u63cf\u5230\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c @SpringBootApplication \u662f\u4e00\u4e2a\u805a\u5408\u6ce8\u89e3\uff0c\u5305\u542b @SpringBootConfiguration \u3001 @EnableAutoConfiguration \u548c @ComponentScan \u7684\u7279\u6027\uff0c\u7c7b\u4f3c\u6ce8\u89e3\u8fd8\u6709 @RestController \uff0c\u805a\u5408\u4e86 @Controller \u548c @ResponseBody \u3002 @SpringBootApplication \u901a\u5e38\u6807\u6ce8\u4e8e\u5f15\u5bfc\u7c7b\u4e0a\uff0c\u4f46\u5e76\u4e0d\u9650\u5236\u3002\u82e5\u5c06\u5176\u6807\u6ce8\u4e8e\u975e\u5f15\u5bfc\u7c7b\u4e0a\uff0c\u8c03\u6574\u4ee3\u7801\u5982\u4e0b\uff1a package deep.in.spring.boot.config ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.web.context.WebServerInitializedEvent ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.event.EventListener ; //@Configuration @SpringBootApplication public class WebConfig { @EventListener ( WebServerInitializedEvent . class ) public void onWebServerReady ( WebServerInitializedEvent event ) { System . out . println ( \"WebServer Type: \" + event . getWebServer (). getClass (). getName ()); System . out . println ( \"ApplicationContext: \" + event . getApplicationContext (). getClass (). getName ()); } } \u56e0\u4e3a @SpringBootApplication \u5df2\u7ecf\u5305\u542b @Configuration \u7279\u6027\uff0c\u6b64\u5904\u4e0d\u518d\u9700\u8981\u3002 \u5f15\u5bfc\u7c7b FirstSpringBootApp \u4ec5\u4fdd\u7559 main() \u65b9\u6cd5\uff0c SpringApplication.run() \u7684\u5165\u53c2\u8c03\u6574\u4e3a WebConfig.class \uff1a package deep.in.spring.boot.app ; import deep.in.spring.boot.config.WebConfig ; import org.springframework.boot.SpringApplication ; public class FirstSpringBootApp { public static void main ( String [] args ) { //SpringApplication.run(FirstSpringBootApp.class, args); SpringApplication . run ( WebConfig . class , args ); } } \u91cd\u65b0\u542f\u52a8\u7a0b\u5e8f\uff0c\u8fd0\u884c\u6548\u679c\u4f9d\u65e7\u3002 2. \u7406\u89e3 @EnableAutoConfiguration \u00b6 \u5b98\u65b9\u6587\u6863\u63d0\u5230\u4e86 @EnableAutoConfiguration \u548c @SpringBootApplication \u90fd\u80fd\u6fc0\u6d3b\u81ea\u52a8\u88c5\u914d\u7279\u6027\uff0c\u4f46\u4e3a\u4e86\u8bf4\u660e @EnableAutoConfiguration \u548c @SpringBootApplication \u7684\u5dee\u522b\uff0c\u5c06\u9879\u76ee\u8c03\u6574\u4e3a webflux \u9879\u76ee\uff1a <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-webflux </artifactId> <version> 2.3.2.RELEASE </version> </dependency> \u5728 WebConfg \u7c7b\u4e2d\uff0c\u6dfb\u52a0 RouterFunction \u7684Bean\uff0c\u5e76\u4f7f\u7528 @EnableAutoConfiguration \u6765\u6ce8\u89e3\uff1a package deep.in.spring.boot.config ; import org.springframework.boot.autoconfigure.EnableAutoConfiguration ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.web.context.WebServerInitializedEvent ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.event.EventListener ; import org.springframework.web.reactive.function.server.RouterFunction ; import org.springframework.web.reactive.function.server.ServerResponse ; import reactor.core.publisher.Mono ; import static org.springframework.web.reactive.function.server.ServerResponse.ok ; import static org.springframework.web.reactive.function.server.RequestPredicates.GET ; import static org.springframework.web.reactive.function.server.RouterFunctions.route ; //@Configuration //@SpringBootApplication @EnableAutoConfiguration public class WebConfig { @Bean public RouterFunction < ServerResponse > helloworld () { return route ( GET ( \"/helloworld\" ), request -> ok (). body ( Mono . just ( \"Hello World\" ), String . class ) ); } @EventListener ( WebServerInitializedEvent . class ) public void onWebServerReady ( WebServerInitializedEvent event ) { System . out . println ( \"WebServer Type: \" + event . getWebServer (). getClass (). getName ()); System . out . println ( \"ApplicationContext: \" + event . getApplicationContext (). getClass (). getName ()); System . out . println ( \"WebConfig Bean:\" + event . getApplicationContext (). getBean ( WebConfig . class ). getClass (). getName ()); System . out . println ( \"helloworld Bean: \" + event . getApplicationContext (). getBean ( \"helloworld\" ). getClass (). getName ()); } } \u542f\u52a8\u7a0b\u5e8f\uff0c\u5f97\u5230\u8f93\u51fa\uff1a (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) WebServer Type: org.springframework.boot.web.embedded.netty.NettyWebServer ApplicationContext: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext WebConfig Bean:deep.in.spring.boot.config.WebConfig helloworld Bean: org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction 2020-08-19 15:32:38.305 INFO 6752 --- [ main] d.in.spring.boot.app.FirstSpringBootApp : Started FirstSpringBootApp in 1.93 seconds (JVM running for 2.33) \u6d4b\u8bd5 /helloworld \u4e5f\u6ca1\u6709\u95ee\u9898\uff1a $ curl http://127.0.0.1:8080/helloworld Hello World \u7531\u6b64\u8bf4\u660e\uff0c @EnableAutoConfiguration \u6ce8\u89e3\u7684 WebConfig \u7c7b\u5728\u8fd0\u884c\u4e0a\u4e0e @SpringBootApplication \u5e76\u65e0\u5dee\u522b\uff0c\u4e5f\u5c31\u662f SpringApplication.run() \u65b9\u6cd5\u5f15\u5bfc\u542f\u52a8\u65f6\uff0c\u5e76\u4e0d\u5f3a\u4f9d\u8d56 @Configuration \u6ce8\u89e3\u3002 \u5b98\u65b9\u6587\u6863\u5bf9\u6b64\u4e5f\u6709\u7b80\u8981\u8bf4\u660e\uff1a Configuration Classes Spring Boot favors Java-based configuration. Although it is possible to use SpringApplication with XML sources, we generally recommend that your primary source be a single @Configuration class. Usually the class that defines the main method is a good candidate as the primary @Configuration . \u4e3a\u4e86\u8bf4\u660e\u548c @SpringBootApplication \u7684\u5dee\u5f02\uff0c\u4e5f\u5c31\u662f @SpringBootApplication \u591a\u51fa\u7684 @Configuration \u7279\u6027( @ComponentScan \u7279\u6027\u5df2\u6709\u89e3\u91ca)\uff0c\u5c06 WebConfig \u7c7b\u7684\u6ce8\u89e3\u6539\u56de\uff0c\u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\uff1a (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) WebServer Type: org.springframework.boot.web.embedded.netty.NettyWebServer ApplicationContext: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext WebConfig Bean:deep.in.spring.boot.config.WebConfig$$EnhancerBySpringCGLIB$$757dd7cc helloworld Bean: org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction 2020-08-19 16:26:50.591 INFO 7301 --- [ main] d.in.spring.boot.app.FirstSpringBootApp : Started FirstSpringBootApp in 2.298 seconds (JVM running for 2.733) \u5f88\u660e\u663e\uff0c WebConfig Bean\u7684\u5b9e\u73b0\u7c7b\u4ece deep.in.spring.boot.config.WebConfig \u53d8\u4e3a deep.in.spring.boot.config.WebConfig$$EnhancerBySpringCGLIB$$757dd7cc \uff0c\u4e5f\u5c31\u662f\u540e\u8005\u4f7f\u7528\u4e86CGLIB\u8fdb\u884c\u63d0\u5347\uff0c\u8fd9\u4e5f\u662f @SpringBootApplication \u4f5c\u4e3a @Configuration \u6d3e\u751f\u6ce8\u89e3\u6700\u660e\u663e\u7684\u7279\u6027\uff0c\u5728SpringFrameork\u5b98\u65b9\u6587\u6863( https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#spring-core )\u4e2d\u4e5f\u6709\u4ecb\u7ecd\uff1a The @Bean methods in a regular Spring component are processed differently than their counterparts inside a Spring @Configuration class. The difference is that @Component classes are not enhanced with CGLIB to intercept the invocation of methods and fields. CGLIB proxying is the means by which invoking methods or fields within @Bean methods in @Configuration classes creates bean metadata references to collaborating objects. Such methods are not invoked with normal Java semantics but rather go through the container in order to provide the usual lifecycle management and proxying of Spring beans, even when referring to other beans through programmatic calls to @Bean methods. In contrast, invoking a method or field in a @Bean method within a plain @Component class has standard Java semantics, with no special CGLIB processing or other constraints applying. \u4e5f\u5c31\u662f @Component \u6ce8\u89e3\u7684\u7c7b\uff0cBean\u7684\u884c\u4e3a\u548c\u6b63\u5e38Java\u5bf9\u8c61\u8bed\u4e49\u76f8\u540c\uff0c\u4e0d\u5b58\u5728CGLIB\u5904\u7406\uff0c\u800c @Configuration \u6ce8\u89e3\u7684\u7c7b\uff0c\u8fdb\u884cCGLIB\u63d0\u5347\u3002 \u5b98\u65b9\u6587\u6863\u8fdb\u4e00\u6b65\u4ecb\u7ecd\uff1a Full @Configuration vs \u201clite\u201d @Bean mode? When @Bean methods are declared within classes that are not annotated with @Configuration , they are referred to as being processed in a \u201clite\u201d mode. Bean methods declared in a @Component or even in a plain old class are considered to be \u201clite\u201d, with a different primary purpose of the containing class and a @Bean method being a sort of bonus there. For example, service components may expose management views to the container through an additional @Bean method on each applicable component class. In such scenarios, @Bean methods are a general-purpose factory method mechanism. Unlike full @Configuration , lite @Bean methods cannot declare inter-bean dependencies. Instead, they operate on their containing component\u2019s internal state and, optionally, on arguments that they may declare. Such a @Bean method should therefore not invoke other @Bean methods. Each such method is literally only a factory method for a particular bean reference, without any special runtime semantics. The positive side-effect here is that no CGLIB subclassing has to be applied at runtime, so there are no limitations in terms of class design (that is, the containing class may be final and so forth). In common scenarios, @Bean methods are to be declared within @Configuration classes, ensuring that \u201cfull\u201d mode is always used and that cross-method references therefore get redirected to the container\u2019s lifecycle management. This prevents the same @Bean method from accidentally being invoked through a regular Java call, which helps to reduce subtle bugs that can be hard to track down when operating in \u201clite\u201d mode. \u7b80\u800c\u8a00\u4e4b\uff0c @Bean \u5728\u666e\u901aJava\u7c7b\u88ab\u58f0\u660e\u540e\uff0c\u5176\u884c\u4e3a\u548c\u5728 @Component \u7c7b\u4e0b\u7684\u58f0\u660e\u4e00\u81f4\uff0c\u5b98\u65b9\u79f0\u8fd9\u79cd\u65b9\u5f0f\u4e3a\u201c\u8f7b\u91cf\u6a21\u5f0f\u201d\uff0c\u800c\u5728 @Configuration \u7c7b\u4e2d\u7684\u58f0\u660e\u4e3a\u201c\u5b8c\u5168\u6a21\u5f0f\u201d\uff0c\u540e\u8005\u4f1a\u6267\u884cCGLIB\u63d0\u5347\u3002\u8fd9\u4e5f\u5c31\u662f\u524d\u9762\u4ee3\u7801\u8fd0\u884c\u7ed3\u679c\u7684\u5bf9\u6bd4\u3002 3. \u7406\u89e3\u81ea\u52a8\u914d\u7f6e \u00b6 \u524d\u9762\u6240\u8ff0\u7684 WebConfig \u5c5e\u4e8e\u7f16\u7801\u65b9\u5f0f\u88c5\u914d\uff0c\u800c\u4e0d\u662f\u81ea\u52a8\u88c5\u914d\u3002\u800c\u5176\u4ed6\u81ea\u52a8\u88c5\u914d\u7684Bean\u662f\u901a\u8fc7\u81ea\u52a8\u914d\u7f6e\u673a\u5236\u5b8c\u6210\u7684\u3002 \u5728Spring Boot\u4e4b\u524d\uff0cSpring Framework\u63d0\u4f9bBean\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u548c\u7f16\u7a0b\u6a21\u578b\uff0c\u6846\u67b6\u5c42\u9762\u5df2\u7ecf\u652f\u6301\u6d3e\u751f\u6ce8\u89e3\uff0c\u4f46\u5374\u4e0d\u80fd\u81ea\u52a8\u88c5\u914d @Configuration \u7c7b\u3002Spring Boot\u5728\u6b64\u57fa\u7840\u4e4b\u4e0a\u6dfb\u52a0\u4e86\u7ea6\u5b9a\u914d\u7f6e\u5316\u5bfc\u5165 @Configuration \u7c7b\u7684\u65b9\u5f0f\u3002 \u5b98\u65b9\u6587\u6863\u4ecb\u7ecd\u4e86\u5982\u4f55\u6784\u5efa\u81ea\u5b9a\u4e49\u81ea\u52a8\u88c5\u914d\u7c7b\uff1a Creating Your Own Auto-configuration If you work in a company that develops shared libraries, or if you work on an open-source or commercial library, you might want to develop your own auto-configuration. Auto-configuration classes can be bundled in external jars and still be picked-up by Spring Boot. Auto-configuration can be associated to a \u201cstarter\u201d that provides the auto-configuration code as well as the typical libraries that you would use with it. We first cover what you need to know to build your own auto-configuration and then we move on to the typical steps required to create a custom starter . \u81ea\u52a8\u88c5\u914d\u7c7b\u53ef\u4ee5\u6253\u5305\u5230\u5916\u90e8JAR\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u88abSpring Boot\u88c5\u8f7d\u3002\u81ea\u52a8\u88c5\u914d\u7c7b\u4e5f\u80fd\u88ab\u5173\u8054\u5230\u201cstarter\u201d\u4e2d\uff0c\u8fd9\u4e9b\u201cstarter\u201d\u63d0\u4f9b\u81ea\u52a8\u88c5\u914d\u7684\u4ee3\u7801\u53ca\u5173\u8054\u7684\u4f9d\u8d56\u3002 \u5b98\u65b9\u6587\u6863\u7ee7\u7eed\u4ecb\u7ecd\u4e86Spring Boot\u81ea\u52a8\u88c5\u914d\u5e95\u5c42\u5b9e\u73b0\u4e0e@Configuration\u548c@Conditional\u7684\u5173\u7cfb\uff1a Understanding Auto-configured Beans Under the hood, auto-configuration is implemented with standard @Configuration classes. Additional @Conditional annotations are used to constrain when the auto-configuration should apply. Usually, auto-configuration classes use @ConditionalOnClass and @ConditionalOnMissingBean annotations. This ensures that auto-configuration applies only when relevant classes are found and when you have not declared your own @Configuration . You can browse the source code of spring-boot-autoconfigure to see the @Configuration classes that Spring provides (see the META-INF/spring.factories file). \u6587\u6863\u4e2d\u63d0\u53ca @ConditionalOnClass \u548c @ConditionalOnMissingBean \u662f\u5e38\u7528\u7684\u6ce8\u89e3\u3002\u6839\u636e\u540d\u79f0\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u5f53 @ConditionalOnClass \u6ce8\u89e3\u5728 @Configuration \u7c7b\u4e0a\u65f6\uff0c\u5f53\u76ee\u6807\u7c7b\u5b58\u5728\u4e8eClass Path\u65f6\u4e88\u4ee5\u88c5\u914d\u3002\u8fd9\u5c31\u662f\u5f00\u5934\u63d0\u5230\u7684 HSQLDB \u5b58\u5728\u4e8e\u5e94\u7528\u7684Class Path\u65f6\uff0cSpring Boot\u63d0\u4f9b\u4e86\u81ea\u52a8\u88c5\u914d HSQLDB \u7684\u903b\u8f91\uff0c\u5728 DataSourceAutoConfiguration \u81ea\u52a8\u88c5\u914d\u7c7b\u4e2d\uff1a package org.springframework.boot.autoconfigure.jdbc ; ... @Configuration ( proxyBeanMethods = false ) @ConditionalOnClass ({ DataSource . class , EmbeddedDatabaseType . class }) @ConditionalOnMissingBean ( type = \"io.r2dbc.spi.ConnectionFactory\" ) @EnableConfigurationProperties ( DataSourceProperties . class ) @Import ({ DataSourcePoolMetadataProvidersConfiguration . class , DataSourceInitializationConfiguration . class }) public class DataSourceAutoConfiguration { @Configuration ( proxyBeanMethods = false ) @Conditional ( EmbeddedDatabaseCondition . class ) @ConditionalOnMissingBean ({ DataSource . class , XADataSource . class }) @Import ( EmbeddedDataSourceConfiguration . class ) protected static class EmbeddedDatabaseConfiguration { } @Configuration ( proxyBeanMethods = false ) @Conditional ( PooledDataSourceCondition . class ) @ConditionalOnMissingBean ({ DataSource . class , XADataSource . class }) @Import ({ DataSourceConfiguration . Hikari . class , DataSourceConfiguration . Tomcat . class , DataSourceConfiguration . Dbcp2 . class , DataSourceConfiguration . Generic . class , DataSourceJmxConfiguration . class }) protected static class PooledDataSourceConfiguration { } ... } \u4ee3\u7801\u4e2d\u5e76\u6ca1\u6709\u624b\u52a8\u914d\u7f6e DataSource Bean\uff0c\u90a3\u4e48 EmbeddedDatabaseConfiguration \u548c PooledDataSourceCondition \uff0c PooledDataSourceAvailableCondition \u5c31\u4f1a\u4f9d\u6b21\u8fdb\u884c\u5224\u65ad\u3002\u52a0\u5165\u7684 HSQLDB \u652f\u6301\u8fde\u63a5\u6c60\uff0c\u56e0\u6b64\u4f1a\u5728 HikariCP \u542f\u52a8\u7684\u65f6\u5019\u8fdb\u884c\u88c5\u914d\u3002 HikariCP \u7684\u81ea\u52a8\u88c5\u914d\u7c7b\u662f org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration \u4e2d\u7684 Hikari \u9759\u6001\u5185\u90e8\u7c7b\uff1a /** * Hikari DataSource configuration. */ @Configuration ( proxyBeanMethods = false ) @ConditionalOnClass ( HikariDataSource . class ) @ConditionalOnMissingBean ( DataSource . class ) @ConditionalOnProperty ( name = \"spring.datasource.type\" , havingValue = \"com.zaxxer.hikari.HikariDataSource\" , matchIfMissing = true ) static class Hikari { @Bean @ConfigurationProperties ( prefix = \"spring.datasource.hikari\" ) HikariDataSource dataSource ( DataSourceProperties properties ) { HikariDataSource dataSource = createDataSource ( properties , HikariDataSource . class ); if ( StringUtils . hasText ( properties . getName ())) { dataSource . setPoolName ( properties . getName ()); } return dataSource ; } } Hikari \u6570\u636e\u6e90\u80fd\u81ea\u52a8\u88c5\u914d\u662f PooledDataSourceConfiguration \u88ab\u6fc0\u6d3b\u540e @Import \u8fdb\u6765\u7684\uff0c\u800c HikariCP \u5df2\u7ecf\u662fSpring Boot\u9ed8\u8ba4\u4f7f\u7528\u7684\u8fde\u63a5\u6c60\u4e86\u3002\u6b64\u5904 Hikari \u8981\u6839\u636e DataSourceProperties \u8fdb\u884c\u6570\u636e\u6e90\u521b\u5efa\uff0c\u90a3\u4e48\u5728 DataSourceProperties \u4e2d\uff1a package org.springframework.boot.autoconfigure.jdbc ; ... @ConfigurationProperties ( prefix = \"spring.datasource\" ) public class DataSourceProperties implements BeanClassLoaderAware , InitializingBean { ... @Override public void afterPropertiesSet () throws Exception { this . embeddedDatabaseConnection = EmbeddedDatabaseConnection . get ( this . classLoader ); } ... } afterPropertiesSet \u662f InitializingBean \u63a5\u53e3\u4e2d\u7684\u552f\u4e00\u65b9\u6cd5\uff1a package org.springframework.beans.factory ; /** * Interface to be implemented by beans that need to react once all their properties * have been set by a {@link BeanFactory}: e.g. to perform custom initialization, * or merely to check that all mandatory properties have been set. * * <p>An alternative to implementing {@code InitializingBean} is specifying a custom * init method, for example in an XML bean definition. For a list of all bean * lifecycle methods, see the {@link BeanFactory BeanFactory javadocs}. * * @author Rod Johnson * @author Juergen Hoeller * @see DisposableBean * @see org.springframework.beans.factory.config.BeanDefinition#getPropertyValues() * @see org.springframework.beans.factory.support.AbstractBeanDefinition#getInitMethodName() */ public interface InitializingBean { /** * Invoked by the containing {@code BeanFactory} after it has set all bean properties * and satisfied {@link BeanFactoryAware}, {@code ApplicationContextAware} etc. * <p>This method allows the bean instance to perform validation of its overall * configuration and final initialization when all bean properties have been set. * @throws Exception in the event of misconfiguration (such as failure to set an * essential property) or if initialization fails for any other reason */ void afterPropertiesSet () throws Exception ; } \u4e5f\u5c31\u662f\u5728Bean\u521d\u59cb\u5316\u65f6\uff0c\u8bbe\u7f6e\u5b8c\u5c5e\u6027\u540e\u8981\u56de\u8c03\u7684\u65b9\u6cd5\uff0c DataSourceProperties \u5c31\u5728\u6b64\u65f6\u8c03\u7528 EmbeddedDatabaseConnection.get(this.classLoader) \u6765\u83b7\u53d6\u5230\u5185\u5d4c\u6570\u636e\u5e93\u7684\u4fe1\u606f\uff0c\u5177\u4f53\u5b9e\u73b0\u4e3a\uff1a package org.springframework.boot.jdbc ; ... public enum EmbeddedDatabaseConnection { ... /** * HSQL Database Connection. */ HSQL ( EmbeddedDatabaseType . HSQL , \"org.hsqldb.jdbcDriver\" , \"jdbc:hsqldb:mem:%s\" ); ... /** * Returns the most suitable {@link EmbeddedDatabaseConnection} for the given class * loader. * @param classLoader the class loader used to check for classes * @return an {@link EmbeddedDatabaseConnection} or {@link #NONE}. */ public static EmbeddedDatabaseConnection get ( ClassLoader classLoader ) { for ( EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection . values ()) { if ( candidate != NONE && ClassUtils . isPresent ( candidate . getDriverClassName (), classLoader )) { return candidate ; } } return NONE ; } ... } \u81f3\u6b64\uff0c\u5185\u5d4c\u6570\u636e\u5e93 HSQLDB \u901a\u8fc7\u9ed8\u8ba4\u6570\u636e\u6e90 HikariCP \u7684\u81ea\u52a8\u88c5\u914d\u5b9e\u73b0\u4e86\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c DataSourceAutoConfiguration \u548c\u5185\u90e8 @Configuration \u7c7b\u540c\u6837\u90fd\u7ed3\u5408\u4e86 @Configuration \u548c @Conditional \u7279\u6027\uff0c\u5185\u90e8\u7684 @Configuration \u7c7b\u968f\u7740 DataSourceAutoConfiguration \u7684\u88c5\u914d\u800c\u88c5\u914d\u3002 \u90a3\u4e48 DataSourceAutoConfiguration \u53c8\u662f\u5982\u4f55\u88ab\u88c5\u914d\u7684\uff0c\u56de\u5230\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u6700\u540e\u4e00\u6bb5\u4ecb\u7ecd\uff0c\u8fd9\u4e9b\u81ea\u52a8\u88c5\u914d\u7c7b\u90fd\u5728 META-INF/spring.factories \u4e0b\uff0c\u5373\u5728 spring-boot-autoconfigure \u4f9d\u8d56\u4e2d\u3002 spring-boot-autoconfigure \u662fSpring Boot\u7684\u6838\u5fc3\u4f9d\u8d56\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u81ea\u52a8\u88c5\u914d @Configuration \u7c7b\uff0c\u5e76\u7edf\u4e00\u5b58\u653e\u5728 org.springframework.boot.autoconfigure \u5305\u548c\u5b50\u5305\u4e0b\uff0c\u5b8c\u6574\u7684\u81ea\u52a8\u88c5\u914d\u7c7b\u53ef\u53c2\u7167 META-INF/spring.factories \u6587\u4ef6\u3002 4. \u521b\u5efa\u81ea\u52a8\u914d\u7f6e\u7c7b \u00b6 \u521b\u5efa\u81ea\u52a8\u88c5\u914d\u7c7b WebAutoConfiguration \uff1a package deep.in.spring.boot.autoconfigure ; import deep.in.spring.boot.config.WebConfig ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.Import ; @Configuration @Import ( WebConfig . class ) public class WebAutoConfiguration { } \u8fd9\u91cc\u4f7f\u7528 @Import \u5bfc\u5165\u914d\u7f6e\u7c7b WebConfig \uff0c\u540c\u65f6\u5728 src/main/resource \u4e0b\u521b\u5efa META-INF/spring.factories \u6587\u4ef6\uff0c\u5c06 WebAutoConfiguration \u914d\u7f6e\u8fdb\u53bb\uff1a #Auto-Configuration org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ deep.in.spring.boot.autoconfigure.WebAutoConfiguration \u540c\u65f6\u4fee\u6539 WebConfig \uff0c\u4f7f\u5176\u4ec5\u4f5c\u4e3a @Configuration \u7c7b\uff1a package deep.in.spring.boot.config ; ... @Configuration //@SpringBootApplication //@EnableAutoConfiguration public class WebConfig { ... } \u6700\u540e\u4fee\u6539\u5f15\u5bfc\u7c7b App.java \uff0c\u4ec5\u6807\u6ce8 @EnableAutoConfiguration \uff0c\u540c\u65f6\u8c03\u6574SpringApplication.run()\u65b9\u6cd5\u53c2\u6570\uff1a package deep.in.spring.boot ; ... @RestController @EnableAutoConfiguration //@ComponentScan //@Configuration //@SpringBootApplication public class App { ... public static void main ( String [] args ) { SpringApplication . run ( App . class , args ); } } \u8fd0\u884c\u9879\u76ee\uff0c\u53d1\u73b0\u5e76\u65e0\u5f02\u5e38\uff1a . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-27 10:54:53.368 INFO 2682 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 2682 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot) 2020-08-27 10:54:53.370 INFO 2682 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-27 10:54:54.216 INFO 2682 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Starting... 2020-08-27 10:54:54.227 WARN 2682 --- [ main] com.zaxxer.hikari.util.DriverDataSource : Registered driver with driverClassName=org.hsqldb.jdbcDriver was not found, trying direct instantiation. 2020-08-27 10:54:54.856 INFO 2682 --- [ main] com.zaxxer.hikari.pool.PoolBase : HikariPool-1 - Driver does not support get/set network timeout for connections. (feature not supported) 2020-08-27 10:54:54.859 INFO 2682 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Start completed. 2020-08-27 10:54:55.427 INFO 2682 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 8080 WebServer Type: org.springframework.boot.web.embedded.netty.NettyWebServer ApplicationContext: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext WebConfig Bean:deep.in.spring.boot.config.WebConfig$$EnhancerBySpringCGLIB$$e99faf97 helloworld Bean: org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction 2020-08-27 10:54:55.438 INFO 2682 --- [ main] deep.in.spring.boot.App : Started App in 2.441 seconds (JVM running for 2.906) \u8bf4\u660e WebAutoConfiguration \u5df2\u88ab\u81ea\u52a8\u88c5\u914d\u3002 *. \u793a\u4f8b\u4ee3\u7801\u542f\u52a8\u65e5\u5fd7 WARN \u6392\u67e5 \u00b6 \u793a\u4f8b\u4e2d\u7684\u542f\u52a8\u8fc7\u7a0b\u6709\u5982\u4e0b WARN \u8f93\u51fa\uff1a 2020-08-27 10:54:54.227 WARN 2682 --- [ main] com.zaxxer.hikari.util.DriverDataSource : Registered driver with driverClassName=org.hsqldb.jdbcDriver was not found, trying direct instantiation. \u8fd9\u662f com.zaxxer.hikari.util.DriverDataSource \u7684\u65e5\u5fd7\u8f93\u51fa\uff0c\u53ef\u4ee5\u67e5\u770b\u5230\u6e90\u7801\u7247\u6bb5\uff1a if ( driverClassName != null ) { Enumeration < Driver > drivers = DriverManager . getDrivers (); while ( drivers . hasMoreElements ()) { Driver d = drivers . nextElement (); if ( d . getClass (). getName (). equals ( driverClassName )) { driver = d ; break ; } } if ( driver == null ) { LOGGER . warn ( \"Registered driver with driverClassName={} was not found, trying direct instantiation.\" , driverClassName ); ... } ... } \u5982\u679c driver == null \uff0c\u90a3\u4e48\u5c31\u4f1a\u8f93\u51fa\u8be5\u65e5\u5fd7\uff0c\u8bf4\u660e\u4e0a\u9762\u83b7\u53d6 driver \u7684\u65f6\u5019\u6ca1\u6709\u83b7\u53d6\u5230\uff0c\u800c\u83b7\u53d6 driver \u7684\u5224\u65ad\u662f driverClassName \u7684\u5224\u65ad\u3002 \u7ed3\u5408 \u4e0a\u9762\u7684\u5206\u6790\u8fc7\u7a0b \uff0c\u5728 DataSourceProperties \u4e2d\uff0c afterPropertiesSet() \u65b9\u6cd5\u83b7\u53d6\u5230\u7684 embeddedDatabaseConnection \u5982\u4e0b\uff1a \u5176\u4e2d driverClass \u7684\u503c\u662f org.hsqldb.jdbcDriver \uff0c\u662f\u5728 EmbeddedDatabaseConnection \u4e2d\u7531\u679a\u4e3e\u5b9a\u4e49\u7684\u3002\u4e4b\u540e DataSourceConfiguration.Hikari \u5f00\u59cb\u81ea\u52a8\u88c5\u914d HikariDataSource \uff0c\u4f1a\u6267\u884c\u5230 HikariConfig \u4e2d\u5982\u4e0b\u4ee3\u7801\uff1a try { driverClass . getConstructor (). newInstance (); this . driverClassName = driverClassName ; } catch ( Exception e ) { throw new RuntimeException ( \"Failed to instantiate class \" + driverClassName , e ); } \u521b\u5efa driver \u5b9e\u4f8b\u65f6\uff0c\u4f1a\u6267\u884c\u5230 java.sql.DriverManager \u4e2d\uff1a \u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u6ce8\u518c\u7684 driver \u662f org.hsqldb.jdbc.JDBCDriver \uff0c\u56e0\u4e3a\u548c EmbeddedDatabaseConnection \u8bbe\u7f6e\u7684\u4e0d\u540c\uff0c\u6240\u4ee5\u5728 DriverDataSource \u4e2d\u6bd4\u8f83\u65f6\u5c31\u9020\u6210\u4e86\u4e0d\u5339\u914d\uff0c\u4f1a\u8f93\u51fa WARN \u65e5\u5fd7\u3002 \u4f46\u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u56e0\u6b64\u800c\u51fa\u9519\uff0c\u662f\u56e0\u4e3a\uff1a package org.hsqldb ; public class jdbcDriver extends org . hsqldb . jdbc . JDBCDriver {} \u56e0\u6b64\uff0c DriverDataSource \u540e\u7eed\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528 org.hsqldb.jdbcDriver \u6765\u901a\u8fc7\u53cd\u5c04\u521b\u5efa driver \u5bf9\u8c61\uff1a \u56e0\u4e3a\u662fSpring Boot\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u5411Spring Boot\u5b98\u65b9\u63d0\u51fa\u8be5\u95ee\u9898\uff0c\u5e76\u6700\u7ec8\u786e\u8ba4\u662fBug\uff0c\u53ef\u4ee5\u53c2\u8003\uff1a https://github.com/spring-projects/spring-boot/issues/23036","title":"Understanding Auto-Configuration"},{"location":"SpringBoot/04-spring-boot-understanding-auto-config/#1-springbootapplication","text":"\u5b98\u65b9\u6587\u6863\u4e5f\u8bf4\u4e86\u4f7f\u7528 @SpringBootApplication \u53ef\u4ee5\u5f00\u542f\u81ea\u52a8\u88c5\u914d\uff0c\u4e0b\u9762\u4ece\u6b64\u5904\u5165\u624b\uff0c\u9996\u5148\u770b\u5b98\u65b9\u6587\u6863\u7684\u89e3\u91ca\uff1a Using the @SpringBootApplication Annotation Many Spring Boot developers like their apps to use auto-configuration, component scan and be able to define extra configuration on their \"application class\". A single @SpringBootApplication annotation can be used to enable those three features, that is: @EnableAutoConfiguration : enable Spring Boot\u2019s auto-configuration mechanism @ComponentScan : enable @Component scan on the package where the application is located (see the best practices) @Configuration : allow to register extra beans in the context or import additional configuration classes \u53ef\u4ee5\u770b\u51fa\uff0c @SpringBootApplication \u6fc0\u6d3b\u4e86\u4e09\u4e2a\u6ce8\u89e3\u7279\u6027\uff0c\u5176\u4e2d @EnableAutoConfiguration \u6fc0\u6d3bSpring Boot\u7684\u81ea\u52a8\u88c5\u914d\u673a\u5236\uff1b @ComponentScan \u6fc0\u6d3b @Component \u626b\u63cf\uff1b @Configuration \u5141\u8bb8\u6ce8\u518c\u66f4\u591a\u7684bean\u5230\u4e0a\u4e0b\u6587\u4e2d\u6216\u5bfc\u5165\u66f4\u591a\u7684\u914d\u7f6e\u7c7b\u3002\u5e76\u4e14\u7ed9\u51fa\u4ee3\u7801\u793a\u4f8b\uff1a package com.example.myapplication ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } \u4f7f\u75283\u4e2a\u6ce8\u89e3\u66ff\u6362 @SpringBootApplication \uff0c\u91cd\u6784\u9879\u76ee\u4ee3\u7801\uff1a @RestController @EnableAutoConfiguration @ComponentScan @Configuration public class App { ... } \u91cd\u65b0\u542f\u52a8\u9879\u76ee\uff0c\u53d1\u73b0\u4e00\u5207\u6b63\u5e38\uff0c\u6d4b\u8bd5HTTP\u670d\u52a1\u4e5f\u5e76\u65e0\u5f02\u5e38\uff0c\u8bf4\u660e\u66ff\u6362\u548c\u6587\u6863\u6240\u8ff0\u65e0\u8bef\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u5374\u8981\u590d\u6742\u4e00\u4e9b\uff0c\u770b\u4e00\u4e0b @SpringBootApplication \u6ce8\u89e3\u58f0\u660e\uff1a @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan ( excludeFilters = { @Filter ( type = FilterType . CUSTOM , classes = TypeExcludeFilter . class ), @Filter ( type = FilterType . CUSTOM , classes = AutoConfigurationExcludeFilter . class ) }) public @interface SpringBootApplication { ... } \u6587\u6863\u7684\u63cf\u8ff0\u548c\u4ee3\u7801\u5b9e\u9645\u662f\u6709\u533a\u522b\u7684\uff0c\u5b9e\u9645\u5f15\u7528\u8fd8\u5e94\u4ee5\u6e90\u7801\u4e3a\u51c6\uff0c\u6587\u6863\u4f5c\u4e3a\u53c2\u8003\u3002 \u5b9e\u9645\u4e0a\uff0c @SpringBootApplication \u7b49\u4ef7\u4e8e @SpringBootConfiguration \u3001 @EnableAutoConfiguration \u548c @ComponentScan \uff0c\u4f46 @ComponentScan \u5e76\u975e\u9ed8\u8ba4\u503c\uff0c\u800c\u662f\u52a0\u5165\u4e86\u6392\u9664\uff1a TypeExcludeFilter \u548c AutoConfigurationExcludeFilter \u3002 TypeExcludeFilter \u7528\u4e8e\u67e5\u627e BeanFactory \u4e2d\u5df2\u7ecf\u6ce8\u518c\u7684 TypeExcludeFilter Bean\uff0c\u4f5c\u4e3a\u4ee3\u7406\u6267\u884c\u5bf9\u8c61\u3002 public class TypeExcludeFilter implements TypeFilter , BeanFactoryAware { private BeanFactory beanFactory ; private Collection < TypeExcludeFilter > delegates ; @Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { this . beanFactory = beanFactory ; } @Override public boolean match ( MetadataReader metadataReader , MetadataReaderFactory metadataReaderFactory ) throws IOException { if ( this . beanFactory instanceof ListableBeanFactory && getClass () == TypeExcludeFilter . class ) { for ( TypeExcludeFilter delegate : getDelegates ()) { if ( delegate . match ( metadataReader , metadataReaderFactory )) { return true ; } } } return false ; } private Collection < TypeExcludeFilter > getDelegates () { Collection < TypeExcludeFilter > delegates = this . delegates ; if ( delegates == null ) { delegates = (( ListableBeanFactory ) this . beanFactory ). getBeansOfType ( TypeExcludeFilter . class ). values (); this . delegates = delegates ; } return delegates ; } ... } AutoConfigurationExcludeFilter \u7528\u4e8e\u6392\u9664\u5176\u4ed6\u540c\u65f6\u6807\u6ce8 @EnableAutoConfiguration \u548c @Configuration \u7684\u7c7b\uff1a public class AutoConfigurationExcludeFilter implements TypeFilter , BeanClassLoaderAware { private ClassLoader beanClassLoader ; private volatile List < String > autoConfigurations ; @Override public void setBeanClassLoader ( ClassLoader beanClassLoader ) { this . beanClassLoader = beanClassLoader ; } @Override public boolean match ( MetadataReader metadataReader , MetadataReaderFactory metadataReaderFactory ) throws IOException { return isConfiguration ( metadataReader ) && isAutoConfiguration ( metadataReader ); } private boolean isConfiguration ( MetadataReader metadataReader ) { return metadataReader . getAnnotationMetadata (). isAnnotated ( Configuration . class . getName ()); } private boolean isAutoConfiguration ( MetadataReader metadataReader ) { return getAutoConfigurations (). contains ( metadataReader . getClassMetadata (). getClassName ()); } protected List < String > getAutoConfigurations () { if ( this . autoConfigurations == null ) { this . autoConfigurations = SpringFactoriesLoader . loadFactoryNames ( EnableAutoConfiguration . class , this . beanClassLoader ); } return this . autoConfigurations ; } } \u800c @SpringBootConfiguration \u7684\u58f0\u660e\u4e3a\uff1a @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Configuration public @interface SpringBootConfiguration { ... } @Configuration \u7684\u58f0\u660e\u4e3a\uff1a @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Component public @interface Configuration { ... } \u53ef\u4ee5\u53d1\u73b0\u5c42\u7ea7\u5173\u7cfb\u4e3a\uff1a @Component @Configuration @SpringBootConfiguration @ComponentScan \u4ec5\u5173\u6ce8 @Component \uff0c\u800c @SpringBootConfiguration \u5c5e\u4e8e @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c\u6240\u4ee5\u80fd\u591f\u88ab @ComponentScan \u8bc6\u522b\u3002 @Repository \u3001 @Service \u3001 @Controller \u5c5e\u4e8e @Component \u7684\u76f4\u63a5\u6d3e\u751f\u6ce8\u89e3\uff0c\u4e5f\u88ab\u79f0\u4e3aSpring\u6a21\u5f0f\u6ce8\u89e3(Stereotype Annotation) \u5b98\u65b9\u6587\u6863\u7ee7\u7eed\u7b80\u5355\u4ecb\u7ecd\u4e86 @SpringBootApplication \u7684\u5c5e\u6027\u522b\u540d @SpringBootApplication also provides aliases to customize the attributes of @EnableAutoConfiguration and @ComponentScan @SpringBootApplication \u7684\u5c5e\u6027\u65b9\u6cd5\u58f0\u660e\u4e3a\uff1a public @interface SpringBootApplication { @AliasFor ( annotation = EnableAutoConfiguration . class ) Class <?>[] exclude () default {}; /** * ... * @since 1.3.0 */ @AliasFor ( annotation = EnableAutoConfiguration . class ) String [] excludeName () default {}; /** * ... * @since 1.3.0 */ @AliasFor ( annotation = ComponentScan . class , attribute = \"basePackages\" ) String [] scanBasePackages () default {}; /** * ... * @since 1.3.0 */ @AliasFor ( annotation = ComponentScan . class , attribute = \"basePackageClasses\" ) Class <?>[] scanBasePackageClasses () default {}; /** * ... * @since 2.3.0 */ @AliasFor ( annotation = ComponentScan . class , attribute = \"nameGenerator\" ) Class <? extends BeanNameGenerator > nameGenerator () default BeanNameGenerator . class ; /** * ... * @since 2.2 */ @AliasFor ( annotation = Configuration . class ) boolean proxyBeanMethods () default true ; } \u901a\u8fc7 @AliasFor \uff0c\u53ef\u4ee5\u5c06\u6ce8\u89e3\u5c5e\u6027\u522b\u540d\u5230\u67d0\u4e2a\u6ce8\u89e3\u4e2d\uff0c\u91cd\u6784\u4e00\u4e0b\u4ee3\u7801\uff0c\u5c06\u5f15\u5bfc\u7c7b\u8c03\u6574\u5230 deep.in.spring.boot.app \u5305\u4e2d\u5e76\u91cd\u65b0\u547d\u540d\uff1a package deep.in.spring.boot.app ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.EnableAutoConfiguration ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.context.annotation.ComponentScan ; import org.springframework.context.annotation.Configuration ; //@EnableAutoConfiguration //@ComponentScan //@Configuration @SpringBootApplication ( scanBasePackages = \"deep.in.spring.boot.config\" ) public class FirstSpringBootApp { public static void main ( String [] args ) { SpringApplication . run ( FirstSpringBootApp . class , args ); } } \u5c06 @EventListener \u65b9\u6cd5\u62bd\u53d6\u81f3 deep.in.spring.boot.config.WebConfig \u914d\u7f6e\u7c7b\u4e2d\uff1a package deep.in.spring.boot.config ; import org.springframework.boot.web.context.WebServerInitializedEvent ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.event.EventListener ; @Configuration public class WebConfig { @EventListener ( WebServerInitializedEvent . class ) public void onWebServerReady ( WebServerInitializedEvent event ) { System . out . println ( \"WebServer Type: \" + event . getWebServer (). getClass (). getName ()); System . out . println ( \"ApplicationContext: \" + event . getApplicationContext (). getClass (). getName ()); } } \u6ce8\u610f\u5728 FirstSpringBootApp \u4e2d\u518d\u6b21\u4f7f\u7528 @SpringBootApplication \uff0c\u5e76\u8bbe\u7f6e\u5c5e\u6027 scanBasePackages = \"deep.in.spring.boot.config\" \u3002 \u518d\u6b21\u542f\u52a8\u9879\u76ee\uff0c\u770b\u5230\u8f93\u51fa\uff1a . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-19 14:11:28.722 INFO 6047 --- [ main] d.in.spring.boot.app.FirstSpringBootApp : Starting FirstSpringBootApp on nanleis-MacBook-Pro.local with PID 6047 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot) (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) 2020-08-19 14:11:30.921 INFO 6047 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' WebServer Type: org.springframework.boot.web.embedded.tomcat.TomcatWebServer ApplicationContext: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext 2020-08-19 14:11:30.929 INFO 6047 --- [ main] d.in.spring.boot.app.FirstSpringBootApp : Started FirstSpringBootApp in 2.497 seconds (JVM running for 2.935) \u8bf4\u660e\u914d\u7f6e\u7c7b\u8fd0\u884c\u6b63\u5e38\uff0c\u82e5\u4e0d\u914d\u7f6e scanBasePackages \u5c5e\u6027\uff0c\u90a3\u4e48\u914d\u7f6e\u7c7b WebConfig \u5c06\u4e0d\u4f1a\u88ab\u626b\u63cf\u5230\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c @SpringBootApplication \u662f\u4e00\u4e2a\u805a\u5408\u6ce8\u89e3\uff0c\u5305\u542b @SpringBootConfiguration \u3001 @EnableAutoConfiguration \u548c @ComponentScan \u7684\u7279\u6027\uff0c\u7c7b\u4f3c\u6ce8\u89e3\u8fd8\u6709 @RestController \uff0c\u805a\u5408\u4e86 @Controller \u548c @ResponseBody \u3002 @SpringBootApplication \u901a\u5e38\u6807\u6ce8\u4e8e\u5f15\u5bfc\u7c7b\u4e0a\uff0c\u4f46\u5e76\u4e0d\u9650\u5236\u3002\u82e5\u5c06\u5176\u6807\u6ce8\u4e8e\u975e\u5f15\u5bfc\u7c7b\u4e0a\uff0c\u8c03\u6574\u4ee3\u7801\u5982\u4e0b\uff1a package deep.in.spring.boot.config ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.web.context.WebServerInitializedEvent ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.event.EventListener ; //@Configuration @SpringBootApplication public class WebConfig { @EventListener ( WebServerInitializedEvent . class ) public void onWebServerReady ( WebServerInitializedEvent event ) { System . out . println ( \"WebServer Type: \" + event . getWebServer (). getClass (). getName ()); System . out . println ( \"ApplicationContext: \" + event . getApplicationContext (). getClass (). getName ()); } } \u56e0\u4e3a @SpringBootApplication \u5df2\u7ecf\u5305\u542b @Configuration \u7279\u6027\uff0c\u6b64\u5904\u4e0d\u518d\u9700\u8981\u3002 \u5f15\u5bfc\u7c7b FirstSpringBootApp \u4ec5\u4fdd\u7559 main() \u65b9\u6cd5\uff0c SpringApplication.run() \u7684\u5165\u53c2\u8c03\u6574\u4e3a WebConfig.class \uff1a package deep.in.spring.boot.app ; import deep.in.spring.boot.config.WebConfig ; import org.springframework.boot.SpringApplication ; public class FirstSpringBootApp { public static void main ( String [] args ) { //SpringApplication.run(FirstSpringBootApp.class, args); SpringApplication . run ( WebConfig . class , args ); } } \u91cd\u65b0\u542f\u52a8\u7a0b\u5e8f\uff0c\u8fd0\u884c\u6548\u679c\u4f9d\u65e7\u3002","title":"1. \u7406\u89e3@SpringBootApplication"},{"location":"SpringBoot/04-spring-boot-understanding-auto-config/#2-enableautoconfiguration","text":"\u5b98\u65b9\u6587\u6863\u63d0\u5230\u4e86 @EnableAutoConfiguration \u548c @SpringBootApplication \u90fd\u80fd\u6fc0\u6d3b\u81ea\u52a8\u88c5\u914d\u7279\u6027\uff0c\u4f46\u4e3a\u4e86\u8bf4\u660e @EnableAutoConfiguration \u548c @SpringBootApplication \u7684\u5dee\u522b\uff0c\u5c06\u9879\u76ee\u8c03\u6574\u4e3a webflux \u9879\u76ee\uff1a <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-webflux </artifactId> <version> 2.3.2.RELEASE </version> </dependency> \u5728 WebConfg \u7c7b\u4e2d\uff0c\u6dfb\u52a0 RouterFunction \u7684Bean\uff0c\u5e76\u4f7f\u7528 @EnableAutoConfiguration \u6765\u6ce8\u89e3\uff1a package deep.in.spring.boot.config ; import org.springframework.boot.autoconfigure.EnableAutoConfiguration ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.web.context.WebServerInitializedEvent ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.event.EventListener ; import org.springframework.web.reactive.function.server.RouterFunction ; import org.springframework.web.reactive.function.server.ServerResponse ; import reactor.core.publisher.Mono ; import static org.springframework.web.reactive.function.server.ServerResponse.ok ; import static org.springframework.web.reactive.function.server.RequestPredicates.GET ; import static org.springframework.web.reactive.function.server.RouterFunctions.route ; //@Configuration //@SpringBootApplication @EnableAutoConfiguration public class WebConfig { @Bean public RouterFunction < ServerResponse > helloworld () { return route ( GET ( \"/helloworld\" ), request -> ok (). body ( Mono . just ( \"Hello World\" ), String . class ) ); } @EventListener ( WebServerInitializedEvent . class ) public void onWebServerReady ( WebServerInitializedEvent event ) { System . out . println ( \"WebServer Type: \" + event . getWebServer (). getClass (). getName ()); System . out . println ( \"ApplicationContext: \" + event . getApplicationContext (). getClass (). getName ()); System . out . println ( \"WebConfig Bean:\" + event . getApplicationContext (). getBean ( WebConfig . class ). getClass (). getName ()); System . out . println ( \"helloworld Bean: \" + event . getApplicationContext (). getBean ( \"helloworld\" ). getClass (). getName ()); } } \u542f\u52a8\u7a0b\u5e8f\uff0c\u5f97\u5230\u8f93\u51fa\uff1a (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) WebServer Type: org.springframework.boot.web.embedded.netty.NettyWebServer ApplicationContext: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext WebConfig Bean:deep.in.spring.boot.config.WebConfig helloworld Bean: org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction 2020-08-19 15:32:38.305 INFO 6752 --- [ main] d.in.spring.boot.app.FirstSpringBootApp : Started FirstSpringBootApp in 1.93 seconds (JVM running for 2.33) \u6d4b\u8bd5 /helloworld \u4e5f\u6ca1\u6709\u95ee\u9898\uff1a $ curl http://127.0.0.1:8080/helloworld Hello World \u7531\u6b64\u8bf4\u660e\uff0c @EnableAutoConfiguration \u6ce8\u89e3\u7684 WebConfig \u7c7b\u5728\u8fd0\u884c\u4e0a\u4e0e @SpringBootApplication \u5e76\u65e0\u5dee\u522b\uff0c\u4e5f\u5c31\u662f SpringApplication.run() \u65b9\u6cd5\u5f15\u5bfc\u542f\u52a8\u65f6\uff0c\u5e76\u4e0d\u5f3a\u4f9d\u8d56 @Configuration \u6ce8\u89e3\u3002 \u5b98\u65b9\u6587\u6863\u5bf9\u6b64\u4e5f\u6709\u7b80\u8981\u8bf4\u660e\uff1a Configuration Classes Spring Boot favors Java-based configuration. Although it is possible to use SpringApplication with XML sources, we generally recommend that your primary source be a single @Configuration class. Usually the class that defines the main method is a good candidate as the primary @Configuration . \u4e3a\u4e86\u8bf4\u660e\u548c @SpringBootApplication \u7684\u5dee\u5f02\uff0c\u4e5f\u5c31\u662f @SpringBootApplication \u591a\u51fa\u7684 @Configuration \u7279\u6027( @ComponentScan \u7279\u6027\u5df2\u6709\u89e3\u91ca)\uff0c\u5c06 WebConfig \u7c7b\u7684\u6ce8\u89e3\u6539\u56de\uff0c\u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\uff1a (\u7701\u7565\u90e8\u5206\u5185\u5bb9...) WebServer Type: org.springframework.boot.web.embedded.netty.NettyWebServer ApplicationContext: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext WebConfig Bean:deep.in.spring.boot.config.WebConfig$$EnhancerBySpringCGLIB$$757dd7cc helloworld Bean: org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction 2020-08-19 16:26:50.591 INFO 7301 --- [ main] d.in.spring.boot.app.FirstSpringBootApp : Started FirstSpringBootApp in 2.298 seconds (JVM running for 2.733) \u5f88\u660e\u663e\uff0c WebConfig Bean\u7684\u5b9e\u73b0\u7c7b\u4ece deep.in.spring.boot.config.WebConfig \u53d8\u4e3a deep.in.spring.boot.config.WebConfig$$EnhancerBySpringCGLIB$$757dd7cc \uff0c\u4e5f\u5c31\u662f\u540e\u8005\u4f7f\u7528\u4e86CGLIB\u8fdb\u884c\u63d0\u5347\uff0c\u8fd9\u4e5f\u662f @SpringBootApplication \u4f5c\u4e3a @Configuration \u6d3e\u751f\u6ce8\u89e3\u6700\u660e\u663e\u7684\u7279\u6027\uff0c\u5728SpringFrameork\u5b98\u65b9\u6587\u6863( https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#spring-core )\u4e2d\u4e5f\u6709\u4ecb\u7ecd\uff1a The @Bean methods in a regular Spring component are processed differently than their counterparts inside a Spring @Configuration class. The difference is that @Component classes are not enhanced with CGLIB to intercept the invocation of methods and fields. CGLIB proxying is the means by which invoking methods or fields within @Bean methods in @Configuration classes creates bean metadata references to collaborating objects. Such methods are not invoked with normal Java semantics but rather go through the container in order to provide the usual lifecycle management and proxying of Spring beans, even when referring to other beans through programmatic calls to @Bean methods. In contrast, invoking a method or field in a @Bean method within a plain @Component class has standard Java semantics, with no special CGLIB processing or other constraints applying. \u4e5f\u5c31\u662f @Component \u6ce8\u89e3\u7684\u7c7b\uff0cBean\u7684\u884c\u4e3a\u548c\u6b63\u5e38Java\u5bf9\u8c61\u8bed\u4e49\u76f8\u540c\uff0c\u4e0d\u5b58\u5728CGLIB\u5904\u7406\uff0c\u800c @Configuration \u6ce8\u89e3\u7684\u7c7b\uff0c\u8fdb\u884cCGLIB\u63d0\u5347\u3002 \u5b98\u65b9\u6587\u6863\u8fdb\u4e00\u6b65\u4ecb\u7ecd\uff1a Full @Configuration vs \u201clite\u201d @Bean mode? When @Bean methods are declared within classes that are not annotated with @Configuration , they are referred to as being processed in a \u201clite\u201d mode. Bean methods declared in a @Component or even in a plain old class are considered to be \u201clite\u201d, with a different primary purpose of the containing class and a @Bean method being a sort of bonus there. For example, service components may expose management views to the container through an additional @Bean method on each applicable component class. In such scenarios, @Bean methods are a general-purpose factory method mechanism. Unlike full @Configuration , lite @Bean methods cannot declare inter-bean dependencies. Instead, they operate on their containing component\u2019s internal state and, optionally, on arguments that they may declare. Such a @Bean method should therefore not invoke other @Bean methods. Each such method is literally only a factory method for a particular bean reference, without any special runtime semantics. The positive side-effect here is that no CGLIB subclassing has to be applied at runtime, so there are no limitations in terms of class design (that is, the containing class may be final and so forth). In common scenarios, @Bean methods are to be declared within @Configuration classes, ensuring that \u201cfull\u201d mode is always used and that cross-method references therefore get redirected to the container\u2019s lifecycle management. This prevents the same @Bean method from accidentally being invoked through a regular Java call, which helps to reduce subtle bugs that can be hard to track down when operating in \u201clite\u201d mode. \u7b80\u800c\u8a00\u4e4b\uff0c @Bean \u5728\u666e\u901aJava\u7c7b\u88ab\u58f0\u660e\u540e\uff0c\u5176\u884c\u4e3a\u548c\u5728 @Component \u7c7b\u4e0b\u7684\u58f0\u660e\u4e00\u81f4\uff0c\u5b98\u65b9\u79f0\u8fd9\u79cd\u65b9\u5f0f\u4e3a\u201c\u8f7b\u91cf\u6a21\u5f0f\u201d\uff0c\u800c\u5728 @Configuration \u7c7b\u4e2d\u7684\u58f0\u660e\u4e3a\u201c\u5b8c\u5168\u6a21\u5f0f\u201d\uff0c\u540e\u8005\u4f1a\u6267\u884cCGLIB\u63d0\u5347\u3002\u8fd9\u4e5f\u5c31\u662f\u524d\u9762\u4ee3\u7801\u8fd0\u884c\u7ed3\u679c\u7684\u5bf9\u6bd4\u3002","title":"2. \u7406\u89e3@EnableAutoConfiguration"},{"location":"SpringBoot/04-spring-boot-understanding-auto-config/#3","text":"\u524d\u9762\u6240\u8ff0\u7684 WebConfig \u5c5e\u4e8e\u7f16\u7801\u65b9\u5f0f\u88c5\u914d\uff0c\u800c\u4e0d\u662f\u81ea\u52a8\u88c5\u914d\u3002\u800c\u5176\u4ed6\u81ea\u52a8\u88c5\u914d\u7684Bean\u662f\u901a\u8fc7\u81ea\u52a8\u914d\u7f6e\u673a\u5236\u5b8c\u6210\u7684\u3002 \u5728Spring Boot\u4e4b\u524d\uff0cSpring Framework\u63d0\u4f9bBean\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u548c\u7f16\u7a0b\u6a21\u578b\uff0c\u6846\u67b6\u5c42\u9762\u5df2\u7ecf\u652f\u6301\u6d3e\u751f\u6ce8\u89e3\uff0c\u4f46\u5374\u4e0d\u80fd\u81ea\u52a8\u88c5\u914d @Configuration \u7c7b\u3002Spring Boot\u5728\u6b64\u57fa\u7840\u4e4b\u4e0a\u6dfb\u52a0\u4e86\u7ea6\u5b9a\u914d\u7f6e\u5316\u5bfc\u5165 @Configuration \u7c7b\u7684\u65b9\u5f0f\u3002 \u5b98\u65b9\u6587\u6863\u4ecb\u7ecd\u4e86\u5982\u4f55\u6784\u5efa\u81ea\u5b9a\u4e49\u81ea\u52a8\u88c5\u914d\u7c7b\uff1a Creating Your Own Auto-configuration If you work in a company that develops shared libraries, or if you work on an open-source or commercial library, you might want to develop your own auto-configuration. Auto-configuration classes can be bundled in external jars and still be picked-up by Spring Boot. Auto-configuration can be associated to a \u201cstarter\u201d that provides the auto-configuration code as well as the typical libraries that you would use with it. We first cover what you need to know to build your own auto-configuration and then we move on to the typical steps required to create a custom starter . \u81ea\u52a8\u88c5\u914d\u7c7b\u53ef\u4ee5\u6253\u5305\u5230\u5916\u90e8JAR\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u88abSpring Boot\u88c5\u8f7d\u3002\u81ea\u52a8\u88c5\u914d\u7c7b\u4e5f\u80fd\u88ab\u5173\u8054\u5230\u201cstarter\u201d\u4e2d\uff0c\u8fd9\u4e9b\u201cstarter\u201d\u63d0\u4f9b\u81ea\u52a8\u88c5\u914d\u7684\u4ee3\u7801\u53ca\u5173\u8054\u7684\u4f9d\u8d56\u3002 \u5b98\u65b9\u6587\u6863\u7ee7\u7eed\u4ecb\u7ecd\u4e86Spring Boot\u81ea\u52a8\u88c5\u914d\u5e95\u5c42\u5b9e\u73b0\u4e0e@Configuration\u548c@Conditional\u7684\u5173\u7cfb\uff1a Understanding Auto-configured Beans Under the hood, auto-configuration is implemented with standard @Configuration classes. Additional @Conditional annotations are used to constrain when the auto-configuration should apply. Usually, auto-configuration classes use @ConditionalOnClass and @ConditionalOnMissingBean annotations. This ensures that auto-configuration applies only when relevant classes are found and when you have not declared your own @Configuration . You can browse the source code of spring-boot-autoconfigure to see the @Configuration classes that Spring provides (see the META-INF/spring.factories file). \u6587\u6863\u4e2d\u63d0\u53ca @ConditionalOnClass \u548c @ConditionalOnMissingBean \u662f\u5e38\u7528\u7684\u6ce8\u89e3\u3002\u6839\u636e\u540d\u79f0\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u5f53 @ConditionalOnClass \u6ce8\u89e3\u5728 @Configuration \u7c7b\u4e0a\u65f6\uff0c\u5f53\u76ee\u6807\u7c7b\u5b58\u5728\u4e8eClass Path\u65f6\u4e88\u4ee5\u88c5\u914d\u3002\u8fd9\u5c31\u662f\u5f00\u5934\u63d0\u5230\u7684 HSQLDB \u5b58\u5728\u4e8e\u5e94\u7528\u7684Class Path\u65f6\uff0cSpring Boot\u63d0\u4f9b\u4e86\u81ea\u52a8\u88c5\u914d HSQLDB \u7684\u903b\u8f91\uff0c\u5728 DataSourceAutoConfiguration \u81ea\u52a8\u88c5\u914d\u7c7b\u4e2d\uff1a package org.springframework.boot.autoconfigure.jdbc ; ... @Configuration ( proxyBeanMethods = false ) @ConditionalOnClass ({ DataSource . class , EmbeddedDatabaseType . class }) @ConditionalOnMissingBean ( type = \"io.r2dbc.spi.ConnectionFactory\" ) @EnableConfigurationProperties ( DataSourceProperties . class ) @Import ({ DataSourcePoolMetadataProvidersConfiguration . class , DataSourceInitializationConfiguration . class }) public class DataSourceAutoConfiguration { @Configuration ( proxyBeanMethods = false ) @Conditional ( EmbeddedDatabaseCondition . class ) @ConditionalOnMissingBean ({ DataSource . class , XADataSource . class }) @Import ( EmbeddedDataSourceConfiguration . class ) protected static class EmbeddedDatabaseConfiguration { } @Configuration ( proxyBeanMethods = false ) @Conditional ( PooledDataSourceCondition . class ) @ConditionalOnMissingBean ({ DataSource . class , XADataSource . class }) @Import ({ DataSourceConfiguration . Hikari . class , DataSourceConfiguration . Tomcat . class , DataSourceConfiguration . Dbcp2 . class , DataSourceConfiguration . Generic . class , DataSourceJmxConfiguration . class }) protected static class PooledDataSourceConfiguration { } ... } \u4ee3\u7801\u4e2d\u5e76\u6ca1\u6709\u624b\u52a8\u914d\u7f6e DataSource Bean\uff0c\u90a3\u4e48 EmbeddedDatabaseConfiguration \u548c PooledDataSourceCondition \uff0c PooledDataSourceAvailableCondition \u5c31\u4f1a\u4f9d\u6b21\u8fdb\u884c\u5224\u65ad\u3002\u52a0\u5165\u7684 HSQLDB \u652f\u6301\u8fde\u63a5\u6c60\uff0c\u56e0\u6b64\u4f1a\u5728 HikariCP \u542f\u52a8\u7684\u65f6\u5019\u8fdb\u884c\u88c5\u914d\u3002 HikariCP \u7684\u81ea\u52a8\u88c5\u914d\u7c7b\u662f org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration \u4e2d\u7684 Hikari \u9759\u6001\u5185\u90e8\u7c7b\uff1a /** * Hikari DataSource configuration. */ @Configuration ( proxyBeanMethods = false ) @ConditionalOnClass ( HikariDataSource . class ) @ConditionalOnMissingBean ( DataSource . class ) @ConditionalOnProperty ( name = \"spring.datasource.type\" , havingValue = \"com.zaxxer.hikari.HikariDataSource\" , matchIfMissing = true ) static class Hikari { @Bean @ConfigurationProperties ( prefix = \"spring.datasource.hikari\" ) HikariDataSource dataSource ( DataSourceProperties properties ) { HikariDataSource dataSource = createDataSource ( properties , HikariDataSource . class ); if ( StringUtils . hasText ( properties . getName ())) { dataSource . setPoolName ( properties . getName ()); } return dataSource ; } } Hikari \u6570\u636e\u6e90\u80fd\u81ea\u52a8\u88c5\u914d\u662f PooledDataSourceConfiguration \u88ab\u6fc0\u6d3b\u540e @Import \u8fdb\u6765\u7684\uff0c\u800c HikariCP \u5df2\u7ecf\u662fSpring Boot\u9ed8\u8ba4\u4f7f\u7528\u7684\u8fde\u63a5\u6c60\u4e86\u3002\u6b64\u5904 Hikari \u8981\u6839\u636e DataSourceProperties \u8fdb\u884c\u6570\u636e\u6e90\u521b\u5efa\uff0c\u90a3\u4e48\u5728 DataSourceProperties \u4e2d\uff1a package org.springframework.boot.autoconfigure.jdbc ; ... @ConfigurationProperties ( prefix = \"spring.datasource\" ) public class DataSourceProperties implements BeanClassLoaderAware , InitializingBean { ... @Override public void afterPropertiesSet () throws Exception { this . embeddedDatabaseConnection = EmbeddedDatabaseConnection . get ( this . classLoader ); } ... } afterPropertiesSet \u662f InitializingBean \u63a5\u53e3\u4e2d\u7684\u552f\u4e00\u65b9\u6cd5\uff1a package org.springframework.beans.factory ; /** * Interface to be implemented by beans that need to react once all their properties * have been set by a {@link BeanFactory}: e.g. to perform custom initialization, * or merely to check that all mandatory properties have been set. * * <p>An alternative to implementing {@code InitializingBean} is specifying a custom * init method, for example in an XML bean definition. For a list of all bean * lifecycle methods, see the {@link BeanFactory BeanFactory javadocs}. * * @author Rod Johnson * @author Juergen Hoeller * @see DisposableBean * @see org.springframework.beans.factory.config.BeanDefinition#getPropertyValues() * @see org.springframework.beans.factory.support.AbstractBeanDefinition#getInitMethodName() */ public interface InitializingBean { /** * Invoked by the containing {@code BeanFactory} after it has set all bean properties * and satisfied {@link BeanFactoryAware}, {@code ApplicationContextAware} etc. * <p>This method allows the bean instance to perform validation of its overall * configuration and final initialization when all bean properties have been set. * @throws Exception in the event of misconfiguration (such as failure to set an * essential property) or if initialization fails for any other reason */ void afterPropertiesSet () throws Exception ; } \u4e5f\u5c31\u662f\u5728Bean\u521d\u59cb\u5316\u65f6\uff0c\u8bbe\u7f6e\u5b8c\u5c5e\u6027\u540e\u8981\u56de\u8c03\u7684\u65b9\u6cd5\uff0c DataSourceProperties \u5c31\u5728\u6b64\u65f6\u8c03\u7528 EmbeddedDatabaseConnection.get(this.classLoader) \u6765\u83b7\u53d6\u5230\u5185\u5d4c\u6570\u636e\u5e93\u7684\u4fe1\u606f\uff0c\u5177\u4f53\u5b9e\u73b0\u4e3a\uff1a package org.springframework.boot.jdbc ; ... public enum EmbeddedDatabaseConnection { ... /** * HSQL Database Connection. */ HSQL ( EmbeddedDatabaseType . HSQL , \"org.hsqldb.jdbcDriver\" , \"jdbc:hsqldb:mem:%s\" ); ... /** * Returns the most suitable {@link EmbeddedDatabaseConnection} for the given class * loader. * @param classLoader the class loader used to check for classes * @return an {@link EmbeddedDatabaseConnection} or {@link #NONE}. */ public static EmbeddedDatabaseConnection get ( ClassLoader classLoader ) { for ( EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection . values ()) { if ( candidate != NONE && ClassUtils . isPresent ( candidate . getDriverClassName (), classLoader )) { return candidate ; } } return NONE ; } ... } \u81f3\u6b64\uff0c\u5185\u5d4c\u6570\u636e\u5e93 HSQLDB \u901a\u8fc7\u9ed8\u8ba4\u6570\u636e\u6e90 HikariCP \u7684\u81ea\u52a8\u88c5\u914d\u5b9e\u73b0\u4e86\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c DataSourceAutoConfiguration \u548c\u5185\u90e8 @Configuration \u7c7b\u540c\u6837\u90fd\u7ed3\u5408\u4e86 @Configuration \u548c @Conditional \u7279\u6027\uff0c\u5185\u90e8\u7684 @Configuration \u7c7b\u968f\u7740 DataSourceAutoConfiguration \u7684\u88c5\u914d\u800c\u88c5\u914d\u3002 \u90a3\u4e48 DataSourceAutoConfiguration \u53c8\u662f\u5982\u4f55\u88ab\u88c5\u914d\u7684\uff0c\u56de\u5230\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u6700\u540e\u4e00\u6bb5\u4ecb\u7ecd\uff0c\u8fd9\u4e9b\u81ea\u52a8\u88c5\u914d\u7c7b\u90fd\u5728 META-INF/spring.factories \u4e0b\uff0c\u5373\u5728 spring-boot-autoconfigure \u4f9d\u8d56\u4e2d\u3002 spring-boot-autoconfigure \u662fSpring Boot\u7684\u6838\u5fc3\u4f9d\u8d56\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u81ea\u52a8\u88c5\u914d @Configuration \u7c7b\uff0c\u5e76\u7edf\u4e00\u5b58\u653e\u5728 org.springframework.boot.autoconfigure \u5305\u548c\u5b50\u5305\u4e0b\uff0c\u5b8c\u6574\u7684\u81ea\u52a8\u88c5\u914d\u7c7b\u53ef\u53c2\u7167 META-INF/spring.factories \u6587\u4ef6\u3002","title":"3. \u7406\u89e3\u81ea\u52a8\u914d\u7f6e"},{"location":"SpringBoot/04-spring-boot-understanding-auto-config/#4","text":"\u521b\u5efa\u81ea\u52a8\u88c5\u914d\u7c7b WebAutoConfiguration \uff1a package deep.in.spring.boot.autoconfigure ; import deep.in.spring.boot.config.WebConfig ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.Import ; @Configuration @Import ( WebConfig . class ) public class WebAutoConfiguration { } \u8fd9\u91cc\u4f7f\u7528 @Import \u5bfc\u5165\u914d\u7f6e\u7c7b WebConfig \uff0c\u540c\u65f6\u5728 src/main/resource \u4e0b\u521b\u5efa META-INF/spring.factories \u6587\u4ef6\uff0c\u5c06 WebAutoConfiguration \u914d\u7f6e\u8fdb\u53bb\uff1a #Auto-Configuration org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ deep.in.spring.boot.autoconfigure.WebAutoConfiguration \u540c\u65f6\u4fee\u6539 WebConfig \uff0c\u4f7f\u5176\u4ec5\u4f5c\u4e3a @Configuration \u7c7b\uff1a package deep.in.spring.boot.config ; ... @Configuration //@SpringBootApplication //@EnableAutoConfiguration public class WebConfig { ... } \u6700\u540e\u4fee\u6539\u5f15\u5bfc\u7c7b App.java \uff0c\u4ec5\u6807\u6ce8 @EnableAutoConfiguration \uff0c\u540c\u65f6\u8c03\u6574SpringApplication.run()\u65b9\u6cd5\u53c2\u6570\uff1a package deep.in.spring.boot ; ... @RestController @EnableAutoConfiguration //@ComponentScan //@Configuration //@SpringBootApplication public class App { ... public static void main ( String [] args ) { SpringApplication . run ( App . class , args ); } } \u8fd0\u884c\u9879\u76ee\uff0c\u53d1\u73b0\u5e76\u65e0\u5f02\u5e38\uff1a . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-08-27 10:54:53.368 INFO 2682 --- [ main] deep.in.spring.boot.App : Starting App on nanleis-MacBook-Pro.local with PID 2682 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/first-spring-boot-application/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot) 2020-08-27 10:54:53.370 INFO 2682 --- [ main] deep.in.spring.boot.App : No active profile set, falling back to default profiles: default 2020-08-27 10:54:54.216 INFO 2682 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Starting... 2020-08-27 10:54:54.227 WARN 2682 --- [ main] com.zaxxer.hikari.util.DriverDataSource : Registered driver with driverClassName=org.hsqldb.jdbcDriver was not found, trying direct instantiation. 2020-08-27 10:54:54.856 INFO 2682 --- [ main] com.zaxxer.hikari.pool.PoolBase : HikariPool-1 - Driver does not support get/set network timeout for connections. (feature not supported) 2020-08-27 10:54:54.859 INFO 2682 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Start completed. 2020-08-27 10:54:55.427 INFO 2682 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 8080 WebServer Type: org.springframework.boot.web.embedded.netty.NettyWebServer ApplicationContext: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext WebConfig Bean:deep.in.spring.boot.config.WebConfig$$EnhancerBySpringCGLIB$$e99faf97 helloworld Bean: org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction 2020-08-27 10:54:55.438 INFO 2682 --- [ main] deep.in.spring.boot.App : Started App in 2.441 seconds (JVM running for 2.906) \u8bf4\u660e WebAutoConfiguration \u5df2\u88ab\u81ea\u52a8\u88c5\u914d\u3002","title":"4. \u521b\u5efa\u81ea\u52a8\u914d\u7f6e\u7c7b"},{"location":"SpringBoot/04-spring-boot-understanding-auto-config/#warn","text":"\u793a\u4f8b\u4e2d\u7684\u542f\u52a8\u8fc7\u7a0b\u6709\u5982\u4e0b WARN \u8f93\u51fa\uff1a 2020-08-27 10:54:54.227 WARN 2682 --- [ main] com.zaxxer.hikari.util.DriverDataSource : Registered driver with driverClassName=org.hsqldb.jdbcDriver was not found, trying direct instantiation. \u8fd9\u662f com.zaxxer.hikari.util.DriverDataSource \u7684\u65e5\u5fd7\u8f93\u51fa\uff0c\u53ef\u4ee5\u67e5\u770b\u5230\u6e90\u7801\u7247\u6bb5\uff1a if ( driverClassName != null ) { Enumeration < Driver > drivers = DriverManager . getDrivers (); while ( drivers . hasMoreElements ()) { Driver d = drivers . nextElement (); if ( d . getClass (). getName (). equals ( driverClassName )) { driver = d ; break ; } } if ( driver == null ) { LOGGER . warn ( \"Registered driver with driverClassName={} was not found, trying direct instantiation.\" , driverClassName ); ... } ... } \u5982\u679c driver == null \uff0c\u90a3\u4e48\u5c31\u4f1a\u8f93\u51fa\u8be5\u65e5\u5fd7\uff0c\u8bf4\u660e\u4e0a\u9762\u83b7\u53d6 driver \u7684\u65f6\u5019\u6ca1\u6709\u83b7\u53d6\u5230\uff0c\u800c\u83b7\u53d6 driver \u7684\u5224\u65ad\u662f driverClassName \u7684\u5224\u65ad\u3002 \u7ed3\u5408 \u4e0a\u9762\u7684\u5206\u6790\u8fc7\u7a0b \uff0c\u5728 DataSourceProperties \u4e2d\uff0c afterPropertiesSet() \u65b9\u6cd5\u83b7\u53d6\u5230\u7684 embeddedDatabaseConnection \u5982\u4e0b\uff1a \u5176\u4e2d driverClass \u7684\u503c\u662f org.hsqldb.jdbcDriver \uff0c\u662f\u5728 EmbeddedDatabaseConnection \u4e2d\u7531\u679a\u4e3e\u5b9a\u4e49\u7684\u3002\u4e4b\u540e DataSourceConfiguration.Hikari \u5f00\u59cb\u81ea\u52a8\u88c5\u914d HikariDataSource \uff0c\u4f1a\u6267\u884c\u5230 HikariConfig \u4e2d\u5982\u4e0b\u4ee3\u7801\uff1a try { driverClass . getConstructor (). newInstance (); this . driverClassName = driverClassName ; } catch ( Exception e ) { throw new RuntimeException ( \"Failed to instantiate class \" + driverClassName , e ); } \u521b\u5efa driver \u5b9e\u4f8b\u65f6\uff0c\u4f1a\u6267\u884c\u5230 java.sql.DriverManager \u4e2d\uff1a \u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u6ce8\u518c\u7684 driver \u662f org.hsqldb.jdbc.JDBCDriver \uff0c\u56e0\u4e3a\u548c EmbeddedDatabaseConnection \u8bbe\u7f6e\u7684\u4e0d\u540c\uff0c\u6240\u4ee5\u5728 DriverDataSource \u4e2d\u6bd4\u8f83\u65f6\u5c31\u9020\u6210\u4e86\u4e0d\u5339\u914d\uff0c\u4f1a\u8f93\u51fa WARN \u65e5\u5fd7\u3002 \u4f46\u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u56e0\u6b64\u800c\u51fa\u9519\uff0c\u662f\u56e0\u4e3a\uff1a package org.hsqldb ; public class jdbcDriver extends org . hsqldb . jdbc . JDBCDriver {} \u56e0\u6b64\uff0c DriverDataSource \u540e\u7eed\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528 org.hsqldb.jdbcDriver \u6765\u901a\u8fc7\u53cd\u5c04\u521b\u5efa driver \u5bf9\u8c61\uff1a \u56e0\u4e3a\u662fSpring Boot\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u5411Spring Boot\u5b98\u65b9\u63d0\u51fa\u8be5\u95ee\u9898\uff0c\u5e76\u6700\u7ec8\u786e\u8ba4\u662fBug\uff0c\u53ef\u4ee5\u53c2\u8003\uff1a https://github.com/spring-projects/spring-boot/issues/23036","title":"*. \u793a\u4f8b\u4ee3\u7801\u542f\u52a8\u65e5\u5fd7WARN\u6392\u67e5"},{"location":"SpringBoot/05-spring-boot-understanding-prod-ready/","text":"05 - \u7406\u89e3Production-Ready\u7279\u6027 Spring Boot\u5b98\u65b9\u9996\u9875 \u5bf9Production-Ready\u7684\u63cf\u8ff0\u4e3a\uff1a Provide production-ready features such as metrics, health checks, and externalized configuration \u6309\u7167\u5b98\u65b9\u8bf4\u660e\uff0cmetrics(\u6307\u6807)\uff0chealth checks(\u5065\u5eb7\u68c0\u67e5)\uff0cexternalized configuration(\u5916\u90e8\u5316\u914d\u7f6e)\u90fd\u662f\u4e3a\u751f\u4ea7\u51c6\u5907\u7684\u7279\u6027\u3002 1. Spring Boot Actuator \u00b6 \u5728\u5b98\u65b9\u6587\u6863\u4e2d\uff0cProduction-Ready\u7279\u6027\u51fa\u81ea\uff1a Spring Boot Actuator: Production-ready Features Spring Boot includes a number of additional features to help you monitor and manage your application when you push it to production. You can choose to manage and monitor your application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering can also be automatically applied to your application. \u4e5f\u5c31\u662f\uff0c\u4f7f\u7528HTTP\u6216\u8005JMX\u6765\u76d1\u63a7\u548c\u7ba1\u7406\u6295\u5165\u751f\u4ea7\u7684\u5e94\u7528\u3002\u5ba1\u8ba1\u3001\u5065\u5eb7\u548c\u6307\u6807\u6536\u96c6\u53ef\u4ee5\u81ea\u52a8\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u5b98\u65b9\u6587\u6863\u8fdb\u4e00\u6b65\u8bf4\u660e\uff1a Definition of Actuator An actuator is a manufacturing term that refers to a mechanical device for moving or controlling something. Actuators can generate a large amount of motion from a small change. \u7efc\u4e0a\uff0cSpring Boot Actuator\u7528\u4e8e\u76d1\u63a7\u548c\u7ba1\u7406Spring\u5e94\u7528\uff0c\u53ef\u4ee5\u901a\u8fc7HTTP edpoints\u6216\u8005JMX Bean\u6765\u4ea4\u4e92\u3002 \u8981\u5f00\u542f\u8fd9\u4e2a\u7279\u6027\uff0c\u5b98\u65b9\u6587\u6863\u8fdb\u4e00\u6b65\u8bf4\u660e\uff1a Enabling Production-ready Features The spring-boot-actuator module provides all of Spring Boot\u2019s production-ready features. The recommended way to enable the features is to add a dependency on the spring-boot-starter-actuator \u2018Starter\u2019. To add the actuator to a Maven based project, add the following \u2018Starter\u2019 dependency: <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-actuator </artifactId> </dependency> </dependencies> \u4e5f\u5c31\u662f\u5c06\u4e0a\u8ff0\u4f9d\u8d56\u52a0\u5165\u5230pom.xml\u6587\u4ef6\u4e2d\uff0c\u5c31\u53ef\u4ee5\u5f00\u542fActuator\u3002 \u5b98\u65b9\u6587\u6863\u5217\u51fa\u4e86\u6240\u6709\u7684\u5185\u5efaendpoints\uff0c\u53ef\u4ee5\u53c2\u8003\uff1a https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints \u542f\u52a8\u9879\u76ee\uff0c\u5728\u542f\u52a8\u65e5\u5fd7\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a (\u7701\u7565\u90e8\u5206\u8f93\u51fa...) 2020-08-28 16:26:47.857 INFO 4230 --- [ main] o.s.b.a.e.web.EndpointLinksResolver : Exposing 2 endpoint(s) beneath base path '/actuator' 2020-08-28 16:26:47.915 INFO 4230 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-28 16:26:47.928 INFO 4230 --- [ main] deep.in.spring.boot.App : Started App in 3.524 seconds (JVM running for 4.005) \u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cActuator\u66b4\u97322\u4e2a\u7aef\u70b9\uff1a health \u548c info \uff0c\u6d4b\u8bd5\u8fd9\u4e9b\u7aef\u70b9\uff0c\u53ef\u4ee5\u770b\u5230\uff1a $ curl http://localhost:8080/actuator/health | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 15 0 15 0 0 92 0 --:--:-- --:--:-- --:--:-- 92 { \"status\" : \"UP\" } $ curl http://localhost:8080/actuator/info | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2 0 2 0 0 181 0 --:--:-- --:--:-- --:--:-- 181 {} $ curl http://localhost:8080/actuator/beans | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 116 0 116 0 0 6105 0 --:--:-- --:--:-- --:--:-- 6105 { \"status\" : 404, \"path\" : \"/actuator/beans\", \"error\" : \"Not Found\", \"timestamp\" : \"2020-08-28T08:30:33.798+00:00\", \"message\" : \"\" } \u5982\u679c\u9700\u8981\u66b4\u9732\u5176\u4ed6\u975e\u9ed8\u8ba4\u5f00\u653e\u7684\u7aef\u70b9\uff0c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a management : endpoints : web : exposure : include : \"*\" \u67e5\u770b beans \u7aef\u70b9\u7684\u8f93\u51fa\uff1a \u53ef\u4ee5\u770b\u5230\u88c5\u914d\u7684Bean\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684*\u66ff\u6362\u4e3a\u5176\u4ed6\u786e\u5b9a\u7684\u7aef\u70b9\u540d\u79f0\u5373\u53ef\u5f00\u542f\u6307\u5b9a\u7aef\u70b9\u3002 env \u7aef\u70b9\u5305\u542b\u4e86\u7cfb\u7edf\u73af\u5883\u914d\u7f6e\u7684\u4fe1\u606f\uff1a \u5176\u4e2d\u4e5f\u80fd\u770b\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u914d\u7f6e management.endpoints.web.exposure.include \u7684\u5185\u5bb9\u548c\u6240\u5728\u4f4d\u7f6e\u3002 metrics \u7aef\u70b9\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u7684\u4e00\u4e9b\u6307\u6807\u6570\u636e\uff1a $ curl http://localhost:8080/actuator/metrics | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 1134 0 1134 0 0 369k 0 --:--:-- --:--:-- --:--:-- 369k { \"names\" : [ \"hikaricp.connections\", \"hikaricp.connections.acquire\", \"hikaricp.connections.active\", \"hikaricp.connections.creation\", \"hikaricp.connections.idle\", \"hikaricp.connections.max\", \"hikaricp.connections.min\", \"hikaricp.connections.pending\", \"hikaricp.connections.timeout\", \"hikaricp.connections.usage\", \"http.server.requests\", \"jdbc.connections.active\", \"jdbc.connections.idle\", \"jdbc.connections.max\", \"jdbc.connections.min\", \"jvm.buffer.count\", \"jvm.buffer.memory.used\", \"jvm.buffer.total.capacity\", \"jvm.classes.loaded\", \"jvm.classes.unloaded\", \"jvm.gc.live.data.size\", \"jvm.gc.max.data.size\", \"jvm.gc.memory.allocated\", \"jvm.gc.memory.promoted\", \"jvm.gc.pause\", \"jvm.memory.committed\", \"jvm.memory.max\", \"jvm.memory.used\", \"jvm.threads.daemon\", \"jvm.threads.live\", \"jvm.threads.peak\", \"jvm.threads.states\", \"logback.events\", \"process.cpu.usage\", \"process.files.max\", \"process.files.open\", \"process.start.time\", \"process.uptime\", \"system.cpu.count\", \"system.cpu.usage\", \"system.load.average.1m\", \"tomcat.sessions.active.current\", \"tomcat.sessions.active.max\", \"tomcat.sessions.alive.max\", \"tomcat.sessions.created\", \"tomcat.sessions.expired\", \"tomcat.sessions.rejected\" ] } \u4f7f\u7528\u6307\u6807\u7684\u540d\u79f0\u5373\u53ef\u67e5\u770b\u8be5\u6307\u6807\u7684\u53c2\u6570\uff0c\u4f8b\u5982\u67e5\u770b system.cpu.count \uff1a $ curl http://localhost:8080/actuator/metrics/system.cpu.count | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 193 0 193 0 0 64333 0 --:--:-- --:--:-- --:--:-- 64333 { \"description\" : \"The number of processors available to the Java virtual machine\", \"availableTags\" : [], \"baseUnit\" : null, \"name\" : \"system.cpu.count\", \"measurements\" : [ { \"value\" : 16, \"statistic\" : \"VALUE\" } ] } 2. \u7406\u89e3\u5916\u90e8\u5316\u914d\u7f6e \u00b6 \u5b98\u65b9\u6587\u6863\u5bf9\u5916\u90e8\u5316\u914d\u7f6e\u7684\u89e3\u91ca\u662f\uff1a Externalized Configuration Spring Boot lets you externalize your configuration so that you can work with the same application code in different environments. You can use properties files, YAML files, environment variables, and command-line arguments to externalize configuration. Property values can be injected directly into your beans by using the @Value annotation, accessed through Spring\u2019s Environment abstraction, or be bound to structured objects through @ConfigurationProperties . \u6587\u6863\u4e2d\u8bf4\uff0c\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u6839\u636e\u6240\u5904\u7684\u4e0d\u540c\u73af\u5883\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u5916\u90e8\u5316\u914d\u7f6e\uff0c\u6bd4\u5982 properties \u6587\u4ef6\uff0c YAML \u6587\u4ef6\uff0c\u547d\u4ee4\u884c\u53c2\u6570\u6216\u8005\u73af\u5883\u53d8\u91cf\u3002 \u5916\u90e8\u5316\u914d\u7f6e\u7684\u5c5e\u6027\u503c\u53ef\u4ee5\u901a\u8fc7 @Value \u6ce8\u89e3\u3001Spring\u7684 Environment \uff0c\u6216\u8005 @ConfigurationProperties \u7ed1\u5b9a\u5230\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u65b9\u5f0f\u76f4\u63a5\u6ce8\u5165\u5230Bean\u4e2d\u3002 \u5b98\u65b9\u6587\u6863\u7ee7\u7eed\u8bf4\u660e\uff1a Spring Boot uses a very particular PropertySource order that is designed to allow sensible overriding of values. Properties are considered in the following order: Devtools global settings properties in the $HOME/.config/spring-boot directory when devtools is active. @TestPropertySource annotations on your tests. properties attribute on your tests. Available on @SpringBootTest and the test annotations for testing a particular slice of your application . Command line arguments. Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property). ServletConfig init parameters. ServletContext init parameters. JNDI attributes from java:comp/env . Java System properties ( System.getProperties() ). OS environment variables. A RandomValuePropertySource that has properties only in random.* . Profile-specific application properties outside of your packaged jar ( application-{profile}.properties and YAML variants). Profile-specific application properties packaged inside your jar ( application-{profile}.properties and YAML variants). Application properties outside of your packaged jar ( application.properties and YAML variants). Application properties packaged inside your jar ( application.properties and YAML variants). @PropertySource annotations on your @Configuration classes. Please note that such property sources are not added to the Environment until the application context is being refreshed. This is too late to configure certain properties such as logging.* and spring.main.* which are read before refresh begins. Default properties (specified by setting SpringApplication.setDefaultProperties ). \u6587\u6863\u4e2d\u6240\u8bf4\u7684 PropertySource (\u5c5e\u6027\u6e90)\uff0c\u5c31\u662f\u5916\u90e8\u5316\u914d\u7f6e\u7684\u5c5e\u6027\u6765\u6e90\uff0cSpring Boot\u89c4\u5b9a\u4e8617\u4e2d\u5185\u5efa\u7684\u5c5e\u6027\u6e90\u987a\u5e8f\u3002 \u7d27\u63a5\u7740\uff0c\u6587\u6863\u7ed9\u51fa\u793a\u4f8b\uff1a To provide a concrete example, suppose you develop a @Component that uses a name property, as shown in the following example: import org.springframework.stereotype.* ; import org.springframework.beans.factory.annotation.* ; @Component public class MyBean { @Value ( \"${name}\" ) private String name ; // ... } On your application classpath (for example, inside your jar) you can have an application.properties file that provides a sensible default property value for name . When running in a new environment, an application.properties file can be provided outside of your jar that overrides the name . For one-off testing, you can launch with a specific command line switch (for example, java -jar app.jar --name=\"Spring\" ). name \u5c5e\u6027\u5728 application.properties \u6587\u4ef6\u4e2d\u4e3a\u9ed8\u8ba4\u503c\uff0c\u5f53\u5e94\u7528\u8fd0\u884c\u5728\u65b0\u73af\u5883\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u7684\u65b9\u5f0f\u6765\u8986\u76d6\u8be5\u9ed8\u8ba4\u503c\uff0c\u4e5f\u5c31\u662f\u88ab @Value(\"${name}\") \u6ce8\u5165\u7684 name \u7684\u503c\u4e5f\u968f\u4e4b\u53d8\u5316\u3002 \u56e0\u4e3aSpring Boot\u5185\u5efa\u5c5e\u6027\u6e90\u7684\u987a\u5e8f\u786e\u5b9a\u4e86 4. Command line arguments \u7684\u4f18\u5148\u7ea7\u662f\u9ad8\u4e8e 15. Application properties packaged inside your jar (application.properties and YAML variants) \u7684\uff0c\u56e0\u6b64 application.properties \u4e2d\u7684\u9ed8\u8ba4\u503c\u88ab\u5ffd\u7565\uff0c\u8fbe\u5230\u4e86\u8986\u76d6\u7684\u76ee\u7684\u3002 \u5bf9\u4e8e\u53ef\u6269\u5c55\u7684\u5e94\u7528\uff0c\u5176\u4e2d\u4f7f\u7528\u7684\u529f\u80fd\u6027\u7ec4\u4ef6\u662f\u53ef\u914d\u7f6e\u5316\u7684\uff0c\u82e5\u8981\u8bbe\u7f6eSpring\u5e94\u7528\u7684 profile \u4e3a dev \uff0c\u53ef\u4ee5\u8c03\u7528 ConfigurableEnvironment \u7684 setActiveProfiles(\"dev\") \u65b9\u6cd5\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\uff1a package deep.in.spring.boot.config ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.Profile ; @Configuration public class AppConfig { @Bean public void defaultBean () { System . out . println ( \"default Bean\" ); } @Profile ( \"dev\" ) @Bean public void devBean () { System . out . println ( \"dev Bean\" ); } @Profile ( \"test\" ) @Bean public void testBean () { System . out . println ( \"test Bean\" ); } } \u7f16\u5199\u6307\u5b9a profile \u7684 main() \u65b9\u6cd5\uff1a public static void main ( String [] args ) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . getEnvironment (). setActiveProfiles ( \"dev\" ); context . register ( AppConfig . class ); context . refresh (); context . close (); } \u5f97\u5230\u8f93\u51fa\uff1a 17:40:58.686 [main] DEBUG org.springframework.core.env.StandardEnvironment - Activating profiles [dev] 17:40:58.725 [main] DEBUG org.springframework.context.annotation.AnnotationConfigApplicationContext - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@6bc168e5 17:40:58.738 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' 17:40:58.862 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor' 17:40:58.864 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory' 17:40:58.865 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor' 17:40:58.867 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor' 17:40:58.873 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'appConfig' 17:40:58.878 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'defaultBean' default Bean 17:40:58.888 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'devBean' dev Bean 17:40:58.910 [main] DEBUG org.springframework.context.annotation.AnnotationConfigApplicationContext - Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@6bc168e5, started on Sat Aug 29 17:40:58 CST 2020 Process finished with exit code 0 \u56e0\u4e3a defaultBean \u6ca1\u6709\u8bbe\u7f6e profile \uff0c\u5219\u6bcf\u6b21\u90fd\u4f1a\u52a0\u8f7d\u8be5Bean\uff0c\u800c devBean \u548c testBean \u6307\u5b9a\u4e86 profile \uff0c\u53ea\u5f53\u8be5\u7c7b\u578b\u7684 profile \u8bbe\u7f6e\u65f6\u624d\u4f1a\u88ab\u52a0\u8f7d\u3002 \u4e0a\u8ff0\u4ee3\u7801\u662f\u4e00\u79cd\u663e\u5f0f\u7684\u4ee3\u7801\u914d\u7f6e\uff0c\u914d\u7f6e\u6570\u636e\u6e90\u6765\u6e90\u4e8e\u5185\u90e8\u4ee3\u7801\u5b9e\u73b0\uff0c\u4e5f\u79f0\u4e3a\u201c\u5185\u90e8\u5316\u914d\u7f6e\u201d\uff0c\u867d\u7136\u53ef\u4ee5\u8fbe\u5230\u76ee\u7684\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u7f3a\u5c11\u5f39\u6027\u3002 \u5b9e\u73b0\u76f8\u540c\u7684\u9700\u6c42\uff0cSpring Boot\u63d0\u4f9b\u4e86\u5b9e\u73b0\uff0c\u6bd4\u5982\u5728 application.yml \u6587\u4ef6\u4e2d\u914d\u7f6e\uff1a spring : profiles : active : dev \u6216\u8005\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570\u7684\u65b9\u5f0f --spring.profiles.active=dev \u3002 \u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f\u90fd\u662f\u201c\u5916\u90e8\u5316\u914d\u7f6e\u201d\uff0c\u5728\u5b98\u65b9\u6587\u6863\u4e2d\u6709\u660e\u786e\u8bf4\u660e\uff0c\u4e5f\u5c31\u662f\u5916\u90e8\u914d\u7f6e\u5c5e\u6027\u6e90\u662f\u201c\u5916\u90e8\u5316\u914d\u7f6e\u201d\u7684\u8bfb\u53d6\u5a92\u4ecb\uff0c\u53ef\u4ee5\u662f\u914d\u7f6e\u6587\u4ef6\u65b9\u5f0f\uff0c\u73af\u5883\u53d8\u91cf\u65b9\u5f0f\u6216\u547d\u4ee4\u884c\u53c2\u6570\u65b9\u5f0f\u7b49\u3002 3. \u7ea6\u5b9a\u4f18\u4e8e\u914d\u7f6e \u00b6 Spring Boot\u7684\u6700\u540e\u4e00\u4e2a\u7279\u6027\uff1a Absolutely no code generation and no requirement for XML configuration \u5c31\u662f\u7ea6\u5b9a\u4f18\u4e8e\u914d\u7f6e\u7684\u4f53\u73b0\u3002\u8be5\u7279\u6027\u662fSpring Framework\u5df2\u7ecf\u652f\u6301\u7684\uff0c\u5e76\u975e\u662fSpring Boot\u5f15\u5165\u7684\u3002","title":"Understanding Production-Ready"},{"location":"SpringBoot/05-spring-boot-understanding-prod-ready/#1-spring-boot-actuator","text":"\u5728\u5b98\u65b9\u6587\u6863\u4e2d\uff0cProduction-Ready\u7279\u6027\u51fa\u81ea\uff1a Spring Boot Actuator: Production-ready Features Spring Boot includes a number of additional features to help you monitor and manage your application when you push it to production. You can choose to manage and monitor your application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering can also be automatically applied to your application. \u4e5f\u5c31\u662f\uff0c\u4f7f\u7528HTTP\u6216\u8005JMX\u6765\u76d1\u63a7\u548c\u7ba1\u7406\u6295\u5165\u751f\u4ea7\u7684\u5e94\u7528\u3002\u5ba1\u8ba1\u3001\u5065\u5eb7\u548c\u6307\u6807\u6536\u96c6\u53ef\u4ee5\u81ea\u52a8\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u5b98\u65b9\u6587\u6863\u8fdb\u4e00\u6b65\u8bf4\u660e\uff1a Definition of Actuator An actuator is a manufacturing term that refers to a mechanical device for moving or controlling something. Actuators can generate a large amount of motion from a small change. \u7efc\u4e0a\uff0cSpring Boot Actuator\u7528\u4e8e\u76d1\u63a7\u548c\u7ba1\u7406Spring\u5e94\u7528\uff0c\u53ef\u4ee5\u901a\u8fc7HTTP edpoints\u6216\u8005JMX Bean\u6765\u4ea4\u4e92\u3002 \u8981\u5f00\u542f\u8fd9\u4e2a\u7279\u6027\uff0c\u5b98\u65b9\u6587\u6863\u8fdb\u4e00\u6b65\u8bf4\u660e\uff1a Enabling Production-ready Features The spring-boot-actuator module provides all of Spring Boot\u2019s production-ready features. The recommended way to enable the features is to add a dependency on the spring-boot-starter-actuator \u2018Starter\u2019. To add the actuator to a Maven based project, add the following \u2018Starter\u2019 dependency: <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-actuator </artifactId> </dependency> </dependencies> \u4e5f\u5c31\u662f\u5c06\u4e0a\u8ff0\u4f9d\u8d56\u52a0\u5165\u5230pom.xml\u6587\u4ef6\u4e2d\uff0c\u5c31\u53ef\u4ee5\u5f00\u542fActuator\u3002 \u5b98\u65b9\u6587\u6863\u5217\u51fa\u4e86\u6240\u6709\u7684\u5185\u5efaendpoints\uff0c\u53ef\u4ee5\u53c2\u8003\uff1a https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints \u542f\u52a8\u9879\u76ee\uff0c\u5728\u542f\u52a8\u65e5\u5fd7\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a (\u7701\u7565\u90e8\u5206\u8f93\u51fa...) 2020-08-28 16:26:47.857 INFO 4230 --- [ main] o.s.b.a.e.web.EndpointLinksResolver : Exposing 2 endpoint(s) beneath base path '/actuator' 2020-08-28 16:26:47.915 INFO 4230 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-08-28 16:26:47.928 INFO 4230 --- [ main] deep.in.spring.boot.App : Started App in 3.524 seconds (JVM running for 4.005) \u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cActuator\u66b4\u97322\u4e2a\u7aef\u70b9\uff1a health \u548c info \uff0c\u6d4b\u8bd5\u8fd9\u4e9b\u7aef\u70b9\uff0c\u53ef\u4ee5\u770b\u5230\uff1a $ curl http://localhost:8080/actuator/health | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 15 0 15 0 0 92 0 --:--:-- --:--:-- --:--:-- 92 { \"status\" : \"UP\" } $ curl http://localhost:8080/actuator/info | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2 0 2 0 0 181 0 --:--:-- --:--:-- --:--:-- 181 {} $ curl http://localhost:8080/actuator/beans | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 116 0 116 0 0 6105 0 --:--:-- --:--:-- --:--:-- 6105 { \"status\" : 404, \"path\" : \"/actuator/beans\", \"error\" : \"Not Found\", \"timestamp\" : \"2020-08-28T08:30:33.798+00:00\", \"message\" : \"\" } \u5982\u679c\u9700\u8981\u66b4\u9732\u5176\u4ed6\u975e\u9ed8\u8ba4\u5f00\u653e\u7684\u7aef\u70b9\uff0c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a management : endpoints : web : exposure : include : \"*\" \u67e5\u770b beans \u7aef\u70b9\u7684\u8f93\u51fa\uff1a \u53ef\u4ee5\u770b\u5230\u88c5\u914d\u7684Bean\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684*\u66ff\u6362\u4e3a\u5176\u4ed6\u786e\u5b9a\u7684\u7aef\u70b9\u540d\u79f0\u5373\u53ef\u5f00\u542f\u6307\u5b9a\u7aef\u70b9\u3002 env \u7aef\u70b9\u5305\u542b\u4e86\u7cfb\u7edf\u73af\u5883\u914d\u7f6e\u7684\u4fe1\u606f\uff1a \u5176\u4e2d\u4e5f\u80fd\u770b\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u914d\u7f6e management.endpoints.web.exposure.include \u7684\u5185\u5bb9\u548c\u6240\u5728\u4f4d\u7f6e\u3002 metrics \u7aef\u70b9\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u7684\u4e00\u4e9b\u6307\u6807\u6570\u636e\uff1a $ curl http://localhost:8080/actuator/metrics | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 1134 0 1134 0 0 369k 0 --:--:-- --:--:-- --:--:-- 369k { \"names\" : [ \"hikaricp.connections\", \"hikaricp.connections.acquire\", \"hikaricp.connections.active\", \"hikaricp.connections.creation\", \"hikaricp.connections.idle\", \"hikaricp.connections.max\", \"hikaricp.connections.min\", \"hikaricp.connections.pending\", \"hikaricp.connections.timeout\", \"hikaricp.connections.usage\", \"http.server.requests\", \"jdbc.connections.active\", \"jdbc.connections.idle\", \"jdbc.connections.max\", \"jdbc.connections.min\", \"jvm.buffer.count\", \"jvm.buffer.memory.used\", \"jvm.buffer.total.capacity\", \"jvm.classes.loaded\", \"jvm.classes.unloaded\", \"jvm.gc.live.data.size\", \"jvm.gc.max.data.size\", \"jvm.gc.memory.allocated\", \"jvm.gc.memory.promoted\", \"jvm.gc.pause\", \"jvm.memory.committed\", \"jvm.memory.max\", \"jvm.memory.used\", \"jvm.threads.daemon\", \"jvm.threads.live\", \"jvm.threads.peak\", \"jvm.threads.states\", \"logback.events\", \"process.cpu.usage\", \"process.files.max\", \"process.files.open\", \"process.start.time\", \"process.uptime\", \"system.cpu.count\", \"system.cpu.usage\", \"system.load.average.1m\", \"tomcat.sessions.active.current\", \"tomcat.sessions.active.max\", \"tomcat.sessions.alive.max\", \"tomcat.sessions.created\", \"tomcat.sessions.expired\", \"tomcat.sessions.rejected\" ] } \u4f7f\u7528\u6307\u6807\u7684\u540d\u79f0\u5373\u53ef\u67e5\u770b\u8be5\u6307\u6807\u7684\u53c2\u6570\uff0c\u4f8b\u5982\u67e5\u770b system.cpu.count \uff1a $ curl http://localhost:8080/actuator/metrics/system.cpu.count | json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 193 0 193 0 0 64333 0 --:--:-- --:--:-- --:--:-- 64333 { \"description\" : \"The number of processors available to the Java virtual machine\", \"availableTags\" : [], \"baseUnit\" : null, \"name\" : \"system.cpu.count\", \"measurements\" : [ { \"value\" : 16, \"statistic\" : \"VALUE\" } ] }","title":"1. Spring Boot Actuator"},{"location":"SpringBoot/05-spring-boot-understanding-prod-ready/#2","text":"\u5b98\u65b9\u6587\u6863\u5bf9\u5916\u90e8\u5316\u914d\u7f6e\u7684\u89e3\u91ca\u662f\uff1a Externalized Configuration Spring Boot lets you externalize your configuration so that you can work with the same application code in different environments. You can use properties files, YAML files, environment variables, and command-line arguments to externalize configuration. Property values can be injected directly into your beans by using the @Value annotation, accessed through Spring\u2019s Environment abstraction, or be bound to structured objects through @ConfigurationProperties . \u6587\u6863\u4e2d\u8bf4\uff0c\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u6839\u636e\u6240\u5904\u7684\u4e0d\u540c\u73af\u5883\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u5916\u90e8\u5316\u914d\u7f6e\uff0c\u6bd4\u5982 properties \u6587\u4ef6\uff0c YAML \u6587\u4ef6\uff0c\u547d\u4ee4\u884c\u53c2\u6570\u6216\u8005\u73af\u5883\u53d8\u91cf\u3002 \u5916\u90e8\u5316\u914d\u7f6e\u7684\u5c5e\u6027\u503c\u53ef\u4ee5\u901a\u8fc7 @Value \u6ce8\u89e3\u3001Spring\u7684 Environment \uff0c\u6216\u8005 @ConfigurationProperties \u7ed1\u5b9a\u5230\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u65b9\u5f0f\u76f4\u63a5\u6ce8\u5165\u5230Bean\u4e2d\u3002 \u5b98\u65b9\u6587\u6863\u7ee7\u7eed\u8bf4\u660e\uff1a Spring Boot uses a very particular PropertySource order that is designed to allow sensible overriding of values. Properties are considered in the following order: Devtools global settings properties in the $HOME/.config/spring-boot directory when devtools is active. @TestPropertySource annotations on your tests. properties attribute on your tests. Available on @SpringBootTest and the test annotations for testing a particular slice of your application . Command line arguments. Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property). ServletConfig init parameters. ServletContext init parameters. JNDI attributes from java:comp/env . Java System properties ( System.getProperties() ). OS environment variables. A RandomValuePropertySource that has properties only in random.* . Profile-specific application properties outside of your packaged jar ( application-{profile}.properties and YAML variants). Profile-specific application properties packaged inside your jar ( application-{profile}.properties and YAML variants). Application properties outside of your packaged jar ( application.properties and YAML variants). Application properties packaged inside your jar ( application.properties and YAML variants). @PropertySource annotations on your @Configuration classes. Please note that such property sources are not added to the Environment until the application context is being refreshed. This is too late to configure certain properties such as logging.* and spring.main.* which are read before refresh begins. Default properties (specified by setting SpringApplication.setDefaultProperties ). \u6587\u6863\u4e2d\u6240\u8bf4\u7684 PropertySource (\u5c5e\u6027\u6e90)\uff0c\u5c31\u662f\u5916\u90e8\u5316\u914d\u7f6e\u7684\u5c5e\u6027\u6765\u6e90\uff0cSpring Boot\u89c4\u5b9a\u4e8617\u4e2d\u5185\u5efa\u7684\u5c5e\u6027\u6e90\u987a\u5e8f\u3002 \u7d27\u63a5\u7740\uff0c\u6587\u6863\u7ed9\u51fa\u793a\u4f8b\uff1a To provide a concrete example, suppose you develop a @Component that uses a name property, as shown in the following example: import org.springframework.stereotype.* ; import org.springframework.beans.factory.annotation.* ; @Component public class MyBean { @Value ( \"${name}\" ) private String name ; // ... } On your application classpath (for example, inside your jar) you can have an application.properties file that provides a sensible default property value for name . When running in a new environment, an application.properties file can be provided outside of your jar that overrides the name . For one-off testing, you can launch with a specific command line switch (for example, java -jar app.jar --name=\"Spring\" ). name \u5c5e\u6027\u5728 application.properties \u6587\u4ef6\u4e2d\u4e3a\u9ed8\u8ba4\u503c\uff0c\u5f53\u5e94\u7528\u8fd0\u884c\u5728\u65b0\u73af\u5883\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u7684\u65b9\u5f0f\u6765\u8986\u76d6\u8be5\u9ed8\u8ba4\u503c\uff0c\u4e5f\u5c31\u662f\u88ab @Value(\"${name}\") \u6ce8\u5165\u7684 name \u7684\u503c\u4e5f\u968f\u4e4b\u53d8\u5316\u3002 \u56e0\u4e3aSpring Boot\u5185\u5efa\u5c5e\u6027\u6e90\u7684\u987a\u5e8f\u786e\u5b9a\u4e86 4. Command line arguments \u7684\u4f18\u5148\u7ea7\u662f\u9ad8\u4e8e 15. Application properties packaged inside your jar (application.properties and YAML variants) \u7684\uff0c\u56e0\u6b64 application.properties \u4e2d\u7684\u9ed8\u8ba4\u503c\u88ab\u5ffd\u7565\uff0c\u8fbe\u5230\u4e86\u8986\u76d6\u7684\u76ee\u7684\u3002 \u5bf9\u4e8e\u53ef\u6269\u5c55\u7684\u5e94\u7528\uff0c\u5176\u4e2d\u4f7f\u7528\u7684\u529f\u80fd\u6027\u7ec4\u4ef6\u662f\u53ef\u914d\u7f6e\u5316\u7684\uff0c\u82e5\u8981\u8bbe\u7f6eSpring\u5e94\u7528\u7684 profile \u4e3a dev \uff0c\u53ef\u4ee5\u8c03\u7528 ConfigurableEnvironment \u7684 setActiveProfiles(\"dev\") \u65b9\u6cd5\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\uff1a package deep.in.spring.boot.config ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.Profile ; @Configuration public class AppConfig { @Bean public void defaultBean () { System . out . println ( \"default Bean\" ); } @Profile ( \"dev\" ) @Bean public void devBean () { System . out . println ( \"dev Bean\" ); } @Profile ( \"test\" ) @Bean public void testBean () { System . out . println ( \"test Bean\" ); } } \u7f16\u5199\u6307\u5b9a profile \u7684 main() \u65b9\u6cd5\uff1a public static void main ( String [] args ) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext (); context . getEnvironment (). setActiveProfiles ( \"dev\" ); context . register ( AppConfig . class ); context . refresh (); context . close (); } \u5f97\u5230\u8f93\u51fa\uff1a 17:40:58.686 [main] DEBUG org.springframework.core.env.StandardEnvironment - Activating profiles [dev] 17:40:58.725 [main] DEBUG org.springframework.context.annotation.AnnotationConfigApplicationContext - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@6bc168e5 17:40:58.738 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' 17:40:58.862 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor' 17:40:58.864 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory' 17:40:58.865 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor' 17:40:58.867 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor' 17:40:58.873 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'appConfig' 17:40:58.878 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'defaultBean' default Bean 17:40:58.888 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'devBean' dev Bean 17:40:58.910 [main] DEBUG org.springframework.context.annotation.AnnotationConfigApplicationContext - Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@6bc168e5, started on Sat Aug 29 17:40:58 CST 2020 Process finished with exit code 0 \u56e0\u4e3a defaultBean \u6ca1\u6709\u8bbe\u7f6e profile \uff0c\u5219\u6bcf\u6b21\u90fd\u4f1a\u52a0\u8f7d\u8be5Bean\uff0c\u800c devBean \u548c testBean \u6307\u5b9a\u4e86 profile \uff0c\u53ea\u5f53\u8be5\u7c7b\u578b\u7684 profile \u8bbe\u7f6e\u65f6\u624d\u4f1a\u88ab\u52a0\u8f7d\u3002 \u4e0a\u8ff0\u4ee3\u7801\u662f\u4e00\u79cd\u663e\u5f0f\u7684\u4ee3\u7801\u914d\u7f6e\uff0c\u914d\u7f6e\u6570\u636e\u6e90\u6765\u6e90\u4e8e\u5185\u90e8\u4ee3\u7801\u5b9e\u73b0\uff0c\u4e5f\u79f0\u4e3a\u201c\u5185\u90e8\u5316\u914d\u7f6e\u201d\uff0c\u867d\u7136\u53ef\u4ee5\u8fbe\u5230\u76ee\u7684\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u7f3a\u5c11\u5f39\u6027\u3002 \u5b9e\u73b0\u76f8\u540c\u7684\u9700\u6c42\uff0cSpring Boot\u63d0\u4f9b\u4e86\u5b9e\u73b0\uff0c\u6bd4\u5982\u5728 application.yml \u6587\u4ef6\u4e2d\u914d\u7f6e\uff1a spring : profiles : active : dev \u6216\u8005\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570\u7684\u65b9\u5f0f --spring.profiles.active=dev \u3002 \u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f\u90fd\u662f\u201c\u5916\u90e8\u5316\u914d\u7f6e\u201d\uff0c\u5728\u5b98\u65b9\u6587\u6863\u4e2d\u6709\u660e\u786e\u8bf4\u660e\uff0c\u4e5f\u5c31\u662f\u5916\u90e8\u914d\u7f6e\u5c5e\u6027\u6e90\u662f\u201c\u5916\u90e8\u5316\u914d\u7f6e\u201d\u7684\u8bfb\u53d6\u5a92\u4ecb\uff0c\u53ef\u4ee5\u662f\u914d\u7f6e\u6587\u4ef6\u65b9\u5f0f\uff0c\u73af\u5883\u53d8\u91cf\u65b9\u5f0f\u6216\u547d\u4ee4\u884c\u53c2\u6570\u65b9\u5f0f\u7b49\u3002","title":"2. \u7406\u89e3\u5916\u90e8\u5316\u914d\u7f6e"},{"location":"SpringBoot/05-spring-boot-understanding-prod-ready/#3","text":"Spring Boot\u7684\u6700\u540e\u4e00\u4e2a\u7279\u6027\uff1a Absolutely no code generation and no requirement for XML configuration \u5c31\u662f\u7ea6\u5b9a\u4f18\u4e8e\u914d\u7f6e\u7684\u4f53\u73b0\u3002\u8be5\u7279\u6027\u662fSpring Framework\u5df2\u7ecf\u652f\u6301\u7684\uff0c\u5e76\u975e\u662fSpring Boot\u5f15\u5165\u7684\u3002","title":"3. \u7ea6\u5b9a\u4f18\u4e8e\u914d\u7f6e"},{"location":"SpringBoot/app-shardingsphere-master-slave-mysql/","text":"App \u793a\u4f8b - \u4f7f\u7528ShardingSphere\u8fde\u63a5MySQL\u4e3b\u4ece\u5e93 1. \u6784\u5efaMySQL\u4e3b\u4ece\u5e93 \u00b6 \u5177\u4f53\u65b9\u6cd5\u8bf7\u70b9\u51fb \u53c2\u8003\u6587\u6863 2. ShardingSphere \u00b6 Apache ShardingSphere \u662f\u4e00\u5957\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u4e2d\u95f4\u4ef6\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \uff0c\u66f4\u591a\u5185\u5bb9\u4e5f\u53ef\u67e5\u8be2 \u5b98\u65b9\u7f51\u7ad9 \u672c\u793a\u4f8b\u4f7f\u7528\u7684\u6570\u636e\u5e93\u65b9\u6848\u662fMySQL\u4e00\u4e3b\u4e8c\u4ece\u8bfb\u5199\u5206\u79bb(\u5373\u4e3b\u5e93\u8d1f\u8d23\u5199\uff0c\u4ece\u5e93\u8d1f\u8d23\u8bfb\uff0c\u4ece\u5e93\u4f7f\u7528Binlog\u8fdb\u884c\u5b9e\u65f6\u540c\u6b65)\u3002 \u4f7f\u7528ShardingSphere\u4e2d\u95f4\u4ef6\u7684\u76ee\u7684\u5728\u4e8e\u5176\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u5728\u4e3b\u4ece\u5e93\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u800c\u7a0b\u5e8f\u4e2d\u65e0\u9700\u6307\u5b9a\u8bfb\u5199\u64cd\u4f5c\u7684\u6570\u636e\u5e93\u3002 3. \u4ee3\u7801\u793a\u4f8b \u00b6 3.1 \u5f15\u5165\u4f9d\u8d56 \u00b6 Spring Boot\u7684\u7248\u672c\u4e3a2.3.2.RELEASE\uff0cShardingSphere\u7684\u7248\u672c\u4e3a4.1.1 \u540c\u65f6\u52a0\u5165MySQL\u7684\u6570\u636e\u5e93\u9a71\u52a8\u548cMyBatis\u7684starter \u53c2\u8003\u5982\u4e0b\u914d\u7f6e\uff1a <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> 2.3.2.RELEASE </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-jdbc </artifactId> <version> 2.3.2.RELEASE </version> </dependency> <dependency> <groupId> org.apache.shardingsphere </groupId> <artifactId> sharding-jdbc-spring-boot-starter </artifactId> <version> 4.1.1 </version> </dependency> <dependency> <groupId> com.alibaba </groupId> <artifactId> druid </artifactId> <version> 1.1.23 </version> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> <version> 8.0.21 </version> </dependency> <dependency> <groupId> org.mybatis.spring.boot </groupId> <artifactId> mybatis-spring-boot-starter </artifactId> <version> 2.1.3 </version> </dependency> </dependencies> 3.2 Spring Boot\u914d\u7f6e \u00b6 spring.shardingsphere \u5c31\u662fShardingSphere\u914d\u7f6e\u7684\u8d77\u59cb\u5934\uff0c\u6570\u636e\u5e93\u4f7f\u7528\u7684\u662f\u4e00\u4e3b\u4e8c\u4ece\uff0c\u5373\u914d\u7f6e datasource \u65f6\u76f4\u63a5\u6307\u660e names: master, slave1, slave2 \u7ee7\u7eed\u7ed9\u6bcf\u4e2a\u6570\u636e\u6e90\u914d\u7f6e\u76f8\u5173\u4fe1\u606f\u5373\u53ef(\u8fd9\u91cc\u7684\u4ece\u5e93\u7528\u6237mysql\u53ea\u6709select\u6743\u9650) \u914d\u7f6e\u597d\u6570\u636e\u6e90\u4fe1\u606f\uff0c\u7ee7\u7eed\u8bbe\u7f6eShardingSphere\u7684\u4e3b\u4ece\u914d\u7f6e spring.shardingsphere.masterslave \u4fe1\u606f\uff0c\u6307\u5b9a\u4e3b\u5e93\u7684name\u548c\u4ece\u5e93\u7684name\uff0c\u8fd8\u6709\u8d1f\u8f7d\u5e73\u8861\u7b97\u6cd5\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u7684 round_robin \u8868\u793a\u8f6e\u8be2 \u914d\u7f6e\u5b8cShardingSphere\uff0c\u7ee7\u7eed\u914d\u7f6eMyBatis\uff0c\u6307\u5b9a\u51famapper\u548cconfig\u7684\u52a0\u8f7d\u8def\u5f84\u5373\u53ef \u53c2\u8003\u5982\u4e0b\u914d\u7f6e\uff1a server : port : 8080 spring : shardingsphere : datasource : names : master,slave1,slave2 master : type : com.alibaba.druid.pool.DruidDataSource driver-class-name : com.mysql.cj.jdbc.Driver url : jdbc:mysql://39.105.58.106:33306/demo username : root password : root # druid: # initial-size: 5 # max-active: 10 # min-idle: 5 # max-wait: 60000 # time-between-eviction-runs-millis: 120000 # min-evictable-idle-time-millis: 300000 # validation-query: SELECT 1 # test-while-idle: true slave1 : type : com.alibaba.druid.pool.DruidDataSource driver-class-name : com.mysql.cj.jdbc.Driver url : jdbc:mysql://39.105.58.106:33307/demo username : mysql password : mysql # druid: # initial-size: 5 # max-active: 10 # min-idle: 5 # max-wait: 60000 # time-between-eviction-runs-millis: 120000 # min-evictable-idle-time-millis: 300000 # validation-query: SELECT 1 # test-while-idle: true slave2 : type : com.alibaba.druid.pool.DruidDataSource driver-class-name : com.mysql.cj.jdbc.Driver url : jdbc:mysql://39.105.58.106:33308/demo username : mysql password : mysql # druid: # initial-size: 5 # max-active: 10 # min-idle: 5 # max-wait: 60000 # time-between-eviction-runs-millis: 120000 # min-evictable-idle-time-millis: 300000 # validation-query: SELECT 1 # test-while-idle: true masterslave : name : ms master-data-source-name : master slave-data-source-names : slave1, slave2 load-balance-algorithm-type : round_robin props : sql : show : true mybatis : mapperLocations : classpath:mybatis/**/*Mapper.xml configLocation : classpath:mybatis/mybatis-config.xml 3.3 \u6570\u636e\u6a21\u578b\u548cMyBatis\u914d\u7f6e \u00b6 \u6f14\u793a\u4f7f\u7528\u7684\u7b80\u5355\u6570\u636e\u6a21\u578b\u4e3a CREATE TABLE ` USERS ` ( ` ID ` bigint NOT NULL AUTO_INCREMENT , ` USER_NAME ` varchar ( 100 ) NOT NULL , ` CREATED_TIME ` datetime NOT NULL , PRIMARY KEY ( ` ID ` ) ) MyBatis\u7684\u914d\u7f6e\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"> <configuration> <settings> <setting name= \"cacheEnabled\" value= \"true\" /> <!-- \u5168\u5c40\u6620\u5c04\u5668\u542f\u7528\u7f13\u5b58 --> <setting name= \"useGeneratedKeys\" value= \"true\" /> <!-- \u5141\u8bb8 JDBC \u652f\u6301\u81ea\u52a8\u751f\u6210\u4e3b\u952e --> </settings> <typeAliases> <typeAlias type= \"sharding.sphere.demo.entity.User\" alias= \"User\" /> </typeAliases> </configuration> \u5176\u4e2d User.java \u5b9a\u4e49\u4e3a\uff1a package sharding.sphere.demo.entity ; import java.util.Date ; public class User { private Long id ; private String userName ; private Date createdTime ; public Long getId () { return id ; } public void setId ( Long id ) { this . id = id ; } public String getUserName () { return userName ; } public void setUserName ( String userName ) { this . userName = userName ; } public Date getCreatedTime () { return createdTime ; } public void setCreatedTime ( Date createdTime ) { this . createdTime = createdTime ; } } MyBatis\u7684mapper\u5b9a\u4e49\u4e3a\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> <mapper namespace= \"sharding.sphere.demo.mapper.UserMapper\" > <resultMap id= \"userResult\" type= \"User\" > <id property= \"id\" column= \"ID\" /> <result property= \"userName\" column= \"USER_NAME\" /> <result property= \"createdTime\" column= \"CREATED_TIME\" /> </resultMap> <select id= \"listUsers\" resultMap= \"userResult\" > SELECT * FROM USERS LIMIT #{start}, #{limit} </select> <select id= \"getUserById\" resultMap= \"userResult\" > SELECT * FROM USERS WHERE ID = #{id} </select> <insert id= \"insertUser\" parameterType= \"User\" > INSERT INTO USERS(USER_NAME,CREATED_TIME) VALUES (#{user.userName}, now()) </insert> <delete id= \"deleteUser\" parameterType= \"User\" > DELETE FROM USERS WHERE ID = #{user.id} </delete> </mapper> \u5bf9\u5e94\u7684Mapper\u7c7b\uff1a package sharding.sphere.demo.mapper ; import org.apache.ibatis.annotations.Mapper ; import org.apache.ibatis.annotations.Param ; import sharding.sphere.demo.entity.User ; import java.util.List ; @Mapper public interface UserMapper { List < User > listUsers ( @Param ( \"start\" ) int start , @Param ( \"limit\" ) int limit ); User getUserById ( @Param ( \"id\" ) long id ); int insertUser ( @Param ( \"user\" ) User user ); int deleteUser ( @Param ( \"user\" ) User user ); } 3.4 \u7f16\u5199\u4e1a\u52a1\u4ee3\u7801 \u00b6 \u793a\u4f8b\u4ee3\u7801\u4ec5\u5305\u542b\u6309ID\u83b7\u53d6User\u4fe1\u606f\u3001\u589e\u52a0User\u4e24\u4e2a\u529f\u80fd\uff1a package sharding.sphere.demo.service.impl ; import org.apache.shardingsphere.api.hint.HintManager ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import sharding.sphere.demo.entity.User ; import sharding.sphere.demo.mapper.UserMapper ; import sharding.sphere.demo.service.UserService ; @Service public class UserServiceImpl implements UserService { @Autowired private UserMapper userMapper ; @Override public User getUserById ( Long id ) { return userMapper . getUserById ( id ); } @Override public int insertUser ( User user ) { return userMapper . insertUser ( user ); } } \u7f16\u5199API\u63a5\u53e3\uff1a package sharding.sphere.demo.controller ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.* ; import sharding.sphere.demo.entity.User ; import sharding.sphere.demo.service.UserService ; @RestController public class UserController { @Autowired private UserService userService ; @GetMapping ( value = \"/user/{id}\" ) public User getUserById ( @PathVariable ( \"id\" ) Long id ) { return userService . getUserById ( id ); } @PostMapping ( value = \"/user\" , consumes = \"application/json\" , produces = \"application/json\" ) public Long insertUser ( @RequestBody User user ) { userService . insertUser ( user ); return user . getId (); } } \u5f15\u5bfc\u7c7b\uff1a package sharding.sphere.demo ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class ShardingSphereDemoApp { public static void main ( String [] args ) { SpringApplication . run ( ShardingSphereDemoApp . class , args ); } } 4. \u8fd0\u884c\u793a\u4f8b \u00b6 \u76f4\u63a5\u8fd0\u884c\u5f15\u5bfc\u7c7b\uff0c\u542f\u52a8\u9879\u76ee\uff1a . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-09-09 22:06:42.925 INFO 7602 --- [ main] s.sphere.demo.ShardingSphereDemoApp : Starting ShardingSphereDemoApp on nanleis-MacBook-Pro.local with PID 7602 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/sharding-sphere-demo/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot) 2020-09-09 22:06:42.927 INFO 7602 --- [ main] s.sphere.demo.ShardingSphereDemoApp : No active profile set, falling back to default profiles: default 2020-09-09 22:06:43.677 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.686 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere.sharding-org.apache.shardingsphere.shardingjdbc.spring.boot.sharding.SpringBootShardingRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.sharding.SpringBootShardingRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.694 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere.masterslave-org.apache.shardingsphere.shardingjdbc.spring.boot.masterslave.SpringBootMasterSlaveRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.masterslave.SpringBootMasterSlaveRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.696 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere.encrypt-org.apache.shardingsphere.shardingjdbc.spring.boot.encrypt.SpringBootEncryptRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.encrypt.SpringBootEncryptRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.700 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere.shadow-org.apache.shardingsphere.shardingjdbc.spring.boot.shadow.SpringBootShadowRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.shadow.SpringBootShadowRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.702 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere-org.apache.shardingsphere.shardingjdbc.spring.boot.common.SpringBootPropertiesConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.common.SpringBootPropertiesConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.918 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'org.apache.shardingsphere.shardingjdbc.spring.boot.SpringBootConfiguration' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.SpringBootConfiguration$$EnhancerBySpringCGLIB$$e7dff249] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:44.242 INFO 7602 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-09-09 22:06:44.255 INFO 7602 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-09-09 22:06:44.255 INFO 7602 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.37] 2020-09-09 22:06:44.341 INFO 7602 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-09-09 22:06:44.341 INFO 7602 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1263 ms 2020-09-09 22:06:44.660 INFO 7602 --- [ main] com.alibaba.druid.pool.DruidDataSource : {dataSource-1} inited 2020-09-09 22:06:45.364 INFO 7602 --- [ main] com.alibaba.druid.pool.DruidDataSource : {dataSource-2} inited 2020-09-09 22:06:45.811 INFO 7602 --- [ main] com.alibaba.druid.pool.DruidDataSource : {dataSource-3} inited 2020-09-09 22:06:46.292 INFO 7602 --- [ main] o.a.s.core.log.ConfigurationLogger : MasterSlaveRuleConfiguration: loadBalanceAlgorithmType: round_robin masterDataSourceName: master name: ms slaveDataSourceNames: - slave1 - slave2 2020-09-09 22:06:46.293 INFO 7602 --- [ main] o.a.s.core.log.ConfigurationLogger : Properties: sql.show: 'true' 2020-09-09 22:06:46.429 INFO 7602 --- [ main] ShardingSphere-metadata : Loading 1 tables' meta data. 2020-09-09 22:06:46.583 INFO 7602 --- [ main] ShardingSphere-metadata : Meta data load finished, cost 290 milliseconds. 2020-09-09 22:06:46.935 INFO 7602 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-09-09 22:06:47.170 INFO 7602 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-09-09 22:06:47.186 INFO 7602 --- [ main] s.sphere.demo.ShardingSphereDemoApp : Started ShardingSphereDemoApp in 4.612 seconds (JVM running for 5.065) \u53ef\u4ee5\u770b\u5230 DruidDataSource \u521d\u59cb\u5316\u4e863\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u5e94 master \uff0c slave1 \u548c slave2 \u3002 \u9996\u5148\u5728\u6570\u636e\u5e93master\u4e2d\u6dfb\u52a0\u4e00\u4e2aUser: insert into USERS ( USER_NAME , CREATED_TIME ) values ( 'Lei Nan' , now ()); \u8bbf\u95ee\u63a5\u53e3 /user/{id} \uff1a \u65e5\u5fd7\u8f93\u51fa\u4e3a\uff1a 2020-09-09 22:06:52.656 INFO 7602 --- [nio-8080-exec-1] ShardingSphere-SQL : Logic SQL: SELECT * FROM USERS WHERE ID = ? 2020-09-09 22:06:52.657 INFO 7602 --- [nio-8080-exec-1] ShardingSphere-SQL : SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@3528a95f, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4b2481ee), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4b2481ee, projectionsContext=ProjectionsContext(startIndex=7, stopIndex=7, distinctRow=false, projections=[ShorthandProjection(owner=Optional.empty, actualColumns=[ColumnProjection(owner=null, name=id, alias=Optional.empty), ColumnProjection(owner=null, name=user_name, alias=Optional.empty), ColumnProjection(owner=null, name=created_time, alias=Optional.empty)])]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1a02bfb, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@4567ed4b, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@35f5c6e9, containsSubquery=false) 2020-09-09 22:06:52.657 INFO 7602 --- [nio-8080-exec-1] ShardingSphere-SQL : Actual SQL: slave1 ::: SELECT * FROM USERS WHERE ID = ? \u518d\u6b21\u6267\u884c\u65f6\uff1a 2020-09-09 22:09:30.725 INFO 7602 --- [nio-8080-exec-5] ShardingSphere-SQL : Actual SQL: slave2 ::: SELECT * FROM USERS WHERE ID = ? \u53ef\u4ee5\u770b\u5230 slave1 \u548c slave2 \u662f\u8f6e\u8be2\u67e5\u627e\u7684 \u901a\u8fc7API\u589e\u52a0User: \u65e5\u5fd7\u8f93\u51fa\u4e3a\uff1a 2020-09-09 23:26:35.559 INFO 8499 --- [nio-8080-exec-2] ShardingSphere-SQL : Logic SQL: INSERT INTO USERS(USER_NAME,CREATED_TIME) VALUES (?, now()) 2020-09-09 23:26:35.560 INFO 8499 --- [nio-8080-exec-2] ShardingSphere-SQL : SQLStatement: CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.InsertStatement@5534efa9, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6933988a) 2020-09-09 23:26:35.560 INFO 8499 --- [nio-8080-exec-2] ShardingSphere-SQL : Actual SQL: master ::: INSERT INTO USERS(USER_NAME,CREATED_TIME) VALUES (?, now()) \u65b0\u589e\u64cd\u4f5c\u81ea\u52a8\u4f7f\u7528 master \u4e3b\u5e93 \u5982\u679c\u67e5\u8be2\u64cd\u4f5c\u5f3a\u884c\u4f7f\u7528 master \u4e3b\u5e93\uff0c\u53ef\u4ee5\u5982\u4e0b\u8fdb\u884c\uff1a @Override public User getUserById ( Long id ) { if ( id == 2 ) { HintManager . getInstance (). setMasterRouteOnly (); } return userMapper . getUserById ( id ); } \u6267\u884c GET /user/2 \u65f6\uff0c\u65e5\u5fd7\u8f93\u51fa\u4e3a\uff1a 2020-09-09 23:31:53.901 INFO 8499 --- [nio-8080-exec-5] ShardingSphere-SQL : Actual SQL: master ::: SELECT * FROM USERS WHERE ID = ?","title":"Shardingsphere master-slave with MySQL"},{"location":"SpringBoot/app-shardingsphere-master-slave-mysql/#1-mysql","text":"\u5177\u4f53\u65b9\u6cd5\u8bf7\u70b9\u51fb \u53c2\u8003\u6587\u6863","title":"1. \u6784\u5efaMySQL\u4e3b\u4ece\u5e93"},{"location":"SpringBoot/app-shardingsphere-master-slave-mysql/#2-shardingsphere","text":"Apache ShardingSphere \u662f\u4e00\u5957\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u4e2d\u95f4\u4ef6\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \uff0c\u66f4\u591a\u5185\u5bb9\u4e5f\u53ef\u67e5\u8be2 \u5b98\u65b9\u7f51\u7ad9 \u672c\u793a\u4f8b\u4f7f\u7528\u7684\u6570\u636e\u5e93\u65b9\u6848\u662fMySQL\u4e00\u4e3b\u4e8c\u4ece\u8bfb\u5199\u5206\u79bb(\u5373\u4e3b\u5e93\u8d1f\u8d23\u5199\uff0c\u4ece\u5e93\u8d1f\u8d23\u8bfb\uff0c\u4ece\u5e93\u4f7f\u7528Binlog\u8fdb\u884c\u5b9e\u65f6\u540c\u6b65)\u3002 \u4f7f\u7528ShardingSphere\u4e2d\u95f4\u4ef6\u7684\u76ee\u7684\u5728\u4e8e\u5176\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u5728\u4e3b\u4ece\u5e93\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u800c\u7a0b\u5e8f\u4e2d\u65e0\u9700\u6307\u5b9a\u8bfb\u5199\u64cd\u4f5c\u7684\u6570\u636e\u5e93\u3002","title":"2. ShardingSphere"},{"location":"SpringBoot/app-shardingsphere-master-slave-mysql/#3","text":"","title":"3. \u4ee3\u7801\u793a\u4f8b"},{"location":"SpringBoot/app-shardingsphere-master-slave-mysql/#31","text":"Spring Boot\u7684\u7248\u672c\u4e3a2.3.2.RELEASE\uff0cShardingSphere\u7684\u7248\u672c\u4e3a4.1.1 \u540c\u65f6\u52a0\u5165MySQL\u7684\u6570\u636e\u5e93\u9a71\u52a8\u548cMyBatis\u7684starter \u53c2\u8003\u5982\u4e0b\u914d\u7f6e\uff1a <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> 2.3.2.RELEASE </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-jdbc </artifactId> <version> 2.3.2.RELEASE </version> </dependency> <dependency> <groupId> org.apache.shardingsphere </groupId> <artifactId> sharding-jdbc-spring-boot-starter </artifactId> <version> 4.1.1 </version> </dependency> <dependency> <groupId> com.alibaba </groupId> <artifactId> druid </artifactId> <version> 1.1.23 </version> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> <version> 8.0.21 </version> </dependency> <dependency> <groupId> org.mybatis.spring.boot </groupId> <artifactId> mybatis-spring-boot-starter </artifactId> <version> 2.1.3 </version> </dependency> </dependencies>","title":"3.1 \u5f15\u5165\u4f9d\u8d56"},{"location":"SpringBoot/app-shardingsphere-master-slave-mysql/#32-spring-boot","text":"spring.shardingsphere \u5c31\u662fShardingSphere\u914d\u7f6e\u7684\u8d77\u59cb\u5934\uff0c\u6570\u636e\u5e93\u4f7f\u7528\u7684\u662f\u4e00\u4e3b\u4e8c\u4ece\uff0c\u5373\u914d\u7f6e datasource \u65f6\u76f4\u63a5\u6307\u660e names: master, slave1, slave2 \u7ee7\u7eed\u7ed9\u6bcf\u4e2a\u6570\u636e\u6e90\u914d\u7f6e\u76f8\u5173\u4fe1\u606f\u5373\u53ef(\u8fd9\u91cc\u7684\u4ece\u5e93\u7528\u6237mysql\u53ea\u6709select\u6743\u9650) \u914d\u7f6e\u597d\u6570\u636e\u6e90\u4fe1\u606f\uff0c\u7ee7\u7eed\u8bbe\u7f6eShardingSphere\u7684\u4e3b\u4ece\u914d\u7f6e spring.shardingsphere.masterslave \u4fe1\u606f\uff0c\u6307\u5b9a\u4e3b\u5e93\u7684name\u548c\u4ece\u5e93\u7684name\uff0c\u8fd8\u6709\u8d1f\u8f7d\u5e73\u8861\u7b97\u6cd5\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u7684 round_robin \u8868\u793a\u8f6e\u8be2 \u914d\u7f6e\u5b8cShardingSphere\uff0c\u7ee7\u7eed\u914d\u7f6eMyBatis\uff0c\u6307\u5b9a\u51famapper\u548cconfig\u7684\u52a0\u8f7d\u8def\u5f84\u5373\u53ef \u53c2\u8003\u5982\u4e0b\u914d\u7f6e\uff1a server : port : 8080 spring : shardingsphere : datasource : names : master,slave1,slave2 master : type : com.alibaba.druid.pool.DruidDataSource driver-class-name : com.mysql.cj.jdbc.Driver url : jdbc:mysql://39.105.58.106:33306/demo username : root password : root # druid: # initial-size: 5 # max-active: 10 # min-idle: 5 # max-wait: 60000 # time-between-eviction-runs-millis: 120000 # min-evictable-idle-time-millis: 300000 # validation-query: SELECT 1 # test-while-idle: true slave1 : type : com.alibaba.druid.pool.DruidDataSource driver-class-name : com.mysql.cj.jdbc.Driver url : jdbc:mysql://39.105.58.106:33307/demo username : mysql password : mysql # druid: # initial-size: 5 # max-active: 10 # min-idle: 5 # max-wait: 60000 # time-between-eviction-runs-millis: 120000 # min-evictable-idle-time-millis: 300000 # validation-query: SELECT 1 # test-while-idle: true slave2 : type : com.alibaba.druid.pool.DruidDataSource driver-class-name : com.mysql.cj.jdbc.Driver url : jdbc:mysql://39.105.58.106:33308/demo username : mysql password : mysql # druid: # initial-size: 5 # max-active: 10 # min-idle: 5 # max-wait: 60000 # time-between-eviction-runs-millis: 120000 # min-evictable-idle-time-millis: 300000 # validation-query: SELECT 1 # test-while-idle: true masterslave : name : ms master-data-source-name : master slave-data-source-names : slave1, slave2 load-balance-algorithm-type : round_robin props : sql : show : true mybatis : mapperLocations : classpath:mybatis/**/*Mapper.xml configLocation : classpath:mybatis/mybatis-config.xml","title":"3.2 Spring Boot\u914d\u7f6e"},{"location":"SpringBoot/app-shardingsphere-master-slave-mysql/#33-mybatis","text":"\u6f14\u793a\u4f7f\u7528\u7684\u7b80\u5355\u6570\u636e\u6a21\u578b\u4e3a CREATE TABLE ` USERS ` ( ` ID ` bigint NOT NULL AUTO_INCREMENT , ` USER_NAME ` varchar ( 100 ) NOT NULL , ` CREATED_TIME ` datetime NOT NULL , PRIMARY KEY ( ` ID ` ) ) MyBatis\u7684\u914d\u7f6e\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"> <configuration> <settings> <setting name= \"cacheEnabled\" value= \"true\" /> <!-- \u5168\u5c40\u6620\u5c04\u5668\u542f\u7528\u7f13\u5b58 --> <setting name= \"useGeneratedKeys\" value= \"true\" /> <!-- \u5141\u8bb8 JDBC \u652f\u6301\u81ea\u52a8\u751f\u6210\u4e3b\u952e --> </settings> <typeAliases> <typeAlias type= \"sharding.sphere.demo.entity.User\" alias= \"User\" /> </typeAliases> </configuration> \u5176\u4e2d User.java \u5b9a\u4e49\u4e3a\uff1a package sharding.sphere.demo.entity ; import java.util.Date ; public class User { private Long id ; private String userName ; private Date createdTime ; public Long getId () { return id ; } public void setId ( Long id ) { this . id = id ; } public String getUserName () { return userName ; } public void setUserName ( String userName ) { this . userName = userName ; } public Date getCreatedTime () { return createdTime ; } public void setCreatedTime ( Date createdTime ) { this . createdTime = createdTime ; } } MyBatis\u7684mapper\u5b9a\u4e49\u4e3a\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> <mapper namespace= \"sharding.sphere.demo.mapper.UserMapper\" > <resultMap id= \"userResult\" type= \"User\" > <id property= \"id\" column= \"ID\" /> <result property= \"userName\" column= \"USER_NAME\" /> <result property= \"createdTime\" column= \"CREATED_TIME\" /> </resultMap> <select id= \"listUsers\" resultMap= \"userResult\" > SELECT * FROM USERS LIMIT #{start}, #{limit} </select> <select id= \"getUserById\" resultMap= \"userResult\" > SELECT * FROM USERS WHERE ID = #{id} </select> <insert id= \"insertUser\" parameterType= \"User\" > INSERT INTO USERS(USER_NAME,CREATED_TIME) VALUES (#{user.userName}, now()) </insert> <delete id= \"deleteUser\" parameterType= \"User\" > DELETE FROM USERS WHERE ID = #{user.id} </delete> </mapper> \u5bf9\u5e94\u7684Mapper\u7c7b\uff1a package sharding.sphere.demo.mapper ; import org.apache.ibatis.annotations.Mapper ; import org.apache.ibatis.annotations.Param ; import sharding.sphere.demo.entity.User ; import java.util.List ; @Mapper public interface UserMapper { List < User > listUsers ( @Param ( \"start\" ) int start , @Param ( \"limit\" ) int limit ); User getUserById ( @Param ( \"id\" ) long id ); int insertUser ( @Param ( \"user\" ) User user ); int deleteUser ( @Param ( \"user\" ) User user ); }","title":"3.3 \u6570\u636e\u6a21\u578b\u548cMyBatis\u914d\u7f6e"},{"location":"SpringBoot/app-shardingsphere-master-slave-mysql/#34","text":"\u793a\u4f8b\u4ee3\u7801\u4ec5\u5305\u542b\u6309ID\u83b7\u53d6User\u4fe1\u606f\u3001\u589e\u52a0User\u4e24\u4e2a\u529f\u80fd\uff1a package sharding.sphere.demo.service.impl ; import org.apache.shardingsphere.api.hint.HintManager ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import sharding.sphere.demo.entity.User ; import sharding.sphere.demo.mapper.UserMapper ; import sharding.sphere.demo.service.UserService ; @Service public class UserServiceImpl implements UserService { @Autowired private UserMapper userMapper ; @Override public User getUserById ( Long id ) { return userMapper . getUserById ( id ); } @Override public int insertUser ( User user ) { return userMapper . insertUser ( user ); } } \u7f16\u5199API\u63a5\u53e3\uff1a package sharding.sphere.demo.controller ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.* ; import sharding.sphere.demo.entity.User ; import sharding.sphere.demo.service.UserService ; @RestController public class UserController { @Autowired private UserService userService ; @GetMapping ( value = \"/user/{id}\" ) public User getUserById ( @PathVariable ( \"id\" ) Long id ) { return userService . getUserById ( id ); } @PostMapping ( value = \"/user\" , consumes = \"application/json\" , produces = \"application/json\" ) public Long insertUser ( @RequestBody User user ) { userService . insertUser ( user ); return user . getId (); } } \u5f15\u5bfc\u7c7b\uff1a package sharding.sphere.demo ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class ShardingSphereDemoApp { public static void main ( String [] args ) { SpringApplication . run ( ShardingSphereDemoApp . class , args ); } }","title":"3.4 \u7f16\u5199\u4e1a\u52a1\u4ee3\u7801"},{"location":"SpringBoot/app-shardingsphere-master-slave-mysql/#4","text":"\u76f4\u63a5\u8fd0\u884c\u5f15\u5bfc\u7c7b\uff0c\u542f\u52a8\u9879\u76ee\uff1a . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.2.RELEASE) 2020-09-09 22:06:42.925 INFO 7602 --- [ main] s.sphere.demo.ShardingSphereDemoApp : Starting ShardingSphereDemoApp on nanleis-MacBook-Pro.local with PID 7602 (/Users/nanlei/Dev/Codebase/deep-in-spring-boot/sharding-sphere-demo/target/classes started by nanlei in /Users/nanlei/Dev/Codebase/deep-in-spring-boot) 2020-09-09 22:06:42.927 INFO 7602 --- [ main] s.sphere.demo.ShardingSphereDemoApp : No active profile set, falling back to default profiles: default 2020-09-09 22:06:43.677 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.686 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere.sharding-org.apache.shardingsphere.shardingjdbc.spring.boot.sharding.SpringBootShardingRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.sharding.SpringBootShardingRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.694 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere.masterslave-org.apache.shardingsphere.shardingjdbc.spring.boot.masterslave.SpringBootMasterSlaveRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.masterslave.SpringBootMasterSlaveRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.696 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere.encrypt-org.apache.shardingsphere.shardingjdbc.spring.boot.encrypt.SpringBootEncryptRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.encrypt.SpringBootEncryptRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.700 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere.shadow-org.apache.shardingsphere.shardingjdbc.spring.boot.shadow.SpringBootShadowRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.shadow.SpringBootShadowRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.702 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.shardingsphere-org.apache.shardingsphere.shardingjdbc.spring.boot.common.SpringBootPropertiesConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.common.SpringBootPropertiesConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:43.918 INFO 7602 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'org.apache.shardingsphere.shardingjdbc.spring.boot.SpringBootConfiguration' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.SpringBootConfiguration$$EnhancerBySpringCGLIB$$e7dff249] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-09-09 22:06:44.242 INFO 7602 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2020-09-09 22:06:44.255 INFO 7602 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2020-09-09 22:06:44.255 INFO 7602 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.37] 2020-09-09 22:06:44.341 INFO 7602 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2020-09-09 22:06:44.341 INFO 7602 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1263 ms 2020-09-09 22:06:44.660 INFO 7602 --- [ main] com.alibaba.druid.pool.DruidDataSource : {dataSource-1} inited 2020-09-09 22:06:45.364 INFO 7602 --- [ main] com.alibaba.druid.pool.DruidDataSource : {dataSource-2} inited 2020-09-09 22:06:45.811 INFO 7602 --- [ main] com.alibaba.druid.pool.DruidDataSource : {dataSource-3} inited 2020-09-09 22:06:46.292 INFO 7602 --- [ main] o.a.s.core.log.ConfigurationLogger : MasterSlaveRuleConfiguration: loadBalanceAlgorithmType: round_robin masterDataSourceName: master name: ms slaveDataSourceNames: - slave1 - slave2 2020-09-09 22:06:46.293 INFO 7602 --- [ main] o.a.s.core.log.ConfigurationLogger : Properties: sql.show: 'true' 2020-09-09 22:06:46.429 INFO 7602 --- [ main] ShardingSphere-metadata : Loading 1 tables' meta data. 2020-09-09 22:06:46.583 INFO 7602 --- [ main] ShardingSphere-metadata : Meta data load finished, cost 290 milliseconds. 2020-09-09 22:06:46.935 INFO 7602 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2020-09-09 22:06:47.170 INFO 7602 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2020-09-09 22:06:47.186 INFO 7602 --- [ main] s.sphere.demo.ShardingSphereDemoApp : Started ShardingSphereDemoApp in 4.612 seconds (JVM running for 5.065) \u53ef\u4ee5\u770b\u5230 DruidDataSource \u521d\u59cb\u5316\u4e863\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u5e94 master \uff0c slave1 \u548c slave2 \u3002 \u9996\u5148\u5728\u6570\u636e\u5e93master\u4e2d\u6dfb\u52a0\u4e00\u4e2aUser: insert into USERS ( USER_NAME , CREATED_TIME ) values ( 'Lei Nan' , now ()); \u8bbf\u95ee\u63a5\u53e3 /user/{id} \uff1a \u65e5\u5fd7\u8f93\u51fa\u4e3a\uff1a 2020-09-09 22:06:52.656 INFO 7602 --- [nio-8080-exec-1] ShardingSphere-SQL : Logic SQL: SELECT * FROM USERS WHERE ID = ? 2020-09-09 22:06:52.657 INFO 7602 --- [nio-8080-exec-1] ShardingSphere-SQL : SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@3528a95f, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4b2481ee), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4b2481ee, projectionsContext=ProjectionsContext(startIndex=7, stopIndex=7, distinctRow=false, projections=[ShorthandProjection(owner=Optional.empty, actualColumns=[ColumnProjection(owner=null, name=id, alias=Optional.empty), ColumnProjection(owner=null, name=user_name, alias=Optional.empty), ColumnProjection(owner=null, name=created_time, alias=Optional.empty)])]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1a02bfb, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@4567ed4b, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@35f5c6e9, containsSubquery=false) 2020-09-09 22:06:52.657 INFO 7602 --- [nio-8080-exec-1] ShardingSphere-SQL : Actual SQL: slave1 ::: SELECT * FROM USERS WHERE ID = ? \u518d\u6b21\u6267\u884c\u65f6\uff1a 2020-09-09 22:09:30.725 INFO 7602 --- [nio-8080-exec-5] ShardingSphere-SQL : Actual SQL: slave2 ::: SELECT * FROM USERS WHERE ID = ? \u53ef\u4ee5\u770b\u5230 slave1 \u548c slave2 \u662f\u8f6e\u8be2\u67e5\u627e\u7684 \u901a\u8fc7API\u589e\u52a0User: \u65e5\u5fd7\u8f93\u51fa\u4e3a\uff1a 2020-09-09 23:26:35.559 INFO 8499 --- [nio-8080-exec-2] ShardingSphere-SQL : Logic SQL: INSERT INTO USERS(USER_NAME,CREATED_TIME) VALUES (?, now()) 2020-09-09 23:26:35.560 INFO 8499 --- [nio-8080-exec-2] ShardingSphere-SQL : SQLStatement: CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.InsertStatement@5534efa9, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6933988a) 2020-09-09 23:26:35.560 INFO 8499 --- [nio-8080-exec-2] ShardingSphere-SQL : Actual SQL: master ::: INSERT INTO USERS(USER_NAME,CREATED_TIME) VALUES (?, now()) \u65b0\u589e\u64cd\u4f5c\u81ea\u52a8\u4f7f\u7528 master \u4e3b\u5e93 \u5982\u679c\u67e5\u8be2\u64cd\u4f5c\u5f3a\u884c\u4f7f\u7528 master \u4e3b\u5e93\uff0c\u53ef\u4ee5\u5982\u4e0b\u8fdb\u884c\uff1a @Override public User getUserById ( Long id ) { if ( id == 2 ) { HintManager . getInstance (). setMasterRouteOnly (); } return userMapper . getUserById ( id ); } \u6267\u884c GET /user/2 \u65f6\uff0c\u65e5\u5fd7\u8f93\u51fa\u4e3a\uff1a 2020-09-09 23:31:53.901 INFO 8499 --- [nio-8080-exec-5] ShardingSphere-SQL : Actual SQL: master ::: SELECT * FROM USERS WHERE ID = ?","title":"4. \u8fd0\u884c\u793a\u4f8b"},{"location":"SpringFramework/spring-composed-annotation/","text":"Spring \u7ec4\u5408\u6ce8\u89e3(Composed Annotation) 1. \u7ec4\u5408\u6ce8\u89e3\u8bf4\u660e \u00b6 Spring Framework\u7684\u7ec4\u5408\u6ce8\u89e3\u5728\u5b98\u65b9Github\u7684Wiki\u4e2d\u6709\u8bf4\u660e\uff0c \u53ef\u4ee5\u53c2\u8003 \u3002 A composed annotation is an annotation that is meta-annotated with one or more annotations with the intent of combining the behavior associated with those meta-annotations into a single custom annotation. For example, an annotation named @TransactionalService that is meta-annotated with Spring's @Transactional and @Service annotations is a composed annotation that combines the semantics of @Transactional and @Service . @TransactionalService is technically also a custom stereotype annotation . Wiki\u8bf4\u660e\uff0c\u7ec4\u5408\u6ce8\u89e3(Composed annotation)\u662f\u6307\u67d0\u4e2a\u6ce8\u89e3\u5143\u6807\u6ce8\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a\u5176\u4ed6\u6ce8\u89e3\uff0c\u6765\u7ec4\u5408\u8fd9\u4e9b\u6ce8\u89e3\u7684\u884c\u4e3a\u53d8\u4e3a\u5355\u4e2a\u81ea\u5b9a\u4e49\u6ce8\u89e3\u3002 \u540c\u65f6\u4e3e\u4f8b\u8bf4\u660e\u4e86 @TransactionalService \u6ce8\u89e3\u6807\u6ce8\u4e86 @Transactional \u548c @Service \u6ce8\u89e3\uff0c\u56e0\u6b64 @TransactionalService \u7ec4\u5408\u4e86\u8fd9\u4e24\u4e2a\u6ce8\u89e3\u7684\u8bed\u4e49\uff0c\u5e76\u4e14 @TransactionalService \u4e5f\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u6a21\u5f0f\u6ce8\u89e3\u3002 Spring\u4e2d\u5e76\u6ca1\u6709 @TransactionalService \u6ce8\u89e3\uff0c\u4f46\u6839\u636eWiki\u53ef\u4ee5\u5c06\u5176\u63cf\u8ff0\u4e3a\uff1a package deep.in.springframework.annotation ; import org.springframework.stereotype.Service ; import org.springframework.transaction.annotation.Transactional ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @Transactional @Service public @interface TransactionalService { } \u8981\u6ce8\u610f\u7684\u662f @Service \u662fSpring\u6a21\u5f0f\u6ce8\u89e3(Stereotype annotation)\uff0c\u800c @Transactional \u662fSpring\u4e8b\u52a1\u6ce8\u89e3\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cSpring\u7ec4\u5408\u6ce8\u89e3(Composed annotation)\u4e2d\u7684\u5143\u6ce8\u89e3\u5141\u8bb8\u662fSpring\u6a21\u5f0f\u6ce8\u89e3\u548c\u5176\u4ed6\u529f\u80fd\u6027\u6ce8\u89e3\u7684\u7ec4\u5408\u3002 \u5728Spring Boot\u4e2d\uff0c @SpringBootApplication \u6ce8\u89e3\u57281.2.0\u65f6\u5f15\u5165\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u901a\u5e38\u5728\u5f15\u5bfc\u7c7b\u4e0a\u6807\u6ce8 @Configuration \uff0c\u4ee5\u8868\u660e\u5b83\u662fSpring\u6a21\u5f0f\u6ce8\u89e3\uff0c\u518d\u6807\u6ce8 @EnableAutoConfiguration \u6765\u5f00\u542f\u81ea\u52a8\u88c5\u914d\uff0c\u8fd8\u53ef\u4ee5\u6807\u6ce8 @ComponentScan \u6307\u5b9a\u626b\u63cf @Component \u7684\u8303\u56f4\u3002\u518d\u5f15\u5165 @SpringBootApplication \u4e4b\u540e\uff0c\u5f15\u5bfc\u7c7b\u4e0a\u53ef\u4ee5\u76f4\u63a5\u6807\u6ce8\uff0c\u7efc\u5408\u4ee5\u4e0a3\u4e2d\u7279\u6027\uff0c\u662f\u7ec4\u5408\u6ce8\u89e3\u7684\u4f53\u73b0\u3002 package org.springframework.boot.autoconfigure ; ... @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan ( excludeFilters = { @Filter ( type = FilterType . CUSTOM , classes = TypeExcludeFilter . class ), @Filter ( type = FilterType . CUSTOM , classes = AutoConfigurationExcludeFilter . class ) }) public @interface SpringBootApplication { ... } 2. \u7406\u89e3\u7ec4\u5408\u6ce8\u89e3 \u00b6 \u4ee5\u4e0a\u9762\u7684 @TransactionalService \u4e3a\u4f8b\uff0c\u5176\u5143\u6ce8\u89e3\u5c42\u6b21\u5173\u7cfb\u4e3a\uff1a @TransactionalService |- @Transactional |- @Service |- @Component \u6309\u7167 @Component \u6d3e\u751f\u6027\u7684\u7279\u70b9\uff0c @TransactionalService \u4e5f\u662fSpring\u6a21\u5f0f\u6ce8\u89e3( @Component \u6d3e\u751f\u6ce8\u89e3)\uff0c\u53ef\u4ee5\u88ab ClassPathScanningCandidateComponentProvider \u8bc6\u522b\uff0c\u88ab\u5176\u5b50\u7c7b ClassPathBeanDefinitionScanner \u6ce8\u518c\u4e3aSpring Bean\u3002\u800c @Transactional \u4f5c\u4e3a\u4e8b\u52a1\u6ce8\u89e3\uff0c\u662f\u539f\u5b50\u6ce8\u89e3\uff0c\u4e0d\u80fd\u7ee7\u7eed\u62c6\u5206\u3002 @Transactional \u6ce8\u89e3\u5b9a\u4e49\u4e3a\uff1a package org.springframework.transaction.annotation ; ... @Target ({ ElementType . TYPE , ElementType . METHOD }) @Retention ( RetentionPolicy . RUNTIME ) @Inherited @Documented public @interface Transactional { ... } \u5728\u8ba8\u8bba Spring\u6a21\u5f0f\u6ce8\u89e3 \u65f6\uff0c @Component \u6d3e\u751f\u539f\u7406\u7684\u6e90\u7801\u89e3\u6790\u4e2d\uff0cSpring Framework\u62bd\u8c61\u51fa\u4e86 AnnotationMetadata \u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b AnnotationMetadataReadingVisitor \uff0c\u5e76\u4e14\u4eceSpring Framework 4.0\u5f00\u59cb\uff0c\u5176\u5173\u8054\u7684 AnnotationAttributesReadingVisitor \u91c7\u7528\u9012\u5f52\u65b9\u5f0f\u67e5\u627e\u5143\u6ce8\u89e3\uff0c\u652f\u6301\u4e86\u591a\u5c42\u6b21\u5143\u6ce8\u89e3\u4fe1\u606f\u67e5\u627e\u3002 Spring\u901a\u8fc7ASM\u8bfb\u53d6\u7c7b\u8d44\u6e90\uff0c\u76f4\u63a5\u64cd\u4f5c\u5176\u4e2d\u7684\u5b57\u8282\u7801\uff0c\u83b7\u53d6\u76f8\u5173\u5143\u4fe1\u606f\uff0c\u76f8\u5173\u63a5\u53e3\u4e3a MetadataReader \uff1a package org.springframework.core.type.classreading ; import org.springframework.core.io.Resource ; import org.springframework.core.type.AnnotationMetadata ; import org.springframework.core.type.ClassMetadata ; /** * Simple facade for accessing class metadata, * as read by an ASM {@link org.springframework.asm.ClassReader}. * * @author Juergen Hoeller * @since 2.5 */ public interface MetadataReader { /** * Return the resource reference for the class file. */ Resource getResource (); /** * Read basic class metadata for the underlying class. */ ClassMetadata getClassMetadata (); /** * Read full annotation metadata for the underlying class, * including metadata for annotated methods. */ AnnotationMetadata getAnnotationMetadata (); } getClassMetadata() \u65b9\u6cd5\u7528\u6765\u83b7\u53d6\u7c7b\u7684\u5143\u4fe1\u606f\uff0c getAnnotationMetadata() \u65b9\u6cd5\u83b7\u53d6\u6ce8\u89e3\u5143\u4fe1\u606f\uff0c getResource() \u65b9\u6cd5\u8fd4\u56de\u7c7b\u8d44\u6e90\u7684Resource\u4fe1\u606f\u3002 \u5176\u5b9e\u73b0\u7c7b\u662f SimpleMetadataReader \uff0c\u5f53\u524d\u7248\u672c\u7684Spring Framework(5.2.8.RELEASE)\u4ec5\u6709\u6b64\u4e00\u4e2a\u5b9e\u73b0\uff1a package org.springframework.core.type.classreading ; ... final class SimpleMetadataReader implements MetadataReader { ... SimpleMetadataReader ( Resource resource , @Nullable ClassLoader classLoader ) throws IOException { SimpleAnnotationMetadataReadingVisitor visitor = new SimpleAnnotationMetadataReadingVisitor ( classLoader ); getClassReader ( resource ). accept ( visitor , PARSING_OPTIONS ); this . resource = resource ; this . annotationMetadata = visitor . getMetadata (); } private static ClassReader getClassReader ( Resource resource ) throws IOException { try ( InputStream is = resource . getInputStream ()) { try { return new ClassReader ( is ); } catch ( IllegalArgumentException ex ) { throw new NestedIOException ( \"ASM ClassReader failed to parse class file - \" + \"probably due to a new Java class file version that isn't supported yet: \" + resource , ex ); } } } ... } \u5176\u5173\u8054\u7684 ClassMetadata \u4fe1\u606f\u548c AnnotationMetadata \u4fe1\u606f\u5728\u6784\u9020\u9636\u6bb5\u5b8c\u6210\u521d\u59cb\u5316\u3002 SimpleAnnotationMetadataReadingVisitor \u66ff\u4ee3\u4e86\u539f\u6709\u7684 AnnotationMetadataReadingVisitor \u548c AnnotationAttributesReadingVisitor \u3002 \u5728\u89e3\u6790 Spring\u6a21\u5f0f\u6ce8\u89e3 \u65f6\uff0c\u5206\u6790\u5230 ClassPathScanningCandidateComponentProvider \u7684 findCandidateComponents() \u65b9\u6cd5\u6709\u8bfb\u53d6 MetadataReader \u7684\u65b9\u5f0f( 5.2.8.RELEASE )\uff1a MetadataReader metadataReader = getMetadataReaderFactory (). getMetadataReader ( type ); \u6216 MetadataReader metadataReader = getMetadataReaderFactory (). getMetadataReader ( resource ); getMetadataReaderFactory() \u65b9\u6cd5\u4e3a\uff1a public final MetadataReaderFactory getMetadataReaderFactory () { if ( this . metadataReaderFactory == null ) { this . metadataReaderFactory = new CachingMetadataReaderFactory (); } return this . metadataReaderFactory ; } \u8fd9\u91cc\u9ed8\u8ba4\u4f7f\u7528\u7684\u662f CachingMetadataReaderFactory \u5b9e\u4f8b\uff0c\u800c getMetadataReader \u65b9\u6cd5\u5219\u662f\u5b9a\u4e49\u5728 MetadataReaderFactory \u63a5\u53e3\u4e2d\uff1a package org.springframework.core.type.classreading ; import java.io.IOException ; import org.springframework.core.io.Resource ; /** * Factory interface for {@link MetadataReader} instances. * Allows for caching a MetadataReader per original resource. * * @author Juergen Hoeller * @since 2.5 * @see SimpleMetadataReaderFactory * @see CachingMetadataReaderFactory */ public interface MetadataReaderFactory { /** * Obtain a MetadataReader for the given class name. * @param className the class name (to be resolved to a \".class\" file) * @return a holder for the ClassReader instance (never {@code null}) * @throws IOException in case of I/O failure */ MetadataReader getMetadataReader ( String className ) throws IOException ; /** * Obtain a MetadataReader for the given resource. * @param resource the resource (pointing to a \".class\" file) * @return a holder for the ClassReader instance (never {@code null}) * @throws IOException in case of I/O failure */ MetadataReader getMetadataReader ( Resource resource ) throws IOException ; } \u4e3a\u4e86\u6f14\u793a\uff0c\u793a\u4f8b\u4ee3\u7801\u4e2d\u53ef\u4ee5\u5229\u7528\u8be5\u65b9\u6cd5\u8bfb\u53d6 @TransactionalService \u6ce8\u89e3\u5143\u4fe1\u606f\uff1a package deep.in.springframework ; import deep.in.springframework.annotation.TransactionalService ; import org.springframework.core.type.AnnotationMetadata ; import org.springframework.core.type.classreading.CachingMetadataReaderFactory ; import org.springframework.core.type.classreading.MetadataReader ; import org.springframework.core.type.classreading.MetadataReaderFactory ; import java.io.IOException ; import java.util.Set ; @TransactionalService public class ApplicationBootstrap { public static void main ( String [] args ) throws IOException { //@TransactionalService\u6807\u6ce8\u5728\u5f53\u524d\u7c7b\u4e0a String className = ApplicationBootstrap . class . getName (); //\u6784\u5efaMetadataReaderFactory MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory (); //\u8bfb\u53d6@TransactionalService MetadataReader\u4fe1\u606f MetadataReader metadataReader = metadataReaderFactory . getMetadataReader ( className ); //\u8bfb\u53d6@TransactionalService AnnotationMetadata\u4fe1\u606f AnnotationMetadata annotationMetadata = metadataReader . getAnnotationMetadata (); annotationMetadata . getAnnotationTypes (). stream (). forEach ( annotationType -> { Set < String > metaAnnotationTypes = annotationMetadata . getMetaAnnotationTypes ( annotationType ); metaAnnotationTypes . stream (). forEach ( metaAnnotationType -> { System . out . printf ( \"@%s meta annotated with @%s\\n\" , annotationType , metaAnnotationType ); }); }); } } \u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u5230\u8fd0\u884c\u4fe1\u606f\uff1a \u5f53\u524d\u7c7b\u4ec5\u6709\u4e00\u4e2a Annotation \uff0c\u662f deep.in.springframework.annotation.TransactionalService \u3002\u7ee7\u7eed\u83b7\u53d6\u5f53\u524d\u6ce8\u89e3\u7684\u5143\u6ce8\u89e3\uff0c\u5206\u522b\u662f\uff1a 0 = \"org.springframework.transaction.annotation.Transactional\" 1 = \"org.springframework.stereotype.Service\" 2 = \"org.springframework.stereotype.Component\" 3 = \"org.springframework.stereotype.Indexed\" \u548c\u524d\u9762\u603b\u7ed3\u7684 @TransactionalService \u5c42\u6b21\u5173\u7cfb\u8fdb\u884c\u5bf9\u6bd4\uff1a @TransactionalService |- @Transactional |- @Service |- @Component \u8fd9\u91cc\u7684 @Indexed \u6ce8\u89e3\u662f\u6807\u6ce8\u5728 @Component \u4e4b\u4e0a\u7684\uff1a package org.springframework.stereotype ; ... @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Indexed public @interface Component { String value () default \"\" ; } \u56e0\u4e3a @TransactionalService \u6807\u6ce8\u5728 ApplicationBootstrap \u7c7b\u4e0a\uff0c annotationMetadata.getAnnotationTypes() \u65b9\u6cd5\u8fd4\u56de\u7684\u96c6\u5408\u4ec5\u5305\u542b @TransactionalService \uff0c\u800c @TransactionalService \u6240\u5173\u8054\u7684\u5143\u6ce8\u89e3\u5219\u662f4\u4e2a\uff0c\u5373\u901a\u8fc7 annotationMetadata.getMetaAnnotationTypes(annotationType) \u8fd4\u56de\u7684\u503c\u3002","title":"Composed Annotation"},{"location":"SpringFramework/spring-composed-annotation/#1","text":"Spring Framework\u7684\u7ec4\u5408\u6ce8\u89e3\u5728\u5b98\u65b9Github\u7684Wiki\u4e2d\u6709\u8bf4\u660e\uff0c \u53ef\u4ee5\u53c2\u8003 \u3002 A composed annotation is an annotation that is meta-annotated with one or more annotations with the intent of combining the behavior associated with those meta-annotations into a single custom annotation. For example, an annotation named @TransactionalService that is meta-annotated with Spring's @Transactional and @Service annotations is a composed annotation that combines the semantics of @Transactional and @Service . @TransactionalService is technically also a custom stereotype annotation . Wiki\u8bf4\u660e\uff0c\u7ec4\u5408\u6ce8\u89e3(Composed annotation)\u662f\u6307\u67d0\u4e2a\u6ce8\u89e3\u5143\u6807\u6ce8\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a\u5176\u4ed6\u6ce8\u89e3\uff0c\u6765\u7ec4\u5408\u8fd9\u4e9b\u6ce8\u89e3\u7684\u884c\u4e3a\u53d8\u4e3a\u5355\u4e2a\u81ea\u5b9a\u4e49\u6ce8\u89e3\u3002 \u540c\u65f6\u4e3e\u4f8b\u8bf4\u660e\u4e86 @TransactionalService \u6ce8\u89e3\u6807\u6ce8\u4e86 @Transactional \u548c @Service \u6ce8\u89e3\uff0c\u56e0\u6b64 @TransactionalService \u7ec4\u5408\u4e86\u8fd9\u4e24\u4e2a\u6ce8\u89e3\u7684\u8bed\u4e49\uff0c\u5e76\u4e14 @TransactionalService \u4e5f\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u6a21\u5f0f\u6ce8\u89e3\u3002 Spring\u4e2d\u5e76\u6ca1\u6709 @TransactionalService \u6ce8\u89e3\uff0c\u4f46\u6839\u636eWiki\u53ef\u4ee5\u5c06\u5176\u63cf\u8ff0\u4e3a\uff1a package deep.in.springframework.annotation ; import org.springframework.stereotype.Service ; import org.springframework.transaction.annotation.Transactional ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @Transactional @Service public @interface TransactionalService { } \u8981\u6ce8\u610f\u7684\u662f @Service \u662fSpring\u6a21\u5f0f\u6ce8\u89e3(Stereotype annotation)\uff0c\u800c @Transactional \u662fSpring\u4e8b\u52a1\u6ce8\u89e3\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cSpring\u7ec4\u5408\u6ce8\u89e3(Composed annotation)\u4e2d\u7684\u5143\u6ce8\u89e3\u5141\u8bb8\u662fSpring\u6a21\u5f0f\u6ce8\u89e3\u548c\u5176\u4ed6\u529f\u80fd\u6027\u6ce8\u89e3\u7684\u7ec4\u5408\u3002 \u5728Spring Boot\u4e2d\uff0c @SpringBootApplication \u6ce8\u89e3\u57281.2.0\u65f6\u5f15\u5165\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u901a\u5e38\u5728\u5f15\u5bfc\u7c7b\u4e0a\u6807\u6ce8 @Configuration \uff0c\u4ee5\u8868\u660e\u5b83\u662fSpring\u6a21\u5f0f\u6ce8\u89e3\uff0c\u518d\u6807\u6ce8 @EnableAutoConfiguration \u6765\u5f00\u542f\u81ea\u52a8\u88c5\u914d\uff0c\u8fd8\u53ef\u4ee5\u6807\u6ce8 @ComponentScan \u6307\u5b9a\u626b\u63cf @Component \u7684\u8303\u56f4\u3002\u518d\u5f15\u5165 @SpringBootApplication \u4e4b\u540e\uff0c\u5f15\u5bfc\u7c7b\u4e0a\u53ef\u4ee5\u76f4\u63a5\u6807\u6ce8\uff0c\u7efc\u5408\u4ee5\u4e0a3\u4e2d\u7279\u6027\uff0c\u662f\u7ec4\u5408\u6ce8\u89e3\u7684\u4f53\u73b0\u3002 package org.springframework.boot.autoconfigure ; ... @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan ( excludeFilters = { @Filter ( type = FilterType . CUSTOM , classes = TypeExcludeFilter . class ), @Filter ( type = FilterType . CUSTOM , classes = AutoConfigurationExcludeFilter . class ) }) public @interface SpringBootApplication { ... }","title":"1. \u7ec4\u5408\u6ce8\u89e3\u8bf4\u660e"},{"location":"SpringFramework/spring-composed-annotation/#2","text":"\u4ee5\u4e0a\u9762\u7684 @TransactionalService \u4e3a\u4f8b\uff0c\u5176\u5143\u6ce8\u89e3\u5c42\u6b21\u5173\u7cfb\u4e3a\uff1a @TransactionalService |- @Transactional |- @Service |- @Component \u6309\u7167 @Component \u6d3e\u751f\u6027\u7684\u7279\u70b9\uff0c @TransactionalService \u4e5f\u662fSpring\u6a21\u5f0f\u6ce8\u89e3( @Component \u6d3e\u751f\u6ce8\u89e3)\uff0c\u53ef\u4ee5\u88ab ClassPathScanningCandidateComponentProvider \u8bc6\u522b\uff0c\u88ab\u5176\u5b50\u7c7b ClassPathBeanDefinitionScanner \u6ce8\u518c\u4e3aSpring Bean\u3002\u800c @Transactional \u4f5c\u4e3a\u4e8b\u52a1\u6ce8\u89e3\uff0c\u662f\u539f\u5b50\u6ce8\u89e3\uff0c\u4e0d\u80fd\u7ee7\u7eed\u62c6\u5206\u3002 @Transactional \u6ce8\u89e3\u5b9a\u4e49\u4e3a\uff1a package org.springframework.transaction.annotation ; ... @Target ({ ElementType . TYPE , ElementType . METHOD }) @Retention ( RetentionPolicy . RUNTIME ) @Inherited @Documented public @interface Transactional { ... } \u5728\u8ba8\u8bba Spring\u6a21\u5f0f\u6ce8\u89e3 \u65f6\uff0c @Component \u6d3e\u751f\u539f\u7406\u7684\u6e90\u7801\u89e3\u6790\u4e2d\uff0cSpring Framework\u62bd\u8c61\u51fa\u4e86 AnnotationMetadata \u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b AnnotationMetadataReadingVisitor \uff0c\u5e76\u4e14\u4eceSpring Framework 4.0\u5f00\u59cb\uff0c\u5176\u5173\u8054\u7684 AnnotationAttributesReadingVisitor \u91c7\u7528\u9012\u5f52\u65b9\u5f0f\u67e5\u627e\u5143\u6ce8\u89e3\uff0c\u652f\u6301\u4e86\u591a\u5c42\u6b21\u5143\u6ce8\u89e3\u4fe1\u606f\u67e5\u627e\u3002 Spring\u901a\u8fc7ASM\u8bfb\u53d6\u7c7b\u8d44\u6e90\uff0c\u76f4\u63a5\u64cd\u4f5c\u5176\u4e2d\u7684\u5b57\u8282\u7801\uff0c\u83b7\u53d6\u76f8\u5173\u5143\u4fe1\u606f\uff0c\u76f8\u5173\u63a5\u53e3\u4e3a MetadataReader \uff1a package org.springframework.core.type.classreading ; import org.springframework.core.io.Resource ; import org.springframework.core.type.AnnotationMetadata ; import org.springframework.core.type.ClassMetadata ; /** * Simple facade for accessing class metadata, * as read by an ASM {@link org.springframework.asm.ClassReader}. * * @author Juergen Hoeller * @since 2.5 */ public interface MetadataReader { /** * Return the resource reference for the class file. */ Resource getResource (); /** * Read basic class metadata for the underlying class. */ ClassMetadata getClassMetadata (); /** * Read full annotation metadata for the underlying class, * including metadata for annotated methods. */ AnnotationMetadata getAnnotationMetadata (); } getClassMetadata() \u65b9\u6cd5\u7528\u6765\u83b7\u53d6\u7c7b\u7684\u5143\u4fe1\u606f\uff0c getAnnotationMetadata() \u65b9\u6cd5\u83b7\u53d6\u6ce8\u89e3\u5143\u4fe1\u606f\uff0c getResource() \u65b9\u6cd5\u8fd4\u56de\u7c7b\u8d44\u6e90\u7684Resource\u4fe1\u606f\u3002 \u5176\u5b9e\u73b0\u7c7b\u662f SimpleMetadataReader \uff0c\u5f53\u524d\u7248\u672c\u7684Spring Framework(5.2.8.RELEASE)\u4ec5\u6709\u6b64\u4e00\u4e2a\u5b9e\u73b0\uff1a package org.springframework.core.type.classreading ; ... final class SimpleMetadataReader implements MetadataReader { ... SimpleMetadataReader ( Resource resource , @Nullable ClassLoader classLoader ) throws IOException { SimpleAnnotationMetadataReadingVisitor visitor = new SimpleAnnotationMetadataReadingVisitor ( classLoader ); getClassReader ( resource ). accept ( visitor , PARSING_OPTIONS ); this . resource = resource ; this . annotationMetadata = visitor . getMetadata (); } private static ClassReader getClassReader ( Resource resource ) throws IOException { try ( InputStream is = resource . getInputStream ()) { try { return new ClassReader ( is ); } catch ( IllegalArgumentException ex ) { throw new NestedIOException ( \"ASM ClassReader failed to parse class file - \" + \"probably due to a new Java class file version that isn't supported yet: \" + resource , ex ); } } } ... } \u5176\u5173\u8054\u7684 ClassMetadata \u4fe1\u606f\u548c AnnotationMetadata \u4fe1\u606f\u5728\u6784\u9020\u9636\u6bb5\u5b8c\u6210\u521d\u59cb\u5316\u3002 SimpleAnnotationMetadataReadingVisitor \u66ff\u4ee3\u4e86\u539f\u6709\u7684 AnnotationMetadataReadingVisitor \u548c AnnotationAttributesReadingVisitor \u3002 \u5728\u89e3\u6790 Spring\u6a21\u5f0f\u6ce8\u89e3 \u65f6\uff0c\u5206\u6790\u5230 ClassPathScanningCandidateComponentProvider \u7684 findCandidateComponents() \u65b9\u6cd5\u6709\u8bfb\u53d6 MetadataReader \u7684\u65b9\u5f0f( 5.2.8.RELEASE )\uff1a MetadataReader metadataReader = getMetadataReaderFactory (). getMetadataReader ( type ); \u6216 MetadataReader metadataReader = getMetadataReaderFactory (). getMetadataReader ( resource ); getMetadataReaderFactory() \u65b9\u6cd5\u4e3a\uff1a public final MetadataReaderFactory getMetadataReaderFactory () { if ( this . metadataReaderFactory == null ) { this . metadataReaderFactory = new CachingMetadataReaderFactory (); } return this . metadataReaderFactory ; } \u8fd9\u91cc\u9ed8\u8ba4\u4f7f\u7528\u7684\u662f CachingMetadataReaderFactory \u5b9e\u4f8b\uff0c\u800c getMetadataReader \u65b9\u6cd5\u5219\u662f\u5b9a\u4e49\u5728 MetadataReaderFactory \u63a5\u53e3\u4e2d\uff1a package org.springframework.core.type.classreading ; import java.io.IOException ; import org.springframework.core.io.Resource ; /** * Factory interface for {@link MetadataReader} instances. * Allows for caching a MetadataReader per original resource. * * @author Juergen Hoeller * @since 2.5 * @see SimpleMetadataReaderFactory * @see CachingMetadataReaderFactory */ public interface MetadataReaderFactory { /** * Obtain a MetadataReader for the given class name. * @param className the class name (to be resolved to a \".class\" file) * @return a holder for the ClassReader instance (never {@code null}) * @throws IOException in case of I/O failure */ MetadataReader getMetadataReader ( String className ) throws IOException ; /** * Obtain a MetadataReader for the given resource. * @param resource the resource (pointing to a \".class\" file) * @return a holder for the ClassReader instance (never {@code null}) * @throws IOException in case of I/O failure */ MetadataReader getMetadataReader ( Resource resource ) throws IOException ; } \u4e3a\u4e86\u6f14\u793a\uff0c\u793a\u4f8b\u4ee3\u7801\u4e2d\u53ef\u4ee5\u5229\u7528\u8be5\u65b9\u6cd5\u8bfb\u53d6 @TransactionalService \u6ce8\u89e3\u5143\u4fe1\u606f\uff1a package deep.in.springframework ; import deep.in.springframework.annotation.TransactionalService ; import org.springframework.core.type.AnnotationMetadata ; import org.springframework.core.type.classreading.CachingMetadataReaderFactory ; import org.springframework.core.type.classreading.MetadataReader ; import org.springframework.core.type.classreading.MetadataReaderFactory ; import java.io.IOException ; import java.util.Set ; @TransactionalService public class ApplicationBootstrap { public static void main ( String [] args ) throws IOException { //@TransactionalService\u6807\u6ce8\u5728\u5f53\u524d\u7c7b\u4e0a String className = ApplicationBootstrap . class . getName (); //\u6784\u5efaMetadataReaderFactory MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory (); //\u8bfb\u53d6@TransactionalService MetadataReader\u4fe1\u606f MetadataReader metadataReader = metadataReaderFactory . getMetadataReader ( className ); //\u8bfb\u53d6@TransactionalService AnnotationMetadata\u4fe1\u606f AnnotationMetadata annotationMetadata = metadataReader . getAnnotationMetadata (); annotationMetadata . getAnnotationTypes (). stream (). forEach ( annotationType -> { Set < String > metaAnnotationTypes = annotationMetadata . getMetaAnnotationTypes ( annotationType ); metaAnnotationTypes . stream (). forEach ( metaAnnotationType -> { System . out . printf ( \"@%s meta annotated with @%s\\n\" , annotationType , metaAnnotationType ); }); }); } } \u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u5230\u8fd0\u884c\u4fe1\u606f\uff1a \u5f53\u524d\u7c7b\u4ec5\u6709\u4e00\u4e2a Annotation \uff0c\u662f deep.in.springframework.annotation.TransactionalService \u3002\u7ee7\u7eed\u83b7\u53d6\u5f53\u524d\u6ce8\u89e3\u7684\u5143\u6ce8\u89e3\uff0c\u5206\u522b\u662f\uff1a 0 = \"org.springframework.transaction.annotation.Transactional\" 1 = \"org.springframework.stereotype.Service\" 2 = \"org.springframework.stereotype.Component\" 3 = \"org.springframework.stereotype.Indexed\" \u548c\u524d\u9762\u603b\u7ed3\u7684 @TransactionalService \u5c42\u6b21\u5173\u7cfb\u8fdb\u884c\u5bf9\u6bd4\uff1a @TransactionalService |- @Transactional |- @Service |- @Component \u8fd9\u91cc\u7684 @Indexed \u6ce8\u89e3\u662f\u6807\u6ce8\u5728 @Component \u4e4b\u4e0a\u7684\uff1a package org.springframework.stereotype ; ... @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Indexed public @interface Component { String value () default \"\" ; } \u56e0\u4e3a @TransactionalService \u6807\u6ce8\u5728 ApplicationBootstrap \u7c7b\u4e0a\uff0c annotationMetadata.getAnnotationTypes() \u65b9\u6cd5\u8fd4\u56de\u7684\u96c6\u5408\u4ec5\u5305\u542b @TransactionalService \uff0c\u800c @TransactionalService \u6240\u5173\u8054\u7684\u5143\u6ce8\u89e3\u5219\u662f4\u4e2a\uff0c\u5373\u901a\u8fc7 annotationMetadata.getMetaAnnotationTypes(annotationType) \u8fd4\u56de\u7684\u503c\u3002","title":"2. \u7406\u89e3\u7ec4\u5408\u6ce8\u89e3"},{"location":"SpringFramework/spring-stereotype-annotation/","text":"Spring \u6a21\u5f0f\u6ce8\u89e3(Stereotype Annotation) 1. \u6a21\u5f0f\u6ce8\u89e3\u8bf4\u660e \u00b6 Spring Framework\u7684\u6a21\u5f0f\u6ce8\u89e3\u5728\u5b98\u65b9Github\u7684Wiki\u4e2d\u6709\u8bf4\u660e\uff0c \u53ef\u4ee5\u53c2\u8003 \u3002 A stereotype annotation is an annotation that is used to declare the role that a component plays within the application. For example, the @Repository annotation in the Spring Framework is a marker for any class that fulfills the role or stereotype of a repository (also known as Data Access Object or DAO). Wiki\u8bf4\u660e\uff0c\u6a21\u5f0f\u6ce8\u89e3(stereotype annotation)\u662f\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7528\u6765\u58f0\u660e\u7ec4\u4ef6\u89d2\u8272\u7684\u6ce8\u89e3\u3002\u5e76\u4e3e\u4f8b\uff0c @Repository \u6ce8\u89e3\u5c31\u662f\u5b9e\u73b0\u4ed3\u50a8\u6a21\u5f0f(\u6216\u8005\u8bf4\u662fDAO\uff1a\u6570\u636e\u8bbf\u95ee\u5bf9\u8c61)\u7c7b\u7684\u6807\u8bb0\u3002 @Component is a generic stereotype for any Spring-managed component. Any component annotated with @Component is a candidate for component scanning. Similarly, any component annotated with an annotation that is itself meta-annotated with @Component is also a candidate for component scanning. For example, @Service is meta-annotated with @Component . \u7d27\u63a5\u7740\uff0c\u7ee7\u7eed\u8bf4\u660e\uff0c @Component \u662fSpring\u7ba1\u7406\u7ec4\u4ef6\u7684\u901a\u7528\u6a21\u5f0f\u6ce8\u89e3\uff0c\u4efb\u4f55\u88ab @Component \u6ce8\u89e3\u7684\u7ec4\u4ef6\u90fd\u662f\u5019\u9009\u7684\u7ec4\u4ef6\u626b\u63cf\u5bf9\u8c61\u3002\u4efb\u4f55\u88ab @Component \u5143\u6807\u6ce8\u7684\u6ce8\u89e3\uff0c\u4f8b\u5982 @Service \uff0c\u4efb\u4f55\u7ec4\u4ef6\u88ab\u5b83\u4eec\u6807\u6ce8\u65f6\uff0c\u4e5f\u88ab\u89c6\u4f5c\u5019\u9009\u7684\u7ec4\u4ef6\u626b\u63cf\u5bf9\u8c61\u3002 Core Spring provides several stereotype annotations out of the box, including but not limited to: @Component , @Service , @Repository , @Controller , @RestController , and @Configuration . @Repository , @Service , etc. are specializations of @Component . Spring Framework\u6838\u5fc3\u90e8\u5206\u63d0\u4f9b\u4e86\u51e0\u79cd\u6a21\u5f0f\u6ce8\u89e3\uff0c\u5305\u62ec\u5e76\u4e0d\u9650\u4e8e\u4e0b\u5217\u8fd9\u4e9b\uff1a @Component , @Service , @Repository , @Controller , @RestController \u548c @Configuration \uff0c\u5b83\u4eec\u90fd\u662f @Component \u7684\u89c4\u8303\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6a21\u5f0f\u6ce8\u89e3\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6a21\u5f0f\u6ce8\u89e3\u5c31\u662f @Component \u7684\u6d3e\u751f\u6ce8\u89e3\u3002\u4f46Java\u4e2d\u7684\u6ce8\u89e3\u4e0d\u5141\u8bb8\u7ee7\u627f\uff0c \u53ef\u4ee5\u53c2\u8003 \uff0cSpring Framework\u91c7\u7528\u5143\u6807\u6ce8\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u6d3e\u751f\u3002 2. \u5143\u6ce8\u89e3 \u00b6 \u4e0a\u8ff0 Wiki \u5728\u5f00\u5934\u76f4\u63a5\u4ecb\u7ecd\u4e86\u5143\u6ce8\u89e3\uff1a A meta-annotation is an annotation that is declared on another annotation. An annotation is therefore meta-annotated if it is annotated with another annotation. For example, any annotation that is declared to be documented is meta-annotated with @Documented from the java.lang.annotation package. \u5143\u6ce8\u89e3\u6307\u7684\u662f\u4e00\u4e2a\u80fd\u58f0\u660e\u5728\u5176\u4ed6\u6ce8\u89e3\u4e0a\u7684\u6ce8\u89e3\uff0c\u540c\u65f6\u4e3e\u4f8b @Documented \u80fd\u591f\u4f5c\u4e3a\u4efb\u4f55\u6ce8\u89e3\u7684\u5143\u6ce8\u89e3\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c\u5143\u6ce8\u89e3\u662fJava\u4e2d\u7684\u6982\u5ff5\uff0c\u800c\u975eSpring\u4e13\u6709\u3002\u800c\u5728Spring\u4e2d\uff0c @Component \u53ef\u4ee5\u89c6\u4f5c\u4e3a\u5143\u6ce8\u89e3\uff0c\u7531\u4e0a\u9762\u7684\u6a21\u5f0f\u6ce8\u89e3\u8bf4\u660e\u5373\u53ef\u770b\u51fa\u3002 3. @Component \u7684\u6d3e\u751f\u6027 \u00b6 @Repository \u6ce8\u89e3\u5728Spring Framework 2.0\u88ab\u5f15\u5165\uff0c\u53ef\u4ee5\u53c2\u8003 JavaDoc\u6587\u6863 \uff0c\u8be5\u6ce8\u89e3\u4ec5\u4ec5\u4f5c\u4e3a\u4ed3\u50a8(DAO)\u7684\u6807\u8bb0\u4f7f\u7528\u3002 package org.springframework.stereotype ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Inherited @Documented public @interface Repository { } \u800c\u5230\u4e86Spring Framework 2.5\uff0c\u5176\u5b9a\u4e49\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u53ef\u4ee5\u53c2\u8003 JavaDoc\u6587\u6863 \uff0c\u5176\u4e0d\u4f46\u662f\u6807\u8bb0\u6ce8\u89e3\uff0c\u800c\u4e14\u4f5c\u4e3aSpring Framework\u7684\u7ec4\u4ef6(Component)\u4e86\u3002\u5728\u5176\u5b9a\u4e49\u4e0a\u4e5f\u88ab @Component \u6ce8\u89e3\u6807\u6ce8\u3002 package org.springframework.stereotype ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Component public @interface Repository { /** * The value may indicate a suggestion for a logical component name, * to be turned into a Spring bean in case of an autodetected component. * @return the suggested component name, if any */ String value () default \"\" ; } \u56e0\u4e3aSpring Framework 2.5\u540c\u65f6\u5f15\u5165\u4e86 @Component \u6ce8\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003 JavaDoc\u6587\u6863 \uff0c\u88ab\u6807\u6ce8\u7684\u7c7b\u5c31\u662fSpring\u7684\u7ec4\u4ef6\uff0c\u8fd9\u4e9b\u7c7b\u88ab\u89c6\u4f5c\u4f7f\u7528\u6ce8\u89e3\u914d\u7f6e\u548c\u7c7b\u8def\u5f84\u626b\u63cf\u65f6\uff0c\u81ea\u52a8\u63a2\u6d4b\u7684\u5019\u9009\u5bf9\u8c61\u3002 package org.springframework.stereotype ; import java.lang.annotation.* ; @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented public @interface Component { /** * The value may indicate a suggestion for a logical component name, * to be turned into a Spring bean in case of an autodetected component. * @return the suggested component name, if any */ String value () default \"\" ; } \u53ef\u4ee5\u770b\u5230\uff0c\u6807\u6ce8\u4e86 @Component \u7684 @Repository \u6ce8\u89e3\u4e2d\u7684\u5c5e\u6027\u65b9\u6cd5\u548c @Component \u4fdd\u6301\u4e00\u81f4\uff0c\u5728Spring Framework 2.5\u5f15\u5165\u7684\u6a21\u5f0f\u6ce8\u89e3\u6709\uff1a \u5176\u4e2d\uff0c @Controller \uff0c @Repository \uff0c @Service \u90fd\u662f@ Component \u7684\u6d3e\u751f\u6ce8\u89e3\u3002 4. \u81ea\u5b9a\u4e49 @Component \u6d3e\u751f\u6ce8\u89e3 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u57fa\u4e8e**Spring Framework 2.5.6 SEC03**\u7248\u672c\u8fdb\u884c\uff0c\u6dfb\u52a0\u5982\u4e0b\u4f9d\u8d56\u5373\u53ef\uff1a <dependencies> <dependency> <groupId> org.springframework </groupId> <artifactId> spring </artifactId> <version> 2.5.6.SEC03 </version> </dependency> </dependencies> \u53c2\u7167 @Repository \u7684\u58f0\u660e\uff0c\u81ea\u5b9a\u4e49\u4e00\u4e2a @StringRepository \u6ce8\u89e3\uff1a package deep.in.springframework.annotation ; import org.springframework.stereotype.Component ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Component public @interface StringRepository { /** * \u5c5e\u6027\u65b9\u6cd5\u540d\u79f0\u5fc5\u987b\u4e0e{@link Component#value()}\u4fdd\u6301\u4e00\u81f4 * * @return Bean\u7684\u540d\u79f0 */ String value () default \"\" ; } \u65b0\u5efa\u4e00\u4e2aRepository\u7c7b\u578b\u7684\u7c7b\uff0c\u5c06\u5176\u6807\u6ce8\u4e3a @StringRepository \uff1a package deep.in.springframework.repository ; import deep.in.springframework.annotation.StringRepository ; import java.util.Arrays ; import java.util.List ; @StringRepository ( \"nameRepository\" ) public class NameRepository { /** * \u67e5\u627e\u6240\u6709\u7684\u540d\u5b57 * * @return List */ public List < String > findAll () { return Arrays . asList ( \"Tom\" , \"Jerry\" , \"LN\" ); } } Spring Framework 2.5\u6682\u4e0d\u652f\u6301 @ComponentScan \u6ce8\u89e3\uff0c\u53ea\u80fd\u4f7f\u7528\u4f20\u7edf\u7684XML\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns= \"http://www.springframework.org/schema/beans\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context= \"http://www.springframework.org/schema/context\" xsi:schemaLocation= \"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\" > <context:component-scan base-package= \"deep.in.springframework\" /> </beans> \u7f16\u5199\u5f15\u5bfc\u7c7b\uff1a package deep.in.springframework ; import deep.in.springframework.repository.NameRepository ; import org.springframework.context.support.ClassPathXmlApplicationContext ; public class ApplicationBootstrap { static { //Spring 2.5 \u4e0d\u517c\u5bb9Java8\uff0c\u964d\u4f4eJava\u7248\u672c System . setProperty ( \"java.version\" , \"1.7.0\" ); } public static void main ( String [] args ) { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext (); context . setConfigLocation ( \"classpath:/applicationContext.xml\" ); context . refresh (); NameRepository repository = ( NameRepository ) context . getBean ( \"nameRepository\" ); System . out . println ( repository . findAll ()); context . close (); } } \u6574\u4f53\u9879\u76ee\u7ed3\u6784\u4e3a\uff1a $ tree . . \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2502 \u2514\u2500\u2500 springframework \u2502 \u2502 \u2502 \u251c\u2500\u2500 ApplicationBootstrap.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 annotation \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 StringRepository.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 repository \u2502 \u2502 \u2502 \u2514\u2500\u2500 NameRepository.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u2514\u2500\u2500 applicationContext.xml \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 applicationContext.xml \u2502 \u2514\u2500\u2500 deep \u2502 \u2514\u2500\u2500 in \u2502 \u2514\u2500\u2500 springframework \u2502 \u251c\u2500\u2500 ApplicationBootstrap.class \u2502 \u251c\u2500\u2500 annotation \u2502 \u2502 \u2514\u2500\u2500 StringRepository.class \u2502 \u2514\u2500\u2500 repository \u2502 \u2514\u2500\u2500 NameRepository.class \u2514\u2500\u2500 generated-sources \u2514\u2500\u2500 annotations 20 directories, 9 files \u8fd0\u884c\u5f15\u5bfc\u7c7b\uff0c\u5373\u53ef\u5f97\u5230\u7ed3\u679c\uff1a Sep 11, 2020 1:43:14 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b: display name [org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b]; startup date [Fri Sep 11 13:43:14 CST 2020]; root of context hierarchy Sep 11, 2020 1:43:14 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [applicationContext.xml] Sep 11, 2020 1:43:14 PM org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory INFO: Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b]: org.springframework.beans.factory.support.DefaultListableBeanFactory@c39f790 Sep 11, 2020 1:43:14 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@c39f790: defining beans [nameRepository,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor]; root of factory hierarchy Sep 11, 2020 1:43:14 PM org.springframework.context.support.AbstractApplicationContext doClose INFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b: display name [org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b]; startup date [Fri Sep 11 13:43:14 CST 2020]; root of context hierarchy Sep 11, 2020 1:43:14 PM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@c39f790: defining beans [nameRepository,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor]; root of factory hierarchy [Tom, Jerry, LN] \u8fd0\u884c\u7ed3\u679c\u8868\u660e\uff1a @StringRepository \u4f5c\u4e3a @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c\u7ecfSpring Framework\u626b\u63cf\u6ce8\u518c\u540e\uff0c\u5176\u8bed\u4e49\u548c @Repository \u7c7b\u4f3c\u3002\u88ab\u6807\u6ce8\u7684\u7c7b\u88abSpring\u4e0a\u4e0b\u6587\u521d\u59cb\u5316\u4e3aSpring Bean\u5e76\u88ab\u5bb9\u5668\u7ba1\u7406\u3002 5. @Component \u6d3e\u751f\u539f\u7406 \u00b6 \u57fa\u4e8e**Spring Framework 2.5.6.SEC03**\u7248\u672c\uff0c\u4e0a\u4f8b\u4e2d\u4f7f\u7528\u4e86 <context:component-scan/> \u5143\u7d20\u8fdb\u884c @Component \u7ec4\u4ef6\u626b\u63cf\u3002 context \u524d\u7f00\u7684\u5904\u7406\u7c7b\u53ef\u4ee5\u5728 /META-INF/spring.handlers \u6587\u4ef6\u4e2d\u627e\u5230\uff0c\u5c31\u662f: ... http\\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler ... ContextNamespaceHandler \u5c31\u662f context \u5bf9\u5e94\u7684\u5904\u7406\u7c7b\uff1a package org.springframework.context.config ; ... public class ContextNamespaceHandler extends NamespaceHandlerSupport { public void init () { ... registerJava5DependentParser ( \"component-scan\" , \"org.springframework.context.annotation.ComponentScanBeanDefinitionParser\" ); ... } ... } \u53ef\u4ee5\u5f97\u5230 <context:component-scan/> \u7684\u5904\u7406\u7c7b\u5c31\u662f org.springframework.context.annotation.ComponentScanBeanDefinitionParser \u3002 ComponentScanBeanDefinitionParser \u662f\u4e00\u79cdBean\u5b9a\u4e49\u89e3\u6790\u5668\u7684\u5b9e\u73b0\uff0c\u5f53Spring ApplicationContext\u52a0\u8f7d\u5e76\u89e3\u6790XML\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u89e3\u6790\u5230 <context:component-scan/> \u65f6\uff0c ComponentScanBeanDefinitionParser.parse(Element, ParserContext) \u65b9\u6cd5\u5c06\u88ab\u8c03\u7528\uff1a package org.springframework.context.annotation ; ... public class ComponentScanBeanDefinitionParser implements BeanDefinitionParser { private static final String BASE_PACKAGE_ATTRIBUTE = \"base-package\" ; ... public BeanDefinition parse ( Element element , ParserContext parserContext ) { String [] basePackages = StringUtils . commaDelimitedListToStringArray ( element . getAttribute ( BASE_PACKAGE_ATTRIBUTE )); // Actually scan for bean definitions and register them. ClassPathBeanDefinitionScanner scanner = configureScanner ( parserContext , element ); Set < BeanDefinitionHolder > beanDefinitions = scanner . doScan ( basePackages ); registerComponents ( parserContext . getReaderContext (), beanDefinitions , element ); return null ; } } \u89e3\u6790\u5230\u5c5e\u6027 base-package \u540e\uff0c basePackages \u63a5\u6536\u5c06\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u4e4b\u540e\u4f20\u5165 ClassPathBeanDefinitionScanner.doScan(String...) \u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de Set<BeanDefinitionHolder> \uff0c\u800c BeanDefinitionHolder \u5305\u542bBean\u5b9a\u4e49( BeanDefinition )\uff0cbean\u540d\u79f0\u548c\u522b\u540d\u4fe1\u606f\uff1a package org.springframework.beans.factory.config ; ... public class BeanDefinitionHolder implements BeanMetadataElement { private final BeanDefinition beanDefinition ; private final String beanName ; private final String [] aliases ; ... } \u5728\u4e0a\u4f8b\u4e2d\uff0c @StringRepository \u6807\u6ce8\u7684 NameRepository \u7c7b\u5c06\u88ab\u89e3\u6790\u4e3a BeanDefinitionHolder \uff0c\u5176\u4e2d\u7684 beanName \u4e3a nameRepository \uff0c deep.in.springframework.repository.NameRepository \u5373\u4e3a BeanDefinition \u7684\u7c7b\u578b\u3002\u4e4b\u540e\uff0cSpring ApplicationContext\u5c06\u5176\u521d\u59cb\u5316\u4e3aSpring Bean\u3002 \u5728 doScan(String...) \u65b9\u6cd5\u4e2d\uff1a package org.springframework.context.annotation ; ... public class ClassPathBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider { ... protected Set < BeanDefinitionHolder > doScan ( String ... basePackages ) { Set < BeanDefinitionHolder > beanDefinitions = new LinkedHashSet < BeanDefinitionHolder > (); for ( int i = 0 ; i < basePackages . length ; i ++ ) { Set < BeanDefinition > candidates = findCandidateComponents ( basePackages [ i ] ); for ( BeanDefinition candidate : candidates ) { String beanName = this . beanNameGenerator . generateBeanName ( candidate , this . registry ); if ( candidate instanceof AbstractBeanDefinition ) { postProcessBeanDefinition (( AbstractBeanDefinition ) candidate , beanName ); } ScopeMetadata scopeMetadata = this . scopeMetadataResolver . resolveScopeMetadata ( candidate ); if ( checkCandidate ( beanName , candidate )) { BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder ( candidate , beanName ); definitionHolder = applyScope ( definitionHolder , scopeMetadata ); beanDefinitions . add ( definitionHolder ); registerBeanDefinition ( definitionHolder , this . registry ); } } } return beanDefinitions ; } ... } \u6839\u636e basePackages \u4f9d\u6b21\u8fed\u4ee3\uff0c\u901a\u8fc7\u7236\u7c7b ClassPathScanningCandidateComponentProvider \u63d0\u4f9b\u7684 findCandidateComponents(String) \u65b9\u6cd5\uff0c\u8fd4\u56de\u5019\u9009\u7684 BeanDefinition \u96c6\u5408\uff1a package org.springframework.context.annotation ; ... public class ClassPathScanningCandidateComponentProvider implements ResourceLoaderAware { ... public Set < BeanDefinition > findCandidateComponents ( String basePackage ) { Set < BeanDefinition > candidates = new LinkedHashSet < BeanDefinition > (); try { String packageSearchPath = ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX + resolveBasePackage ( basePackage ) + \"/\" + this . resourcePattern ; Resource [] resources = this . resourcePatternResolver . getResources ( packageSearchPath ); boolean traceEnabled = logger . isTraceEnabled (); boolean debugEnabled = logger . isDebugEnabled (); for ( int i = 0 ; i < resources . length ; i ++ ) { Resource resource = resources [ i ] ; if ( traceEnabled ) { logger . trace ( \"Scanning \" + resource ); } if ( resource . isReadable ()) { MetadataReader metadataReader = this . metadataReaderFactory . getMetadataReader ( resource ); if ( isCandidateComponent ( metadataReader )) { ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition ( metadataReader ); sbd . setResource ( resource ); sbd . setSource ( resource ); if ( isCandidateComponent ( sbd )) { if ( debugEnabled ) { logger . debug ( \"Identified candidate component class: \" + resource ); } candidates . add ( sbd ); } else { if ( debugEnabled ) { logger . debug ( \"Ignored because not a concrete top-level class: \" + resource ); } } } else { if ( traceEnabled ) { logger . trace ( \"Ignored because not matching any filter: \" + resource ); } } } else { if ( traceEnabled ) { logger . trace ( \"Ignored because not readable: \" + resource ); } } } } catch ( IOException ex ) { throw new BeanDefinitionStoreException ( \"I/O failure during classpath scanning\" , ex ); } return candidates ; } ... } \u5176\u4e2d\uff0c String packageSearchPath = ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX + resolveBasePackage ( basePackage ) + \"/\" + this . resourcePattern ; \u5c06 basePackage \u8f6c\u6362\u4e3a\u641c\u7d22\u8def\u5f84\uff0c\u4e0a\u4f8b\u4e2d\u53c2\u6570\u8f6c\u6362\u4e3a\uff1a classpath*:deep/in/springframework/**/*.class \u4e4b\u540e\uff0c\u901a\u8fc7\uff1a Resource [] resources = this . resourcePatternResolver . getResources ( packageSearchPath ); \u83b7\u53d6\u5230\u641c\u7d22\u8def\u5f84\u4e0b\u7684\u6240\u6709\u8d44\u6e90\uff0c\u4e0a\u4f8b\u4e2d\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a \u7d27\u63a5\u7740\uff0c\u8fed\u4ee3\u83b7\u53d6\u5230\u7684 resources \u5bf9\u8c61\uff0c\u8d44\u6e90\u53ef\u4ee5\u88ab\u8bfb\u53d6\uff0c resource.isReadable() \u4e3a true \u65f6\uff0c\u901a\u8fc7\uff1a MetadataReader metadataReader = this . metadataReaderFactory . getMetadataReader ( resource ); \u83b7\u53d6\u8be5\u8d44\u6e90\u7684 MetadataReader \u5bf9\u8c61\uff1a package org.springframework.core.type.classreading ; import org.springframework.core.type.AnnotationMetadata ; import org.springframework.core.type.ClassMetadata ; public interface MetadataReader { /** * Read basic class metadata for the underlying class. */ ClassMetadata getClassMetadata (); /** * Read full annotation metadata for the underlying class. */ AnnotationMetadata getAnnotationMetadata (); } \u4e4b\u540e\u8fdb\u884c isCandidateComponent(MetadataReader) \u5224\u65ad\uff1a package org.springframework.context.annotation ; ... public class ClassPathScanningCandidateComponentProvider implements ResourceLoaderAware { ... protected boolean isCandidateComponent ( MetadataReader metadataReader ) throws IOException { for ( TypeFilter tf : this . excludeFilters ) { if ( tf . match ( metadataReader , this . metadataReaderFactory )) { return false ; } } for ( TypeFilter tf : this . includeFilters ) { if ( tf . match ( metadataReader , this . metadataReaderFactory )) { return true ; } } return false ; } ... } \u5176\u4e2d\u4f7f\u7528 excludeFilters \u548c includeFilters \u4e24\u4e2a\u6761\u4ef6\u6765\u8fdb\u884c\u5224\u65ad\uff0c\u5b83\u4eec\u7684\u521d\u59cb\u5316\u662f\u5728\uff1a package org.springframework.context.annotation ; ... public class ComponentScanBeanDefinitionParser implements BeanDefinitionParser { ... protected ClassPathBeanDefinitionScanner configureScanner ( ParserContext parserContext , Element element ) { ... boolean useDefaultFilters = true ; if ( element . hasAttribute ( USE_DEFAULT_FILTERS_ATTRIBUTE )) { useDefaultFilters = Boolean . valueOf ( element . getAttribute ( USE_DEFAULT_FILTERS_ATTRIBUTE )); } // Delegate bean definition registration to scanner class. ClassPathBeanDefinitionScanner scanner = createScanner ( readerContext , useDefaultFilters ); } ... protected ClassPathBeanDefinitionScanner createScanner ( XmlReaderContext readerContext , boolean useDefaultFilters ) { return new ClassPathBeanDefinitionScanner ( readerContext . getRegistry (), useDefaultFilters ); } ... } \u4e2d\u901a\u8fc7 ClassPathBeanDefinitionScanner \u7684\u6784\u9020\u65b9\u6cd5\u5b8c\u6210\u7684\uff1a package org.springframework.context.annotation ; ... public class ClassPathBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider { public ClassPathBeanDefinitionScanner ( BeanDefinitionRegistry registry , boolean useDefaultFilters ) { super ( useDefaultFilters ); Assert . notNull ( registry , \"BeanDefinitionRegistry must not be null\" ); this . registry = registry ; // Determine ResourceLoader to use. if ( this . registry instanceof ResourceLoader ) { setResourceLoader (( ResourceLoader ) this . registry ); } } } useDefaultFilters \u9ed8\u8ba4\u4e3a true \uff0c\u5219\u7531\u5176\u7236\u7c7b\u6784\u9020\u65b9\u6cd5\uff1a package org.springframework.context.annotation ; ... public class ClassPathScanningCandidateComponentProvider implements ResourceLoaderAware { ... public ClassPathScanningCandidateComponentProvider ( boolean useDefaultFilters ) { if ( useDefaultFilters ) { registerDefaultFilters (); } } ... protected void registerDefaultFilters () { this . includeFilters . add ( new AnnotationTypeFilter ( Component . class )); } ... } \u6700\u7ec8\u5b8c\u6210\uff0c\u53ef\u4ee5\u770b\u5230\uff0c includeFilters \u5bf9\u8c61\u5305\u542b\u4e86 @Component \u7c7b\u578b\u7684 AnnotationTypeFilter \u5bf9\u8c61\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e excludeFilters \u5bf9\u8c61\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6b64\u65f6\u7684 AnnotationTypeFilter \u53ef\u4ee5\u8bc6\u522b @Component \uff0c @Controller \uff0c @Repository \uff0c @Service \u7c7b\u578b\u7684\u6ce8\u89e3\u5143\u4fe1\u606f\u3002 \u5224\u65ad\u5b8c\u5019\u9009 Component \u540e\uff0c\u7ee7\u7eed\u6267\u884c\uff1a ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition ( metadataReader ); ScannedGenericBeanDefinition \u7684\u5b9a\u4e49\u4e3a\uff1a package org.springframework.context.annotation ; ... public class ScannedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition { private final AnnotationMetadata metadata ; public ScannedGenericBeanDefinition ( MetadataReader metadataReader ) { Assert . notNull ( metadataReader , \"MetadataReader must not be null\" ); this . metadata = metadataReader . getAnnotationMetadata (); setBeanClassName ( this . metadata . getClassName ()); } public final AnnotationMetadata getMetadata () { return this . metadata ; } } \u6700\u7ec8\uff0c\u53ea\u6709\u8d44\u6e90 deep.in.springframework.repository.NameRepository \u88ab\u88c5\u5165 Set<BeanDefinition> candidates \u5bf9\u8c61\u4e2d\uff0c\u800c deep.in.springframework.annotation.StringRepository \u4e0d\u88ab\u88c5\u5165\u662f\u56e0\u4e3a Ignored because not a concrete top-level class \uff0c\u5f15\u5bfc\u7c7b\u5219\u662f Ignored because not matching any filter \u7684\u539f\u56e0\u88ab\u6392\u9664\u4e86\u3002 \u81f3\u6b64\uff0c deep.in.springframework.repository.NameRepository \u4f5c\u4e3a BeanDefinition \u8fd4\u56de\u5e76\u8fdb\u884c\u540e\u7eed\u7684\u521d\u59cb\u5316\u3002 \u540c\u6837\uff0c\u5728 ClassPathBeanDefinitionScanner \u7684 JavaDoc\u6587\u6863 \u4e2d\uff0c\u4e5f\u6709\u8bf4\u660e\uff1a Candidate classes are detected through configurable type filters. The default filters include classes that are annotated with Spring's @Component , @Repository , @Service , or @Controller stereotype ClassPathBeanDefinitionScanner \u901a\u8fc7\u9ed8\u8ba4\u8fc7\u6ee4\u5668\u5f15\u5165\u6807\u8bb0\u4e86 @Component \uff0c @Repository \uff0c @Service \uff0c\u6216 @Controller \u7684\u7c7b\uff0c\u540c\u7406\uff0c\u5b83\u4e5f\u80fd\u5f15\u5165\u6240\u6709\u6807\u8bb0\u4e86 @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c\u6bd4\u5982\u4e0a\u4f8b\u4e2d\u7684 @StringRepository \u3002 Spring 3.0\u5f15\u5165\u7684 @Configuration \u6ce8\u89e3\uff0c\u4e5f\u662f @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c \u53ef\u4ee5\u53c2\u8003 package org.springframework.context.annotation ; ... @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Component public @interface Configuration { ... String value () default \"\" ; ... } ClassPathBeanDefinitionScanner \u4e5f\u5141\u8bb8\u81ea\u5b9a\u4e49\u7c7b\u578b\u8fc7\u6ee4\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7 <context:component-scan/> \u7684 include-filter \u548c exclude-filter \u5c5e\u6027\u6765\u914d\u7f6e\u3002 6. \u591a\u5c42\u6b21 @Component \u6d3e\u751f\u6027 \u00b6 @SpringBootApplication \u662fSpring Boot\u4e2d\u6700\u5e38\u89c1\u7684\u6ce8\u89e3\uff0c\u5728 \u5b98\u65b9\u6587\u6863 \u4e2d\uff0c\u6709\u5982\u4e0b\u63cf\u8ff0\uff1a A single @SpringBootApplication annotation can be used to enable those three features, that is: @EnableAutoConfiguration : enable Spring Boot\u2019s auto-configuration mechanism @ComponentScan : enable @Component scan on the package where the application is located (see the best practices ) @Configuration : allow to register extra beans in the context or import additional configuration classes package com.example.myapplication ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } \u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u4e86 @SpringBootApplication \u76f8\u5f53\u4e8e @Configuration \uff0c @ComponentScan \u548c @EnableAutoConfiguration \u7684\u8054\u5408\u6ce8\u89e3. @SpringBootApplication \u6ce8\u89e3\u7684\u5b9a\u4e49\u4e3a\uff1a package org.springframework.boot.autoconfigure ; ... @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan ( excludeFilters = { @Filter ( type = FilterType . CUSTOM , classes = TypeExcludeFilter . class ), @Filter ( type = FilterType . CUSTOM , classes = AutoConfigurationExcludeFilter . class ) }) public @interface SpringBootApplication { ... } \u53ef\u4ee5\u770b\u5230\uff0c @ComponentScan \u548c @EnableAutoConfiguration \u662f\u76f4\u63a5\u6807\u6ce8\u7684\uff0c\u800c @Configuration \u5374\u4e0d\u662f\uff0c\u800c\u5728 @SpringBootConfiguration \u4e2d\uff1a package org.springframework.boot ; ... /** * Indicates that a class provides Spring Boot application * {@link Configuration @Configuration}. Can be used as an alternative to the Spring's * standard {@code @Configuration} annotation so that configuration can be found * automatically (for example in tests). * <p> * Application should only ever include <em>one</em> {@code @SpringBootConfiguration} and * most idiomatic Spring Boot applications will inherit it from * {@code @SpringBootApplication}. * * @author Phillip Webb * @author Andy Wilkinson * @since 1.4.0 */ @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Configuration public @interface SpringBootConfiguration { ... } \u5176\u6807\u6ce8\u4e86 @Configuration \u6ce8\u89e3\uff0c\u5df2\u77e5 @Configuration \u662f @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c\u6839\u636e\u5c42\u6b21\u5173\u7cfb\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a + @SpringBootApplication + @SpringBootConfiguration + @Configuration + @Component \u6839\u636e\u6ce8\u91ca\uff0c @SpringBootConfiguration \u662fSpring Boot 1.4.0\u7248\u672c\u5f15\u5165\u7684\uff0c\u4e4b\u524d @SpringBootApplication \u662f\u76f4\u63a5\u4f7f\u7528 @Configuration \u6ce8\u89e3\u7684\u3002 \u4e3a\u4e86\u9a8c\u8bc1 @Component \u6d3e\u751f\u6027\u7684\u591a\u5c42\u6b21\uff0c\u53ef\u4ee5\u8fdb\u884c\u9a8c\u8bc1\uff1a package deep.in.springboot ; import org.springframework.boot.WebApplicationType ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.builder.SpringApplicationBuilder ; import org.springframework.context.ConfigurableApplicationContext ; @SpringBootApplication public class ComponentHierarchyApp { public static void main ( String [] args ) { Class appClass = ComponentHierarchyApp . class ; ConfigurableApplicationContext context = new SpringApplicationBuilder ( appClass ). web ( WebApplicationType . NONE ). run (); System . out . println ( context . getBean ( appClass )); context . close (); } } \u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\uff1a \u6240\u7528Spring Boot\u7684\u7248\u672c\u4e3a2.3.2.RELEASE\uff0c\u5176\u4f9d\u8d56\u7684Spring Framework\u7248\u672c\u53ef\u4ee5\u4ece org/springframework/boot/spring-boot-dependencies/2.3.2.RELEASE/spring-boot-dependencies-2.3.2.RELEASE.pom \u4e2d\u67e5\u5230\uff0c\u662f5.2.8.RELEASE \u8bf4\u660e\u5728\u8be5\u7248\u672c\u4e0b\uff0c @Component \u6d3e\u751f\u6027\u662f\u591a\u5c42\u6b21\u7684\u3002 \u56de\u5230**Spring Framework 2.5.6.SEC03**\u4e0b\uff0c\u5c06\u793a\u4f8b\u4ee3\u7801\u505a\u5982\u4e0b\u8c03\u6574\uff1a package deep.in.springframework.annotation ; import org.springframework.stereotype.Component ; import org.springframework.stereotype.Repository ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Repository //\u66ff\u6362@Component public @interface StringRepository { /** * \u5c5e\u6027\u65b9\u6cd5\u540d\u79f0\u5fc5\u987b\u4e0e{@link Component#value()}\u4fdd\u6301\u4e00\u81f4 * * @return Bean\u7684\u540d\u79f0 */ String value () default \"\" ; } \u5c06 @Component \u6ce8\u89e3\u66ff\u6362\u4e3a @Repository \u6ce8\u89e3\uff0c\u518d\u6b21\u8fd0\u884c\u5f15\u5bfc\u7a0b\u5e8f\uff1a \u66ff\u6362\u6ce8\u89e3\u4e4b\u540e\uff0c\u62a5\u9519 Exception in thread \"main\" org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'nameRepository' is defined \u3002\u8bf4\u660eSpring\u4e0d\u518d\u5c06 nameRepository \u89c6\u4e3aBean\u3002 \u8bf4\u660e\u5f53\u524d\u7248\u672c\u7684Spring Framework\u4e0d\u652f\u6301\u591a\u5c42\u6b21\u6d3e\u751f\u6ce8\u89e3\uff0c\u800c\u4e0a\u9762Spring Boot\u7684\u793a\u4f8b\u4e2d\uff0c ComponentHierarchyApp \u662f\u652f\u6301\u7684\uff0c\u8bf4\u660e\u662f\u540e\u7eedSpring\u7248\u672c\u4f5c\u51fa\u4e86\u4fee\u6539\uff0c\u652f\u6301\u4e86\u8fd9\u4e00\u7279\u6027\u3002 \u5c06Spring\u7248\u672c\u8c03\u6574\u4e3a**3.0.0.RELEASE**\uff1a <dependencies> <!-- <dependency>--> <!-- <groupId>org.springframework</groupId>--> <!-- <artifactId>spring</artifactId>--> <!-- <version>2.5.6.SEC03</version>--> <!-- </dependency>--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-context </artifactId> <version> 3.0.0.RELEASE </version> </dependency> </dependencies> \u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\uff0c\u4e00\u5207\u6b63\u5e38\uff0c\u8bf4\u660e\u8be5\u7248\u672c\u4e2d\u63d0\u5347\u4e86\u8be5\u7279\u6027\u3002 7. \u591a\u5c42\u6b21 @Component \u6d3e\u751f\u6027\u539f\u7406 \u00b6 \u5728\u4e0a\u9762\u7b2c5\u90e8\u5206\u5206\u6790\u4e86 @Component \u6d3e\u751f\u6027\u539f\u7406\uff0c\u4e0b\u9762\u7ee7\u7eed\u5206\u6790**2.5.6.SEC03**\u548c**3.0.0.RELEASE**\u7248\u672c\u4e2d\u6e90\u7801\u7684\u5dee\u5f02\uff0c\u89e3\u91ca\u5bf9\u591a\u5c42\u6b21\u6d3e\u751f\u7684\u652f\u6301\u3002 \u9996\u5148\u5bf9\u6bd4 ClassPathScanningCandidateComponentProvider \uff1a package org.springframework.context.annotation ; ... public class ClassPathScanningCandidateComponentProvider implements ResourceLoaderAware { ... @SuppressWarnings ( \"unchecked\" ) protected void registerDefaultFilters () { this . includeFilters . add ( new AnnotationTypeFilter ( Component . class )); ClassLoader cl = ClassPathScanningCandidateComponentProvider . class . getClassLoader (); try { this . includeFilters . add ( new AnnotationTypeFilter ( (( Class <? extends Annotation > ) cl . loadClass ( \"javax.annotation.ManagedBean\" )), false )); logger . info ( \"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning\" ); } catch ( ClassNotFoundException ex ) { // JSR-250 1.1 API (as included in Java EE 6) not available - simply skip. } try { this . includeFilters . add ( new AnnotationTypeFilter ( (( Class <? extends Annotation > ) cl . loadClass ( \"javax.inject.Named\" )), false )); logger . info ( \"JSR-330 'javax.inject.Named' annotation found and supported for component scanning\" ); } catch ( ClassNotFoundException ex ) { // JSR-330 API not available - simply skip. } } } registerDefaultFilters() \u65b9\u6cd5\u53d8\u5316\u8f83\u5927\uff0c\u5f00\u59cb\u652f\u6301JSR-250\u7684 @ManagedBean \u548cJSR-330\u7684 @Named \u7684 AnnotationTypeFilter findCandidateComponents(String) \u65b9\u6cd5\u5219\u662f\u5c0f\u5e45\u6539\u52a8\uff1a Java 5\u7684\u589e\u5f3afor\u5faa\u73af\u548c\u4e00\u6bb5try-catch\u63a7\u5236\uff0c\u5e76\u6ca1\u6709\u672c\u8d28\u6027\u53d8\u5316\u3002 \u5bf9\u6bd4 AnnotationTypeFilter \uff1a \u4ec5\u6709Java 5\u6cdb\u578b\u548c\u81ea\u52a8\u88c5\u7bb1\u8c03\u6574\uff0c\u4e5f\u6ca1\u6709\u672c\u8d28\u6027\u53d8\u5316\u3002 SimpleMetadataReader \u662f\u63a5\u53e3 MetadataReader \u552f\u4e00\u975e\u516c\u6709\u5b9e\u73b0\u7c7b\uff0c\u8fdb\u884c\u5bf9\u6bd4\uff1a \u65b0\u589e\u4e86 classMetadata \u548c annotationMetadata \u5c5e\u6027\uff0c\u4e14\u5f53\u65b9\u6cd5\u591a\u6b21\u8c03\u7528\u65f6\uff0c\u8fdb\u884c\u975e\u7a7a\u5224\u65ad\uff0c\u907f\u514d\u4e86\u91cd\u590d\u521b\u5efa\u3002 \u81f3\u6b64\u4ecd\u6ca1\u6709\u672c\u8d28\u6027\u53d8\u5316\uff0c\u5c31\u9700\u8981\u7ee7\u7eed\u5206\u6790 ClassMetadataReadingVisitor \u548c AnnotationMetadataReadingVisitor \u4e86\u3002 3.0.0.RELEASE\u7684 ClassMetadataReadingVisitor \u65b0\u589e\u4e86\u4e00\u4e9b visit* \u65b9\u6cd5\uff0c\u6ca1\u6709\u5b9e\u73b0\u5c42\u9762\u7684\u53d8\u5316\u3002 \u5bf9\u6bd4 AnnotationMetadataReadingVisitor \uff1a \u53ef\u4ee5\u53d1\u73b0\uff0c**3.0.0.RELEASE**\u7684\u53d8\u5316\u4e3b\u8981\u96c6\u4e2d\u5728 visitAnnotation \u65b9\u6cd5\u4e0a\uff0c\u4f7f\u7528 AnnotationAttributesReadingVisitor \u53d6\u4ee3\u4e86**2.5.6.SEC03**\u4e2d\u7684 EmptyVisitor \u533f\u540d\u5185\u90e8\u7c7b\u5b9e\u73b0\u3002 **2.5.6.SEC03**\u7684\u4e3b\u8981\u5b9e\u73b0\u662f\uff1a public void visitEnd () { try { Class annotationClass = classLoader . loadClass ( className ); ... // Register annotations that the annotation type is annotated with. Annotation [] metaAnnotations = annotationClass . getAnnotations (); Set < String > metaAnnotationTypeNames = new HashSet < String > (); for ( Annotation metaAnnotation : metaAnnotations ) { metaAnnotationTypeNames . add ( metaAnnotation . annotationType (). getName ()); } metaAnnotationMap . put ( className , metaAnnotationTypeNames ); } catch ( ClassNotFoundException ex ) { // Class not found - can't determine meta-annotations. } attributesMap . put ( className , attributes ); } \u4e4b\u524d\u7f16\u5199\u7684 NameRepository \u7684\u6ce8\u89e3\u5c42\u6b21\u4e3a\uff1a + @Component + @StringRepository + NameRepository \u7ed3\u5408\u4e0a\u8ff0\u4ee3\u7801\uff0c annotationClass \u5c31\u662f @StringRepository \uff0c\u56e0\u4e3a metaAnnotations \u6570\u7ec4\u4ec5\u4ec5\u83b7\u53d6\u5f53\u524d\u7c7b\u6240\u6807\u6ce8\u7684\u6ce8\u89e3\uff0c\u6240\u4ee5\u6b64\u65f6\u53ea\u6709 @Repository \u800c\u6ca1\u6709 @Component \uff0c\u7531\u4e8e**2.5.6.SEC03**\u4e2d\u7684\u5b9e\u73b0\u672a\u4f7f\u7528\u5c42\u6b21\u9012\u5f52\u83b7\u53d6 Annotation[] \uff0c\u6240\u4ee5\u4ec5\u652f\u6301\u5355\u5c42\u6b21\u7684 @Component \u6d3e\u751f\u3002 **3.0.0.RELEASE**\u7684\u5b9e\u73b0\u4e3a\uff1a public void visitEnd () { this . attributesMap . put ( this . annotationType , this . localAttributes ); try { Class <?> annotationClass = this . classLoader . loadClass ( this . annotationType ); ... // Register annotations that the annotation type is annotated with. Set < String > metaAnnotationTypeNames = new LinkedHashSet < String > (); for ( Annotation metaAnnotation : annotationClass . getAnnotations ()) { metaAnnotationTypeNames . add ( metaAnnotation . annotationType (). getName ()); if ( ! this . attributesMap . containsKey ( metaAnnotation . annotationType (). getName ())) { this . attributesMap . put ( metaAnnotation . annotationType (). getName (), AnnotationUtils . getAnnotationAttributes ( metaAnnotation , true )); } for ( Annotation metaMetaAnnotation : metaAnnotation . annotationType (). getAnnotations ()) { metaAnnotationTypeNames . add ( metaMetaAnnotation . annotationType (). getName ()); } } if ( this . metaAnnotationMap != null ) { this . metaAnnotationMap . put ( this . annotationType , metaAnnotationTypeNames ); } } catch ( ClassNotFoundException ex ) { // Class not found - can't determine meta-annotations. } } \u4ece\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u7b2c\u4e00\u5c42\u5faa\u73af for (Annotation metaAnnotation : annotationClass.getAnnotations()) \u662f\u83b7\u53d6\u7b2c\u4e00\u5c42\u5143\u6ce8\u89e3\u6570\u7ec4\uff0c\u7b2c\u4e8c\u5c42\u5faa\u73af for (Annotation metaMetaAnnotation : metaAnnotation.annotationType().getAnnotations()) \u662f\u5728\u7b2c\u4e00\u5c42\u7684\u57fa\u7840\u4e0a\u518d\u6b21\u83b7\u53d6\u5143\u6ce8\u89e3\u6570\u7ec4\u3002 \u7ed3\u5408 @StringRepository \uff0c\u7b2c\u4e00\u5c42\u5143\u6ce8\u89e3 @Repository \u662f metaAnnotation \uff0c\u7b2c\u4e8c\u5c42\u5143\u6ce8\u89e3 @Component \u662f metaMetaAnnotation \u3002 \u6b64\u5904\u7684\u5b9e\u73b0\u4ecd\u7136\u5b58\u5728\u95ee\u9898\uff0c\u5b83\u6307\u5904\u7406\u4e86\u4e24\u5c42 @Component \u6d3e\u751f\uff0c\u800c\u6ca1\u6709\u5904\u7406\u591a\u5c42 @Component \u6d3e\u751f\uff0c\u4e0b\u9762\u8fdb\u884c\u9a8c\u8bc1\uff1a \u58f0\u660e @FirstLevelRepository \u548c @SecondLevelRepository package deep.in.springframework.annotation ; import org.springframework.stereotype.Repository ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Repository public @interface FirstLevelRepository { String value () default \"\" ; } package deep.in.springframework.annotation ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @FirstLevelRepository public @interface SecondLevelRepository { String value () default \"\" ; } \u5176\u4e2d @FirstLevelRepository \u662f\u7b2c\u4e8c\u5c42 @Component \u6ce8\u89e3\uff0c @SecondLevelRepository \u662f\u7b2c\u4e09\u5c42 @Component \u6ce8\u89e3\uff0c\u6574\u4f53\u7684\u6d3e\u751f\u5c42\u6b21\u4e3a\uff1a @SecondLevelRepository |- @FirstLevelRepository |- @Repository |- @Component \u6807\u6ce8 @FirstLevelRepository \u548c @SecondLevelRepository package deep.in.springframework.repository ; import deep.in.springframework.annotation.FirstLevelRepository ; @FirstLevelRepository ( \"myFirstLevelRepository\" ) public class MyFirstLevelRepository { } package deep.in.springframework.repository ; import deep.in.springframework.annotation.SecondLevelRepository ; @SecondLevelRepository ( \"mySecondLevelRepository\" ) public class MySecondLevelRepository { } \u914d\u7f6e @Component \u626b\u63cf <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns= \"http://www.springframework.org/schema/beans\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context= \"http://www.springframework.org/schema/context\" xsi:schemaLocation= \"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\" > <!-- \u6fc0\u6d3b\u6ce8\u89e3\u9a71\u52a8\u7279\u6027 --> <context:annotation-config/> <context:component-scan base-package= \"deep.in.springframework\" /> </beans> \u7531\u4e8eSpring Framework 3.0.0.RELEASE\u8fd8\u672a\u5f15\u5165 @ComponentScan \uff0c\u56e0\u6b64\u4ecd\u7136\u91c7\u7528XML\u5143\u7d20 <context:component-scan> \u7ec4\u4ef6\u626b\u63cf\u7684\u65b9\u5f0f\u3002 \u7f16\u5199\u5f15\u5bfc\u7c7b package deep.in.springframework ; import org.springframework.context.support.ClassPathXmlApplicationContext ; public class ApplicationBootstrap { public static void main ( String [] args ) { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext (); context . setConfigLocation ( \"classpath:/applicationContext.xml\" ); context . refresh (); System . out . println ( context . containsBean ( \"myFirstLevelRepository\" )); System . out . println ( context . containsBean ( \"mySecondLevelRepository\" )); context . close (); } } \u8fd0\u884c\u7a0b\u5e8f\uff0c\u5f97\u5230\u7ed3\u679c\uff1a Oct 14, 2020 11:10:45 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@439f5b3d: startup date [Wed Oct 14 23:10:45 CST 2020]; root of context hierarchy Oct 14, 2020 11:10:45 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [applicationContext.xml] Oct 14, 2020 11:10:45 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@3b6eb2ec: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,myFirstLevelRepository]; root of factory hierarchy true false Oct 14, 2020 11:10:45 PM org.springframework.context.support.AbstractApplicationContext doClose INFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@439f5b3d: startup date [Wed Oct 14 23:10:45 CST 2020]; root of context hierarchy Oct 14, 2020 11:10:45 PM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@3b6eb2ec: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,myFirstLevelRepository]; root of factory hierarchy Process finished with exit code 0 \u4ece\u7ed3\u679c\u5373\u53ef\u770b\u51fa\uff0cSpring Framework 3.0.0.RELEASE\u4ec5\u4ec5\u652f\u6301\u4e24\u5c42 @Component \u6d3e\u751f\uff0c\u539f\u56e0\u5c31\u662f AnnotationAttributesReadingVisitor \u6ca1\u6709\u9012\u5f52\u67e5\u627e\u6240\u6709\u5c42\u6b21\u7684\u5143\u6ce8\u89e3\u3002 \u7ee7\u7eed\u67e5\u770bSpring 3.x\u7684 AnnotationAttributesReadingVisitor \u6e90\u4ee3\u7801\uff1a 3.0.x 3.1.x 3.2.x \u82e5\u8981\u8be6\u7ec6\u67e5\u770b\u5404\u4e2a\u7248\u672c\u4e2d\u7684\u6e90\u4ee3\u7801\uff0c\u4fee\u6539 pom.xml \u4e2d\u7684\u7248\u672c\u53f7\u5373\u53ef\uff1a <dependencies> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-context </artifactId> <version> 3.0.0.RELEASE </version> </dependency> </dependencies> \u5176\u4e2d\u7684\u7248\u672c\u53f7\uff0c\u53ef\u4ee5 \u5728\u6b64\u67e5\u770b \u5728Spring Framework 3\u7684\u5404\u7248\u672c\u4e2d\uff0c AnnotationAttributesReadingVisitor \u90fd\u6ca1\u6709\u672c\u8d28\u7684\u53d8\u5316\uff0c\u800c\u5728Spring Framework 4.0.x\u4e2d\uff0c \u4ee3\u7801 \u53d1\u751f\u4e86\u6539\u53d8\u3002 @Override public void doVisitEnd ( Class <?> annotationClass ) { super . doVisitEnd ( annotationClass ); List < AnnotationAttributes > attributes = this . attributesMap . get ( this . annotationType ); if ( attributes == null ) { this . attributesMap . add ( this . annotationType , this . attributes ); } else { attributes . add ( 0 , this . attributes ); } Set < String > metaAnnotationTypeNames = new LinkedHashSet < String > (); Annotation [] metaAnnotations = AnnotationUtils . getAnnotations ( annotationClass ); if ( ! ObjectUtils . isEmpty ( metaAnnotations )) { for ( Annotation metaAnnotation : metaAnnotations ) { if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( metaAnnotation )) { recursivelyCollectMetaAnnotations ( metaAnnotationTypeNames , metaAnnotation ); } } } if ( this . metaAnnotationMap != null ) { this . metaAnnotationMap . put ( annotationClass . getName (), metaAnnotationTypeNames ); } } private void recursivelyCollectMetaAnnotations ( Set < String > visited , Annotation annotation ) { String annotationName = annotation . annotationType (). getName (); if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( annotation ) && visited . add ( annotationName )) { // Only do further scanning for public annotations; we'd run into // IllegalAccessExceptions otherwise, and we don't want to mess with // accessibility in a SecurityManager environment. if ( Modifier . isPublic ( annotation . annotationType (). getModifiers ())) { this . attributesMap . add ( annotationName , AnnotationUtils . getAnnotationAttributes ( annotation , false , true )); for ( Annotation metaMetaAnnotation : annotation . annotationType (). getAnnotations ()) { recursivelyCollectMetaAnnotations ( visited , metaMetaAnnotation ); } } } } \u5373\u91c7\u7528\u9012\u5f52\u65b9\u5f0f\u83b7\u53d6\u5143\u6ce8\u89e3\uff0c\u652f\u6301\u591a\u5c42\u6b21 @Component \u6d3e\u751f\u3002 \u800cSpring Boot\u8bde\u751f\u4e4b\u521d\uff0c\u5c31\u57fa\u4e8e\u4e86Spring Framework 4.1\u7248\u672c\uff0c \u53ef\u4ee5\u67e5\u770b \uff0c\u6240\u4ee5Spring Boot\u4e0e\u751f\u4ff1\u6765\u5c31\u652f\u6301\u591a\u5c42\u6b21 @Component \u6d3e\u751f\u6027\u3002","title":"Stereotype Annotation"},{"location":"SpringFramework/spring-stereotype-annotation/#1","text":"Spring Framework\u7684\u6a21\u5f0f\u6ce8\u89e3\u5728\u5b98\u65b9Github\u7684Wiki\u4e2d\u6709\u8bf4\u660e\uff0c \u53ef\u4ee5\u53c2\u8003 \u3002 A stereotype annotation is an annotation that is used to declare the role that a component plays within the application. For example, the @Repository annotation in the Spring Framework is a marker for any class that fulfills the role or stereotype of a repository (also known as Data Access Object or DAO). Wiki\u8bf4\u660e\uff0c\u6a21\u5f0f\u6ce8\u89e3(stereotype annotation)\u662f\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7528\u6765\u58f0\u660e\u7ec4\u4ef6\u89d2\u8272\u7684\u6ce8\u89e3\u3002\u5e76\u4e3e\u4f8b\uff0c @Repository \u6ce8\u89e3\u5c31\u662f\u5b9e\u73b0\u4ed3\u50a8\u6a21\u5f0f(\u6216\u8005\u8bf4\u662fDAO\uff1a\u6570\u636e\u8bbf\u95ee\u5bf9\u8c61)\u7c7b\u7684\u6807\u8bb0\u3002 @Component is a generic stereotype for any Spring-managed component. Any component annotated with @Component is a candidate for component scanning. Similarly, any component annotated with an annotation that is itself meta-annotated with @Component is also a candidate for component scanning. For example, @Service is meta-annotated with @Component . \u7d27\u63a5\u7740\uff0c\u7ee7\u7eed\u8bf4\u660e\uff0c @Component \u662fSpring\u7ba1\u7406\u7ec4\u4ef6\u7684\u901a\u7528\u6a21\u5f0f\u6ce8\u89e3\uff0c\u4efb\u4f55\u88ab @Component \u6ce8\u89e3\u7684\u7ec4\u4ef6\u90fd\u662f\u5019\u9009\u7684\u7ec4\u4ef6\u626b\u63cf\u5bf9\u8c61\u3002\u4efb\u4f55\u88ab @Component \u5143\u6807\u6ce8\u7684\u6ce8\u89e3\uff0c\u4f8b\u5982 @Service \uff0c\u4efb\u4f55\u7ec4\u4ef6\u88ab\u5b83\u4eec\u6807\u6ce8\u65f6\uff0c\u4e5f\u88ab\u89c6\u4f5c\u5019\u9009\u7684\u7ec4\u4ef6\u626b\u63cf\u5bf9\u8c61\u3002 Core Spring provides several stereotype annotations out of the box, including but not limited to: @Component , @Service , @Repository , @Controller , @RestController , and @Configuration . @Repository , @Service , etc. are specializations of @Component . Spring Framework\u6838\u5fc3\u90e8\u5206\u63d0\u4f9b\u4e86\u51e0\u79cd\u6a21\u5f0f\u6ce8\u89e3\uff0c\u5305\u62ec\u5e76\u4e0d\u9650\u4e8e\u4e0b\u5217\u8fd9\u4e9b\uff1a @Component , @Service , @Repository , @Controller , @RestController \u548c @Configuration \uff0c\u5b83\u4eec\u90fd\u662f @Component \u7684\u89c4\u8303\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6a21\u5f0f\u6ce8\u89e3\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6a21\u5f0f\u6ce8\u89e3\u5c31\u662f @Component \u7684\u6d3e\u751f\u6ce8\u89e3\u3002\u4f46Java\u4e2d\u7684\u6ce8\u89e3\u4e0d\u5141\u8bb8\u7ee7\u627f\uff0c \u53ef\u4ee5\u53c2\u8003 \uff0cSpring Framework\u91c7\u7528\u5143\u6807\u6ce8\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u6d3e\u751f\u3002","title":"1. \u6a21\u5f0f\u6ce8\u89e3\u8bf4\u660e"},{"location":"SpringFramework/spring-stereotype-annotation/#2","text":"\u4e0a\u8ff0 Wiki \u5728\u5f00\u5934\u76f4\u63a5\u4ecb\u7ecd\u4e86\u5143\u6ce8\u89e3\uff1a A meta-annotation is an annotation that is declared on another annotation. An annotation is therefore meta-annotated if it is annotated with another annotation. For example, any annotation that is declared to be documented is meta-annotated with @Documented from the java.lang.annotation package. \u5143\u6ce8\u89e3\u6307\u7684\u662f\u4e00\u4e2a\u80fd\u58f0\u660e\u5728\u5176\u4ed6\u6ce8\u89e3\u4e0a\u7684\u6ce8\u89e3\uff0c\u540c\u65f6\u4e3e\u4f8b @Documented \u80fd\u591f\u4f5c\u4e3a\u4efb\u4f55\u6ce8\u89e3\u7684\u5143\u6ce8\u89e3\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c\u5143\u6ce8\u89e3\u662fJava\u4e2d\u7684\u6982\u5ff5\uff0c\u800c\u975eSpring\u4e13\u6709\u3002\u800c\u5728Spring\u4e2d\uff0c @Component \u53ef\u4ee5\u89c6\u4f5c\u4e3a\u5143\u6ce8\u89e3\uff0c\u7531\u4e0a\u9762\u7684\u6a21\u5f0f\u6ce8\u89e3\u8bf4\u660e\u5373\u53ef\u770b\u51fa\u3002","title":"2. \u5143\u6ce8\u89e3"},{"location":"SpringFramework/spring-stereotype-annotation/#3-component","text":"@Repository \u6ce8\u89e3\u5728Spring Framework 2.0\u88ab\u5f15\u5165\uff0c\u53ef\u4ee5\u53c2\u8003 JavaDoc\u6587\u6863 \uff0c\u8be5\u6ce8\u89e3\u4ec5\u4ec5\u4f5c\u4e3a\u4ed3\u50a8(DAO)\u7684\u6807\u8bb0\u4f7f\u7528\u3002 package org.springframework.stereotype ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Inherited @Documented public @interface Repository { } \u800c\u5230\u4e86Spring Framework 2.5\uff0c\u5176\u5b9a\u4e49\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u53ef\u4ee5\u53c2\u8003 JavaDoc\u6587\u6863 \uff0c\u5176\u4e0d\u4f46\u662f\u6807\u8bb0\u6ce8\u89e3\uff0c\u800c\u4e14\u4f5c\u4e3aSpring Framework\u7684\u7ec4\u4ef6(Component)\u4e86\u3002\u5728\u5176\u5b9a\u4e49\u4e0a\u4e5f\u88ab @Component \u6ce8\u89e3\u6807\u6ce8\u3002 package org.springframework.stereotype ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Component public @interface Repository { /** * The value may indicate a suggestion for a logical component name, * to be turned into a Spring bean in case of an autodetected component. * @return the suggested component name, if any */ String value () default \"\" ; } \u56e0\u4e3aSpring Framework 2.5\u540c\u65f6\u5f15\u5165\u4e86 @Component \u6ce8\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003 JavaDoc\u6587\u6863 \uff0c\u88ab\u6807\u6ce8\u7684\u7c7b\u5c31\u662fSpring\u7684\u7ec4\u4ef6\uff0c\u8fd9\u4e9b\u7c7b\u88ab\u89c6\u4f5c\u4f7f\u7528\u6ce8\u89e3\u914d\u7f6e\u548c\u7c7b\u8def\u5f84\u626b\u63cf\u65f6\uff0c\u81ea\u52a8\u63a2\u6d4b\u7684\u5019\u9009\u5bf9\u8c61\u3002 package org.springframework.stereotype ; import java.lang.annotation.* ; @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented public @interface Component { /** * The value may indicate a suggestion for a logical component name, * to be turned into a Spring bean in case of an autodetected component. * @return the suggested component name, if any */ String value () default \"\" ; } \u53ef\u4ee5\u770b\u5230\uff0c\u6807\u6ce8\u4e86 @Component \u7684 @Repository \u6ce8\u89e3\u4e2d\u7684\u5c5e\u6027\u65b9\u6cd5\u548c @Component \u4fdd\u6301\u4e00\u81f4\uff0c\u5728Spring Framework 2.5\u5f15\u5165\u7684\u6a21\u5f0f\u6ce8\u89e3\u6709\uff1a \u5176\u4e2d\uff0c @Controller \uff0c @Repository \uff0c @Service \u90fd\u662f@ Component \u7684\u6d3e\u751f\u6ce8\u89e3\u3002","title":"3. @Component\u7684\u6d3e\u751f\u6027"},{"location":"SpringFramework/spring-stereotype-annotation/#4-component","text":"\u4ee5\u4e0b\u793a\u4f8b\u57fa\u4e8e**Spring Framework 2.5.6 SEC03**\u7248\u672c\u8fdb\u884c\uff0c\u6dfb\u52a0\u5982\u4e0b\u4f9d\u8d56\u5373\u53ef\uff1a <dependencies> <dependency> <groupId> org.springframework </groupId> <artifactId> spring </artifactId> <version> 2.5.6.SEC03 </version> </dependency> </dependencies> \u53c2\u7167 @Repository \u7684\u58f0\u660e\uff0c\u81ea\u5b9a\u4e49\u4e00\u4e2a @StringRepository \u6ce8\u89e3\uff1a package deep.in.springframework.annotation ; import org.springframework.stereotype.Component ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Component public @interface StringRepository { /** * \u5c5e\u6027\u65b9\u6cd5\u540d\u79f0\u5fc5\u987b\u4e0e{@link Component#value()}\u4fdd\u6301\u4e00\u81f4 * * @return Bean\u7684\u540d\u79f0 */ String value () default \"\" ; } \u65b0\u5efa\u4e00\u4e2aRepository\u7c7b\u578b\u7684\u7c7b\uff0c\u5c06\u5176\u6807\u6ce8\u4e3a @StringRepository \uff1a package deep.in.springframework.repository ; import deep.in.springframework.annotation.StringRepository ; import java.util.Arrays ; import java.util.List ; @StringRepository ( \"nameRepository\" ) public class NameRepository { /** * \u67e5\u627e\u6240\u6709\u7684\u540d\u5b57 * * @return List */ public List < String > findAll () { return Arrays . asList ( \"Tom\" , \"Jerry\" , \"LN\" ); } } Spring Framework 2.5\u6682\u4e0d\u652f\u6301 @ComponentScan \u6ce8\u89e3\uff0c\u53ea\u80fd\u4f7f\u7528\u4f20\u7edf\u7684XML\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns= \"http://www.springframework.org/schema/beans\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context= \"http://www.springframework.org/schema/context\" xsi:schemaLocation= \"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\" > <context:component-scan base-package= \"deep.in.springframework\" /> </beans> \u7f16\u5199\u5f15\u5bfc\u7c7b\uff1a package deep.in.springframework ; import deep.in.springframework.repository.NameRepository ; import org.springframework.context.support.ClassPathXmlApplicationContext ; public class ApplicationBootstrap { static { //Spring 2.5 \u4e0d\u517c\u5bb9Java8\uff0c\u964d\u4f4eJava\u7248\u672c System . setProperty ( \"java.version\" , \"1.7.0\" ); } public static void main ( String [] args ) { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext (); context . setConfigLocation ( \"classpath:/applicationContext.xml\" ); context . refresh (); NameRepository repository = ( NameRepository ) context . getBean ( \"nameRepository\" ); System . out . println ( repository . findAll ()); context . close (); } } \u6574\u4f53\u9879\u76ee\u7ed3\u6784\u4e3a\uff1a $ tree . . \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 deep \u2502 \u2502 \u2502 \u2514\u2500\u2500 in \u2502 \u2502 \u2502 \u2514\u2500\u2500 springframework \u2502 \u2502 \u2502 \u251c\u2500\u2500 ApplicationBootstrap.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 annotation \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 StringRepository.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 repository \u2502 \u2502 \u2502 \u2514\u2500\u2500 NameRepository.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u2514\u2500\u2500 applicationContext.xml \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 applicationContext.xml \u2502 \u2514\u2500\u2500 deep \u2502 \u2514\u2500\u2500 in \u2502 \u2514\u2500\u2500 springframework \u2502 \u251c\u2500\u2500 ApplicationBootstrap.class \u2502 \u251c\u2500\u2500 annotation \u2502 \u2502 \u2514\u2500\u2500 StringRepository.class \u2502 \u2514\u2500\u2500 repository \u2502 \u2514\u2500\u2500 NameRepository.class \u2514\u2500\u2500 generated-sources \u2514\u2500\u2500 annotations 20 directories, 9 files \u8fd0\u884c\u5f15\u5bfc\u7c7b\uff0c\u5373\u53ef\u5f97\u5230\u7ed3\u679c\uff1a Sep 11, 2020 1:43:14 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b: display name [org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b]; startup date [Fri Sep 11 13:43:14 CST 2020]; root of context hierarchy Sep 11, 2020 1:43:14 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [applicationContext.xml] Sep 11, 2020 1:43:14 PM org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory INFO: Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b]: org.springframework.beans.factory.support.DefaultListableBeanFactory@c39f790 Sep 11, 2020 1:43:14 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@c39f790: defining beans [nameRepository,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor]; root of factory hierarchy Sep 11, 2020 1:43:14 PM org.springframework.context.support.AbstractApplicationContext doClose INFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b: display name [org.springframework.context.support.ClassPathXmlApplicationContext@6e2c634b]; startup date [Fri Sep 11 13:43:14 CST 2020]; root of context hierarchy Sep 11, 2020 1:43:14 PM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@c39f790: defining beans [nameRepository,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor]; root of factory hierarchy [Tom, Jerry, LN] \u8fd0\u884c\u7ed3\u679c\u8868\u660e\uff1a @StringRepository \u4f5c\u4e3a @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c\u7ecfSpring Framework\u626b\u63cf\u6ce8\u518c\u540e\uff0c\u5176\u8bed\u4e49\u548c @Repository \u7c7b\u4f3c\u3002\u88ab\u6807\u6ce8\u7684\u7c7b\u88abSpring\u4e0a\u4e0b\u6587\u521d\u59cb\u5316\u4e3aSpring Bean\u5e76\u88ab\u5bb9\u5668\u7ba1\u7406\u3002","title":"4. \u81ea\u5b9a\u4e49@Component\u6d3e\u751f\u6ce8\u89e3"},{"location":"SpringFramework/spring-stereotype-annotation/#5-component","text":"\u57fa\u4e8e**Spring Framework 2.5.6.SEC03**\u7248\u672c\uff0c\u4e0a\u4f8b\u4e2d\u4f7f\u7528\u4e86 <context:component-scan/> \u5143\u7d20\u8fdb\u884c @Component \u7ec4\u4ef6\u626b\u63cf\u3002 context \u524d\u7f00\u7684\u5904\u7406\u7c7b\u53ef\u4ee5\u5728 /META-INF/spring.handlers \u6587\u4ef6\u4e2d\u627e\u5230\uff0c\u5c31\u662f: ... http\\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler ... ContextNamespaceHandler \u5c31\u662f context \u5bf9\u5e94\u7684\u5904\u7406\u7c7b\uff1a package org.springframework.context.config ; ... public class ContextNamespaceHandler extends NamespaceHandlerSupport { public void init () { ... registerJava5DependentParser ( \"component-scan\" , \"org.springframework.context.annotation.ComponentScanBeanDefinitionParser\" ); ... } ... } \u53ef\u4ee5\u5f97\u5230 <context:component-scan/> \u7684\u5904\u7406\u7c7b\u5c31\u662f org.springframework.context.annotation.ComponentScanBeanDefinitionParser \u3002 ComponentScanBeanDefinitionParser \u662f\u4e00\u79cdBean\u5b9a\u4e49\u89e3\u6790\u5668\u7684\u5b9e\u73b0\uff0c\u5f53Spring ApplicationContext\u52a0\u8f7d\u5e76\u89e3\u6790XML\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u89e3\u6790\u5230 <context:component-scan/> \u65f6\uff0c ComponentScanBeanDefinitionParser.parse(Element, ParserContext) \u65b9\u6cd5\u5c06\u88ab\u8c03\u7528\uff1a package org.springframework.context.annotation ; ... public class ComponentScanBeanDefinitionParser implements BeanDefinitionParser { private static final String BASE_PACKAGE_ATTRIBUTE = \"base-package\" ; ... public BeanDefinition parse ( Element element , ParserContext parserContext ) { String [] basePackages = StringUtils . commaDelimitedListToStringArray ( element . getAttribute ( BASE_PACKAGE_ATTRIBUTE )); // Actually scan for bean definitions and register them. ClassPathBeanDefinitionScanner scanner = configureScanner ( parserContext , element ); Set < BeanDefinitionHolder > beanDefinitions = scanner . doScan ( basePackages ); registerComponents ( parserContext . getReaderContext (), beanDefinitions , element ); return null ; } } \u89e3\u6790\u5230\u5c5e\u6027 base-package \u540e\uff0c basePackages \u63a5\u6536\u5c06\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u4e4b\u540e\u4f20\u5165 ClassPathBeanDefinitionScanner.doScan(String...) \u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de Set<BeanDefinitionHolder> \uff0c\u800c BeanDefinitionHolder \u5305\u542bBean\u5b9a\u4e49( BeanDefinition )\uff0cbean\u540d\u79f0\u548c\u522b\u540d\u4fe1\u606f\uff1a package org.springframework.beans.factory.config ; ... public class BeanDefinitionHolder implements BeanMetadataElement { private final BeanDefinition beanDefinition ; private final String beanName ; private final String [] aliases ; ... } \u5728\u4e0a\u4f8b\u4e2d\uff0c @StringRepository \u6807\u6ce8\u7684 NameRepository \u7c7b\u5c06\u88ab\u89e3\u6790\u4e3a BeanDefinitionHolder \uff0c\u5176\u4e2d\u7684 beanName \u4e3a nameRepository \uff0c deep.in.springframework.repository.NameRepository \u5373\u4e3a BeanDefinition \u7684\u7c7b\u578b\u3002\u4e4b\u540e\uff0cSpring ApplicationContext\u5c06\u5176\u521d\u59cb\u5316\u4e3aSpring Bean\u3002 \u5728 doScan(String...) \u65b9\u6cd5\u4e2d\uff1a package org.springframework.context.annotation ; ... public class ClassPathBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider { ... protected Set < BeanDefinitionHolder > doScan ( String ... basePackages ) { Set < BeanDefinitionHolder > beanDefinitions = new LinkedHashSet < BeanDefinitionHolder > (); for ( int i = 0 ; i < basePackages . length ; i ++ ) { Set < BeanDefinition > candidates = findCandidateComponents ( basePackages [ i ] ); for ( BeanDefinition candidate : candidates ) { String beanName = this . beanNameGenerator . generateBeanName ( candidate , this . registry ); if ( candidate instanceof AbstractBeanDefinition ) { postProcessBeanDefinition (( AbstractBeanDefinition ) candidate , beanName ); } ScopeMetadata scopeMetadata = this . scopeMetadataResolver . resolveScopeMetadata ( candidate ); if ( checkCandidate ( beanName , candidate )) { BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder ( candidate , beanName ); definitionHolder = applyScope ( definitionHolder , scopeMetadata ); beanDefinitions . add ( definitionHolder ); registerBeanDefinition ( definitionHolder , this . registry ); } } } return beanDefinitions ; } ... } \u6839\u636e basePackages \u4f9d\u6b21\u8fed\u4ee3\uff0c\u901a\u8fc7\u7236\u7c7b ClassPathScanningCandidateComponentProvider \u63d0\u4f9b\u7684 findCandidateComponents(String) \u65b9\u6cd5\uff0c\u8fd4\u56de\u5019\u9009\u7684 BeanDefinition \u96c6\u5408\uff1a package org.springframework.context.annotation ; ... public class ClassPathScanningCandidateComponentProvider implements ResourceLoaderAware { ... public Set < BeanDefinition > findCandidateComponents ( String basePackage ) { Set < BeanDefinition > candidates = new LinkedHashSet < BeanDefinition > (); try { String packageSearchPath = ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX + resolveBasePackage ( basePackage ) + \"/\" + this . resourcePattern ; Resource [] resources = this . resourcePatternResolver . getResources ( packageSearchPath ); boolean traceEnabled = logger . isTraceEnabled (); boolean debugEnabled = logger . isDebugEnabled (); for ( int i = 0 ; i < resources . length ; i ++ ) { Resource resource = resources [ i ] ; if ( traceEnabled ) { logger . trace ( \"Scanning \" + resource ); } if ( resource . isReadable ()) { MetadataReader metadataReader = this . metadataReaderFactory . getMetadataReader ( resource ); if ( isCandidateComponent ( metadataReader )) { ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition ( metadataReader ); sbd . setResource ( resource ); sbd . setSource ( resource ); if ( isCandidateComponent ( sbd )) { if ( debugEnabled ) { logger . debug ( \"Identified candidate component class: \" + resource ); } candidates . add ( sbd ); } else { if ( debugEnabled ) { logger . debug ( \"Ignored because not a concrete top-level class: \" + resource ); } } } else { if ( traceEnabled ) { logger . trace ( \"Ignored because not matching any filter: \" + resource ); } } } else { if ( traceEnabled ) { logger . trace ( \"Ignored because not readable: \" + resource ); } } } } catch ( IOException ex ) { throw new BeanDefinitionStoreException ( \"I/O failure during classpath scanning\" , ex ); } return candidates ; } ... } \u5176\u4e2d\uff0c String packageSearchPath = ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX + resolveBasePackage ( basePackage ) + \"/\" + this . resourcePattern ; \u5c06 basePackage \u8f6c\u6362\u4e3a\u641c\u7d22\u8def\u5f84\uff0c\u4e0a\u4f8b\u4e2d\u53c2\u6570\u8f6c\u6362\u4e3a\uff1a classpath*:deep/in/springframework/**/*.class \u4e4b\u540e\uff0c\u901a\u8fc7\uff1a Resource [] resources = this . resourcePatternResolver . getResources ( packageSearchPath ); \u83b7\u53d6\u5230\u641c\u7d22\u8def\u5f84\u4e0b\u7684\u6240\u6709\u8d44\u6e90\uff0c\u4e0a\u4f8b\u4e2d\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a \u7d27\u63a5\u7740\uff0c\u8fed\u4ee3\u83b7\u53d6\u5230\u7684 resources \u5bf9\u8c61\uff0c\u8d44\u6e90\u53ef\u4ee5\u88ab\u8bfb\u53d6\uff0c resource.isReadable() \u4e3a true \u65f6\uff0c\u901a\u8fc7\uff1a MetadataReader metadataReader = this . metadataReaderFactory . getMetadataReader ( resource ); \u83b7\u53d6\u8be5\u8d44\u6e90\u7684 MetadataReader \u5bf9\u8c61\uff1a package org.springframework.core.type.classreading ; import org.springframework.core.type.AnnotationMetadata ; import org.springframework.core.type.ClassMetadata ; public interface MetadataReader { /** * Read basic class metadata for the underlying class. */ ClassMetadata getClassMetadata (); /** * Read full annotation metadata for the underlying class. */ AnnotationMetadata getAnnotationMetadata (); } \u4e4b\u540e\u8fdb\u884c isCandidateComponent(MetadataReader) \u5224\u65ad\uff1a package org.springframework.context.annotation ; ... public class ClassPathScanningCandidateComponentProvider implements ResourceLoaderAware { ... protected boolean isCandidateComponent ( MetadataReader metadataReader ) throws IOException { for ( TypeFilter tf : this . excludeFilters ) { if ( tf . match ( metadataReader , this . metadataReaderFactory )) { return false ; } } for ( TypeFilter tf : this . includeFilters ) { if ( tf . match ( metadataReader , this . metadataReaderFactory )) { return true ; } } return false ; } ... } \u5176\u4e2d\u4f7f\u7528 excludeFilters \u548c includeFilters \u4e24\u4e2a\u6761\u4ef6\u6765\u8fdb\u884c\u5224\u65ad\uff0c\u5b83\u4eec\u7684\u521d\u59cb\u5316\u662f\u5728\uff1a package org.springframework.context.annotation ; ... public class ComponentScanBeanDefinitionParser implements BeanDefinitionParser { ... protected ClassPathBeanDefinitionScanner configureScanner ( ParserContext parserContext , Element element ) { ... boolean useDefaultFilters = true ; if ( element . hasAttribute ( USE_DEFAULT_FILTERS_ATTRIBUTE )) { useDefaultFilters = Boolean . valueOf ( element . getAttribute ( USE_DEFAULT_FILTERS_ATTRIBUTE )); } // Delegate bean definition registration to scanner class. ClassPathBeanDefinitionScanner scanner = createScanner ( readerContext , useDefaultFilters ); } ... protected ClassPathBeanDefinitionScanner createScanner ( XmlReaderContext readerContext , boolean useDefaultFilters ) { return new ClassPathBeanDefinitionScanner ( readerContext . getRegistry (), useDefaultFilters ); } ... } \u4e2d\u901a\u8fc7 ClassPathBeanDefinitionScanner \u7684\u6784\u9020\u65b9\u6cd5\u5b8c\u6210\u7684\uff1a package org.springframework.context.annotation ; ... public class ClassPathBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider { public ClassPathBeanDefinitionScanner ( BeanDefinitionRegistry registry , boolean useDefaultFilters ) { super ( useDefaultFilters ); Assert . notNull ( registry , \"BeanDefinitionRegistry must not be null\" ); this . registry = registry ; // Determine ResourceLoader to use. if ( this . registry instanceof ResourceLoader ) { setResourceLoader (( ResourceLoader ) this . registry ); } } } useDefaultFilters \u9ed8\u8ba4\u4e3a true \uff0c\u5219\u7531\u5176\u7236\u7c7b\u6784\u9020\u65b9\u6cd5\uff1a package org.springframework.context.annotation ; ... public class ClassPathScanningCandidateComponentProvider implements ResourceLoaderAware { ... public ClassPathScanningCandidateComponentProvider ( boolean useDefaultFilters ) { if ( useDefaultFilters ) { registerDefaultFilters (); } } ... protected void registerDefaultFilters () { this . includeFilters . add ( new AnnotationTypeFilter ( Component . class )); } ... } \u6700\u7ec8\u5b8c\u6210\uff0c\u53ef\u4ee5\u770b\u5230\uff0c includeFilters \u5bf9\u8c61\u5305\u542b\u4e86 @Component \u7c7b\u578b\u7684 AnnotationTypeFilter \u5bf9\u8c61\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e excludeFilters \u5bf9\u8c61\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6b64\u65f6\u7684 AnnotationTypeFilter \u53ef\u4ee5\u8bc6\u522b @Component \uff0c @Controller \uff0c @Repository \uff0c @Service \u7c7b\u578b\u7684\u6ce8\u89e3\u5143\u4fe1\u606f\u3002 \u5224\u65ad\u5b8c\u5019\u9009 Component \u540e\uff0c\u7ee7\u7eed\u6267\u884c\uff1a ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition ( metadataReader ); ScannedGenericBeanDefinition \u7684\u5b9a\u4e49\u4e3a\uff1a package org.springframework.context.annotation ; ... public class ScannedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition { private final AnnotationMetadata metadata ; public ScannedGenericBeanDefinition ( MetadataReader metadataReader ) { Assert . notNull ( metadataReader , \"MetadataReader must not be null\" ); this . metadata = metadataReader . getAnnotationMetadata (); setBeanClassName ( this . metadata . getClassName ()); } public final AnnotationMetadata getMetadata () { return this . metadata ; } } \u6700\u7ec8\uff0c\u53ea\u6709\u8d44\u6e90 deep.in.springframework.repository.NameRepository \u88ab\u88c5\u5165 Set<BeanDefinition> candidates \u5bf9\u8c61\u4e2d\uff0c\u800c deep.in.springframework.annotation.StringRepository \u4e0d\u88ab\u88c5\u5165\u662f\u56e0\u4e3a Ignored because not a concrete top-level class \uff0c\u5f15\u5bfc\u7c7b\u5219\u662f Ignored because not matching any filter \u7684\u539f\u56e0\u88ab\u6392\u9664\u4e86\u3002 \u81f3\u6b64\uff0c deep.in.springframework.repository.NameRepository \u4f5c\u4e3a BeanDefinition \u8fd4\u56de\u5e76\u8fdb\u884c\u540e\u7eed\u7684\u521d\u59cb\u5316\u3002 \u540c\u6837\uff0c\u5728 ClassPathBeanDefinitionScanner \u7684 JavaDoc\u6587\u6863 \u4e2d\uff0c\u4e5f\u6709\u8bf4\u660e\uff1a Candidate classes are detected through configurable type filters. The default filters include classes that are annotated with Spring's @Component , @Repository , @Service , or @Controller stereotype ClassPathBeanDefinitionScanner \u901a\u8fc7\u9ed8\u8ba4\u8fc7\u6ee4\u5668\u5f15\u5165\u6807\u8bb0\u4e86 @Component \uff0c @Repository \uff0c @Service \uff0c\u6216 @Controller \u7684\u7c7b\uff0c\u540c\u7406\uff0c\u5b83\u4e5f\u80fd\u5f15\u5165\u6240\u6709\u6807\u8bb0\u4e86 @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c\u6bd4\u5982\u4e0a\u4f8b\u4e2d\u7684 @StringRepository \u3002 Spring 3.0\u5f15\u5165\u7684 @Configuration \u6ce8\u89e3\uff0c\u4e5f\u662f @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c \u53ef\u4ee5\u53c2\u8003 package org.springframework.context.annotation ; ... @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Component public @interface Configuration { ... String value () default \"\" ; ... } ClassPathBeanDefinitionScanner \u4e5f\u5141\u8bb8\u81ea\u5b9a\u4e49\u7c7b\u578b\u8fc7\u6ee4\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7 <context:component-scan/> \u7684 include-filter \u548c exclude-filter \u5c5e\u6027\u6765\u914d\u7f6e\u3002","title":"5. @Component\u6d3e\u751f\u539f\u7406"},{"location":"SpringFramework/spring-stereotype-annotation/#6-component","text":"@SpringBootApplication \u662fSpring Boot\u4e2d\u6700\u5e38\u89c1\u7684\u6ce8\u89e3\uff0c\u5728 \u5b98\u65b9\u6587\u6863 \u4e2d\uff0c\u6709\u5982\u4e0b\u63cf\u8ff0\uff1a A single @SpringBootApplication annotation can be used to enable those three features, that is: @EnableAutoConfiguration : enable Spring Boot\u2019s auto-configuration mechanism @ComponentScan : enable @Component scan on the package where the application is located (see the best practices ) @Configuration : allow to register extra beans in the context or import additional configuration classes package com.example.myapplication ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } \u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u4e86 @SpringBootApplication \u76f8\u5f53\u4e8e @Configuration \uff0c @ComponentScan \u548c @EnableAutoConfiguration \u7684\u8054\u5408\u6ce8\u89e3. @SpringBootApplication \u6ce8\u89e3\u7684\u5b9a\u4e49\u4e3a\uff1a package org.springframework.boot.autoconfigure ; ... @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan ( excludeFilters = { @Filter ( type = FilterType . CUSTOM , classes = TypeExcludeFilter . class ), @Filter ( type = FilterType . CUSTOM , classes = AutoConfigurationExcludeFilter . class ) }) public @interface SpringBootApplication { ... } \u53ef\u4ee5\u770b\u5230\uff0c @ComponentScan \u548c @EnableAutoConfiguration \u662f\u76f4\u63a5\u6807\u6ce8\u7684\uff0c\u800c @Configuration \u5374\u4e0d\u662f\uff0c\u800c\u5728 @SpringBootConfiguration \u4e2d\uff1a package org.springframework.boot ; ... /** * Indicates that a class provides Spring Boot application * {@link Configuration @Configuration}. Can be used as an alternative to the Spring's * standard {@code @Configuration} annotation so that configuration can be found * automatically (for example in tests). * <p> * Application should only ever include <em>one</em> {@code @SpringBootConfiguration} and * most idiomatic Spring Boot applications will inherit it from * {@code @SpringBootApplication}. * * @author Phillip Webb * @author Andy Wilkinson * @since 1.4.0 */ @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Configuration public @interface SpringBootConfiguration { ... } \u5176\u6807\u6ce8\u4e86 @Configuration \u6ce8\u89e3\uff0c\u5df2\u77e5 @Configuration \u662f @Component \u7684\u6d3e\u751f\u6ce8\u89e3\uff0c\u6839\u636e\u5c42\u6b21\u5173\u7cfb\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a + @SpringBootApplication + @SpringBootConfiguration + @Configuration + @Component \u6839\u636e\u6ce8\u91ca\uff0c @SpringBootConfiguration \u662fSpring Boot 1.4.0\u7248\u672c\u5f15\u5165\u7684\uff0c\u4e4b\u524d @SpringBootApplication \u662f\u76f4\u63a5\u4f7f\u7528 @Configuration \u6ce8\u89e3\u7684\u3002 \u4e3a\u4e86\u9a8c\u8bc1 @Component \u6d3e\u751f\u6027\u7684\u591a\u5c42\u6b21\uff0c\u53ef\u4ee5\u8fdb\u884c\u9a8c\u8bc1\uff1a package deep.in.springboot ; import org.springframework.boot.WebApplicationType ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.boot.builder.SpringApplicationBuilder ; import org.springframework.context.ConfigurableApplicationContext ; @SpringBootApplication public class ComponentHierarchyApp { public static void main ( String [] args ) { Class appClass = ComponentHierarchyApp . class ; ConfigurableApplicationContext context = new SpringApplicationBuilder ( appClass ). web ( WebApplicationType . NONE ). run (); System . out . println ( context . getBean ( appClass )); context . close (); } } \u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\uff1a \u6240\u7528Spring Boot\u7684\u7248\u672c\u4e3a2.3.2.RELEASE\uff0c\u5176\u4f9d\u8d56\u7684Spring Framework\u7248\u672c\u53ef\u4ee5\u4ece org/springframework/boot/spring-boot-dependencies/2.3.2.RELEASE/spring-boot-dependencies-2.3.2.RELEASE.pom \u4e2d\u67e5\u5230\uff0c\u662f5.2.8.RELEASE \u8bf4\u660e\u5728\u8be5\u7248\u672c\u4e0b\uff0c @Component \u6d3e\u751f\u6027\u662f\u591a\u5c42\u6b21\u7684\u3002 \u56de\u5230**Spring Framework 2.5.6.SEC03**\u4e0b\uff0c\u5c06\u793a\u4f8b\u4ee3\u7801\u505a\u5982\u4e0b\u8c03\u6574\uff1a package deep.in.springframework.annotation ; import org.springframework.stereotype.Component ; import org.springframework.stereotype.Repository ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Repository //\u66ff\u6362@Component public @interface StringRepository { /** * \u5c5e\u6027\u65b9\u6cd5\u540d\u79f0\u5fc5\u987b\u4e0e{@link Component#value()}\u4fdd\u6301\u4e00\u81f4 * * @return Bean\u7684\u540d\u79f0 */ String value () default \"\" ; } \u5c06 @Component \u6ce8\u89e3\u66ff\u6362\u4e3a @Repository \u6ce8\u89e3\uff0c\u518d\u6b21\u8fd0\u884c\u5f15\u5bfc\u7a0b\u5e8f\uff1a \u66ff\u6362\u6ce8\u89e3\u4e4b\u540e\uff0c\u62a5\u9519 Exception in thread \"main\" org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'nameRepository' is defined \u3002\u8bf4\u660eSpring\u4e0d\u518d\u5c06 nameRepository \u89c6\u4e3aBean\u3002 \u8bf4\u660e\u5f53\u524d\u7248\u672c\u7684Spring Framework\u4e0d\u652f\u6301\u591a\u5c42\u6b21\u6d3e\u751f\u6ce8\u89e3\uff0c\u800c\u4e0a\u9762Spring Boot\u7684\u793a\u4f8b\u4e2d\uff0c ComponentHierarchyApp \u662f\u652f\u6301\u7684\uff0c\u8bf4\u660e\u662f\u540e\u7eedSpring\u7248\u672c\u4f5c\u51fa\u4e86\u4fee\u6539\uff0c\u652f\u6301\u4e86\u8fd9\u4e00\u7279\u6027\u3002 \u5c06Spring\u7248\u672c\u8c03\u6574\u4e3a**3.0.0.RELEASE**\uff1a <dependencies> <!-- <dependency>--> <!-- <groupId>org.springframework</groupId>--> <!-- <artifactId>spring</artifactId>--> <!-- <version>2.5.6.SEC03</version>--> <!-- </dependency>--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-context </artifactId> <version> 3.0.0.RELEASE </version> </dependency> </dependencies> \u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\uff0c\u4e00\u5207\u6b63\u5e38\uff0c\u8bf4\u660e\u8be5\u7248\u672c\u4e2d\u63d0\u5347\u4e86\u8be5\u7279\u6027\u3002","title":"6. \u591a\u5c42\u6b21@Component\u6d3e\u751f\u6027"},{"location":"SpringFramework/spring-stereotype-annotation/#7-component","text":"\u5728\u4e0a\u9762\u7b2c5\u90e8\u5206\u5206\u6790\u4e86 @Component \u6d3e\u751f\u6027\u539f\u7406\uff0c\u4e0b\u9762\u7ee7\u7eed\u5206\u6790**2.5.6.SEC03**\u548c**3.0.0.RELEASE**\u7248\u672c\u4e2d\u6e90\u7801\u7684\u5dee\u5f02\uff0c\u89e3\u91ca\u5bf9\u591a\u5c42\u6b21\u6d3e\u751f\u7684\u652f\u6301\u3002 \u9996\u5148\u5bf9\u6bd4 ClassPathScanningCandidateComponentProvider \uff1a package org.springframework.context.annotation ; ... public class ClassPathScanningCandidateComponentProvider implements ResourceLoaderAware { ... @SuppressWarnings ( \"unchecked\" ) protected void registerDefaultFilters () { this . includeFilters . add ( new AnnotationTypeFilter ( Component . class )); ClassLoader cl = ClassPathScanningCandidateComponentProvider . class . getClassLoader (); try { this . includeFilters . add ( new AnnotationTypeFilter ( (( Class <? extends Annotation > ) cl . loadClass ( \"javax.annotation.ManagedBean\" )), false )); logger . info ( \"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning\" ); } catch ( ClassNotFoundException ex ) { // JSR-250 1.1 API (as included in Java EE 6) not available - simply skip. } try { this . includeFilters . add ( new AnnotationTypeFilter ( (( Class <? extends Annotation > ) cl . loadClass ( \"javax.inject.Named\" )), false )); logger . info ( \"JSR-330 'javax.inject.Named' annotation found and supported for component scanning\" ); } catch ( ClassNotFoundException ex ) { // JSR-330 API not available - simply skip. } } } registerDefaultFilters() \u65b9\u6cd5\u53d8\u5316\u8f83\u5927\uff0c\u5f00\u59cb\u652f\u6301JSR-250\u7684 @ManagedBean \u548cJSR-330\u7684 @Named \u7684 AnnotationTypeFilter findCandidateComponents(String) \u65b9\u6cd5\u5219\u662f\u5c0f\u5e45\u6539\u52a8\uff1a Java 5\u7684\u589e\u5f3afor\u5faa\u73af\u548c\u4e00\u6bb5try-catch\u63a7\u5236\uff0c\u5e76\u6ca1\u6709\u672c\u8d28\u6027\u53d8\u5316\u3002 \u5bf9\u6bd4 AnnotationTypeFilter \uff1a \u4ec5\u6709Java 5\u6cdb\u578b\u548c\u81ea\u52a8\u88c5\u7bb1\u8c03\u6574\uff0c\u4e5f\u6ca1\u6709\u672c\u8d28\u6027\u53d8\u5316\u3002 SimpleMetadataReader \u662f\u63a5\u53e3 MetadataReader \u552f\u4e00\u975e\u516c\u6709\u5b9e\u73b0\u7c7b\uff0c\u8fdb\u884c\u5bf9\u6bd4\uff1a \u65b0\u589e\u4e86 classMetadata \u548c annotationMetadata \u5c5e\u6027\uff0c\u4e14\u5f53\u65b9\u6cd5\u591a\u6b21\u8c03\u7528\u65f6\uff0c\u8fdb\u884c\u975e\u7a7a\u5224\u65ad\uff0c\u907f\u514d\u4e86\u91cd\u590d\u521b\u5efa\u3002 \u81f3\u6b64\u4ecd\u6ca1\u6709\u672c\u8d28\u6027\u53d8\u5316\uff0c\u5c31\u9700\u8981\u7ee7\u7eed\u5206\u6790 ClassMetadataReadingVisitor \u548c AnnotationMetadataReadingVisitor \u4e86\u3002 3.0.0.RELEASE\u7684 ClassMetadataReadingVisitor \u65b0\u589e\u4e86\u4e00\u4e9b visit* \u65b9\u6cd5\uff0c\u6ca1\u6709\u5b9e\u73b0\u5c42\u9762\u7684\u53d8\u5316\u3002 \u5bf9\u6bd4 AnnotationMetadataReadingVisitor \uff1a \u53ef\u4ee5\u53d1\u73b0\uff0c**3.0.0.RELEASE**\u7684\u53d8\u5316\u4e3b\u8981\u96c6\u4e2d\u5728 visitAnnotation \u65b9\u6cd5\u4e0a\uff0c\u4f7f\u7528 AnnotationAttributesReadingVisitor \u53d6\u4ee3\u4e86**2.5.6.SEC03**\u4e2d\u7684 EmptyVisitor \u533f\u540d\u5185\u90e8\u7c7b\u5b9e\u73b0\u3002 **2.5.6.SEC03**\u7684\u4e3b\u8981\u5b9e\u73b0\u662f\uff1a public void visitEnd () { try { Class annotationClass = classLoader . loadClass ( className ); ... // Register annotations that the annotation type is annotated with. Annotation [] metaAnnotations = annotationClass . getAnnotations (); Set < String > metaAnnotationTypeNames = new HashSet < String > (); for ( Annotation metaAnnotation : metaAnnotations ) { metaAnnotationTypeNames . add ( metaAnnotation . annotationType (). getName ()); } metaAnnotationMap . put ( className , metaAnnotationTypeNames ); } catch ( ClassNotFoundException ex ) { // Class not found - can't determine meta-annotations. } attributesMap . put ( className , attributes ); } \u4e4b\u524d\u7f16\u5199\u7684 NameRepository \u7684\u6ce8\u89e3\u5c42\u6b21\u4e3a\uff1a + @Component + @StringRepository + NameRepository \u7ed3\u5408\u4e0a\u8ff0\u4ee3\u7801\uff0c annotationClass \u5c31\u662f @StringRepository \uff0c\u56e0\u4e3a metaAnnotations \u6570\u7ec4\u4ec5\u4ec5\u83b7\u53d6\u5f53\u524d\u7c7b\u6240\u6807\u6ce8\u7684\u6ce8\u89e3\uff0c\u6240\u4ee5\u6b64\u65f6\u53ea\u6709 @Repository \u800c\u6ca1\u6709 @Component \uff0c\u7531\u4e8e**2.5.6.SEC03**\u4e2d\u7684\u5b9e\u73b0\u672a\u4f7f\u7528\u5c42\u6b21\u9012\u5f52\u83b7\u53d6 Annotation[] \uff0c\u6240\u4ee5\u4ec5\u652f\u6301\u5355\u5c42\u6b21\u7684 @Component \u6d3e\u751f\u3002 **3.0.0.RELEASE**\u7684\u5b9e\u73b0\u4e3a\uff1a public void visitEnd () { this . attributesMap . put ( this . annotationType , this . localAttributes ); try { Class <?> annotationClass = this . classLoader . loadClass ( this . annotationType ); ... // Register annotations that the annotation type is annotated with. Set < String > metaAnnotationTypeNames = new LinkedHashSet < String > (); for ( Annotation metaAnnotation : annotationClass . getAnnotations ()) { metaAnnotationTypeNames . add ( metaAnnotation . annotationType (). getName ()); if ( ! this . attributesMap . containsKey ( metaAnnotation . annotationType (). getName ())) { this . attributesMap . put ( metaAnnotation . annotationType (). getName (), AnnotationUtils . getAnnotationAttributes ( metaAnnotation , true )); } for ( Annotation metaMetaAnnotation : metaAnnotation . annotationType (). getAnnotations ()) { metaAnnotationTypeNames . add ( metaMetaAnnotation . annotationType (). getName ()); } } if ( this . metaAnnotationMap != null ) { this . metaAnnotationMap . put ( this . annotationType , metaAnnotationTypeNames ); } } catch ( ClassNotFoundException ex ) { // Class not found - can't determine meta-annotations. } } \u4ece\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u7b2c\u4e00\u5c42\u5faa\u73af for (Annotation metaAnnotation : annotationClass.getAnnotations()) \u662f\u83b7\u53d6\u7b2c\u4e00\u5c42\u5143\u6ce8\u89e3\u6570\u7ec4\uff0c\u7b2c\u4e8c\u5c42\u5faa\u73af for (Annotation metaMetaAnnotation : metaAnnotation.annotationType().getAnnotations()) \u662f\u5728\u7b2c\u4e00\u5c42\u7684\u57fa\u7840\u4e0a\u518d\u6b21\u83b7\u53d6\u5143\u6ce8\u89e3\u6570\u7ec4\u3002 \u7ed3\u5408 @StringRepository \uff0c\u7b2c\u4e00\u5c42\u5143\u6ce8\u89e3 @Repository \u662f metaAnnotation \uff0c\u7b2c\u4e8c\u5c42\u5143\u6ce8\u89e3 @Component \u662f metaMetaAnnotation \u3002 \u6b64\u5904\u7684\u5b9e\u73b0\u4ecd\u7136\u5b58\u5728\u95ee\u9898\uff0c\u5b83\u6307\u5904\u7406\u4e86\u4e24\u5c42 @Component \u6d3e\u751f\uff0c\u800c\u6ca1\u6709\u5904\u7406\u591a\u5c42 @Component \u6d3e\u751f\uff0c\u4e0b\u9762\u8fdb\u884c\u9a8c\u8bc1\uff1a \u58f0\u660e @FirstLevelRepository \u548c @SecondLevelRepository package deep.in.springframework.annotation ; import org.springframework.stereotype.Repository ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Repository public @interface FirstLevelRepository { String value () default \"\" ; } package deep.in.springframework.annotation ; import java.lang.annotation.* ; @Target ({ ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) @Documented @FirstLevelRepository public @interface SecondLevelRepository { String value () default \"\" ; } \u5176\u4e2d @FirstLevelRepository \u662f\u7b2c\u4e8c\u5c42 @Component \u6ce8\u89e3\uff0c @SecondLevelRepository \u662f\u7b2c\u4e09\u5c42 @Component \u6ce8\u89e3\uff0c\u6574\u4f53\u7684\u6d3e\u751f\u5c42\u6b21\u4e3a\uff1a @SecondLevelRepository |- @FirstLevelRepository |- @Repository |- @Component \u6807\u6ce8 @FirstLevelRepository \u548c @SecondLevelRepository package deep.in.springframework.repository ; import deep.in.springframework.annotation.FirstLevelRepository ; @FirstLevelRepository ( \"myFirstLevelRepository\" ) public class MyFirstLevelRepository { } package deep.in.springframework.repository ; import deep.in.springframework.annotation.SecondLevelRepository ; @SecondLevelRepository ( \"mySecondLevelRepository\" ) public class MySecondLevelRepository { } \u914d\u7f6e @Component \u626b\u63cf <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns= \"http://www.springframework.org/schema/beans\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context= \"http://www.springframework.org/schema/context\" xsi:schemaLocation= \"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\" > <!-- \u6fc0\u6d3b\u6ce8\u89e3\u9a71\u52a8\u7279\u6027 --> <context:annotation-config/> <context:component-scan base-package= \"deep.in.springframework\" /> </beans> \u7531\u4e8eSpring Framework 3.0.0.RELEASE\u8fd8\u672a\u5f15\u5165 @ComponentScan \uff0c\u56e0\u6b64\u4ecd\u7136\u91c7\u7528XML\u5143\u7d20 <context:component-scan> \u7ec4\u4ef6\u626b\u63cf\u7684\u65b9\u5f0f\u3002 \u7f16\u5199\u5f15\u5bfc\u7c7b package deep.in.springframework ; import org.springframework.context.support.ClassPathXmlApplicationContext ; public class ApplicationBootstrap { public static void main ( String [] args ) { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext (); context . setConfigLocation ( \"classpath:/applicationContext.xml\" ); context . refresh (); System . out . println ( context . containsBean ( \"myFirstLevelRepository\" )); System . out . println ( context . containsBean ( \"mySecondLevelRepository\" )); context . close (); } } \u8fd0\u884c\u7a0b\u5e8f\uff0c\u5f97\u5230\u7ed3\u679c\uff1a Oct 14, 2020 11:10:45 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@439f5b3d: startup date [Wed Oct 14 23:10:45 CST 2020]; root of context hierarchy Oct 14, 2020 11:10:45 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [applicationContext.xml] Oct 14, 2020 11:10:45 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@3b6eb2ec: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,myFirstLevelRepository]; root of factory hierarchy true false Oct 14, 2020 11:10:45 PM org.springframework.context.support.AbstractApplicationContext doClose INFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@439f5b3d: startup date [Wed Oct 14 23:10:45 CST 2020]; root of context hierarchy Oct 14, 2020 11:10:45 PM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@3b6eb2ec: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,myFirstLevelRepository]; root of factory hierarchy Process finished with exit code 0 \u4ece\u7ed3\u679c\u5373\u53ef\u770b\u51fa\uff0cSpring Framework 3.0.0.RELEASE\u4ec5\u4ec5\u652f\u6301\u4e24\u5c42 @Component \u6d3e\u751f\uff0c\u539f\u56e0\u5c31\u662f AnnotationAttributesReadingVisitor \u6ca1\u6709\u9012\u5f52\u67e5\u627e\u6240\u6709\u5c42\u6b21\u7684\u5143\u6ce8\u89e3\u3002 \u7ee7\u7eed\u67e5\u770bSpring 3.x\u7684 AnnotationAttributesReadingVisitor \u6e90\u4ee3\u7801\uff1a 3.0.x 3.1.x 3.2.x \u82e5\u8981\u8be6\u7ec6\u67e5\u770b\u5404\u4e2a\u7248\u672c\u4e2d\u7684\u6e90\u4ee3\u7801\uff0c\u4fee\u6539 pom.xml \u4e2d\u7684\u7248\u672c\u53f7\u5373\u53ef\uff1a <dependencies> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-context </artifactId> <version> 3.0.0.RELEASE </version> </dependency> </dependencies> \u5176\u4e2d\u7684\u7248\u672c\u53f7\uff0c\u53ef\u4ee5 \u5728\u6b64\u67e5\u770b \u5728Spring Framework 3\u7684\u5404\u7248\u672c\u4e2d\uff0c AnnotationAttributesReadingVisitor \u90fd\u6ca1\u6709\u672c\u8d28\u7684\u53d8\u5316\uff0c\u800c\u5728Spring Framework 4.0.x\u4e2d\uff0c \u4ee3\u7801 \u53d1\u751f\u4e86\u6539\u53d8\u3002 @Override public void doVisitEnd ( Class <?> annotationClass ) { super . doVisitEnd ( annotationClass ); List < AnnotationAttributes > attributes = this . attributesMap . get ( this . annotationType ); if ( attributes == null ) { this . attributesMap . add ( this . annotationType , this . attributes ); } else { attributes . add ( 0 , this . attributes ); } Set < String > metaAnnotationTypeNames = new LinkedHashSet < String > (); Annotation [] metaAnnotations = AnnotationUtils . getAnnotations ( annotationClass ); if ( ! ObjectUtils . isEmpty ( metaAnnotations )) { for ( Annotation metaAnnotation : metaAnnotations ) { if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( metaAnnotation )) { recursivelyCollectMetaAnnotations ( metaAnnotationTypeNames , metaAnnotation ); } } } if ( this . metaAnnotationMap != null ) { this . metaAnnotationMap . put ( annotationClass . getName (), metaAnnotationTypeNames ); } } private void recursivelyCollectMetaAnnotations ( Set < String > visited , Annotation annotation ) { String annotationName = annotation . annotationType (). getName (); if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( annotation ) && visited . add ( annotationName )) { // Only do further scanning for public annotations; we'd run into // IllegalAccessExceptions otherwise, and we don't want to mess with // accessibility in a SecurityManager environment. if ( Modifier . isPublic ( annotation . annotationType (). getModifiers ())) { this . attributesMap . add ( annotationName , AnnotationUtils . getAnnotationAttributes ( annotation , false , true )); for ( Annotation metaMetaAnnotation : annotation . annotationType (). getAnnotations ()) { recursivelyCollectMetaAnnotations ( visited , metaMetaAnnotation ); } } } } \u5373\u91c7\u7528\u9012\u5f52\u65b9\u5f0f\u83b7\u53d6\u5143\u6ce8\u89e3\uff0c\u652f\u6301\u591a\u5c42\u6b21 @Component \u6d3e\u751f\u3002 \u800cSpring Boot\u8bde\u751f\u4e4b\u521d\uff0c\u5c31\u57fa\u4e8e\u4e86Spring Framework 4.1\u7248\u672c\uff0c \u53ef\u4ee5\u67e5\u770b \uff0c\u6240\u4ee5Spring Boot\u4e0e\u751f\u4ff1\u6765\u5c31\u652f\u6301\u591a\u5c42\u6b21 @Component \u6d3e\u751f\u6027\u3002","title":"7. \u591a\u5c42\u6b21@Component\u6d3e\u751f\u6027\u539f\u7406"}]}